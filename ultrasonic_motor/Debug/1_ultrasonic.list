
1_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003000  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080031c0  080031c0  000131c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800323c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00000138  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001ac  200001ac  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013dcc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000025fa  00000000  00000000  00033e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000069ad  00000000  00000000  0003646a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000533b  00000000  00000000  0003e360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003d40  00000000  00000000  0004369b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000473db  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001fd8  00000000  00000000  00047458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080031a8 	.word	0x080031a8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	080031a8 	.word	0x080031a8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b97a 	b.w	8000d90 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	468c      	mov	ip, r1
 8000aba:	460d      	mov	r5, r1
 8000abc:	4604      	mov	r4, r0
 8000abe:	9e08      	ldr	r6, [sp, #32]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d151      	bne.n	8000b68 <__udivmoddi4+0xb4>
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	4617      	mov	r7, r2
 8000ac8:	d96d      	bls.n	8000ba6 <__udivmoddi4+0xf2>
 8000aca:	fab2 fe82 	clz	lr, r2
 8000ace:	f1be 0f00 	cmp.w	lr, #0
 8000ad2:	d00b      	beq.n	8000aec <__udivmoddi4+0x38>
 8000ad4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000adc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ae0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ae8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000af0:	0c25      	lsrs	r5, r4, #16
 8000af2:	fbbc f8fa 	udiv	r8, ip, sl
 8000af6:	fa1f f987 	uxth.w	r9, r7
 8000afa:	fb0a cc18 	mls	ip, sl, r8, ip
 8000afe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b02:	fb08 f309 	mul.w	r3, r8, r9
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x6c>
 8000b0a:	19ed      	adds	r5, r5, r7
 8000b0c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b10:	f080 8123 	bcs.w	8000d5a <__udivmoddi4+0x2a6>
 8000b14:	42ab      	cmp	r3, r5
 8000b16:	f240 8120 	bls.w	8000d5a <__udivmoddi4+0x2a6>
 8000b1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b1e:	443d      	add	r5, r7
 8000b20:	1aed      	subs	r5, r5, r3
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b28:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b30:	fb00 f909 	mul.w	r9, r0, r9
 8000b34:	45a1      	cmp	r9, r4
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x98>
 8000b38:	19e4      	adds	r4, r4, r7
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 810a 	bcs.w	8000d56 <__udivmoddi4+0x2a2>
 8000b42:	45a1      	cmp	r9, r4
 8000b44:	f240 8107 	bls.w	8000d56 <__udivmoddi4+0x2a2>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	443c      	add	r4, r7
 8000b4c:	eba4 0409 	sub.w	r4, r4, r9
 8000b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b54:	2100      	movs	r1, #0
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d061      	beq.n	8000c1e <__udivmoddi4+0x16a>
 8000b5a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6034      	str	r4, [r6, #0]
 8000b62:	6073      	str	r3, [r6, #4]
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d907      	bls.n	8000b7c <__udivmoddi4+0xc8>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d054      	beq.n	8000c1a <__udivmoddi4+0x166>
 8000b70:	2100      	movs	r1, #0
 8000b72:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b76:	4608      	mov	r0, r1
 8000b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7c:	fab3 f183 	clz	r1, r3
 8000b80:	2900      	cmp	r1, #0
 8000b82:	f040 808e 	bne.w	8000ca2 <__udivmoddi4+0x1ee>
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xdc>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80fa 	bhi.w	8000d84 <__udivmoddi4+0x2d0>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb65 0503 	sbc.w	r5, r5, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	46ac      	mov	ip, r5
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d03f      	beq.n	8000c1e <__udivmoddi4+0x16a>
 8000b9e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	b912      	cbnz	r2, 8000bae <__udivmoddi4+0xfa>
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bae:	fab7 fe87 	clz	lr, r7
 8000bb2:	f1be 0f00 	cmp.w	lr, #0
 8000bb6:	d134      	bne.n	8000c22 <__udivmoddi4+0x16e>
 8000bb8:	1beb      	subs	r3, r5, r7
 8000bba:	0c3a      	lsrs	r2, r7, #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bc6:	0c25      	lsrs	r5, r4, #16
 8000bc8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bd0:	fb0c f308 	mul.w	r3, ip, r8
 8000bd4:	42ab      	cmp	r3, r5
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x134>
 8000bd8:	19ed      	adds	r5, r5, r7
 8000bda:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x132>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	f200 80d1 	bhi.w	8000d88 <__udivmoddi4+0x2d4>
 8000be6:	4680      	mov	r8, r0
 8000be8:	1aed      	subs	r5, r5, r3
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bf0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bf4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bf8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x15c>
 8000c00:	19e4      	adds	r4, r4, r7
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x15a>
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	f200 80b8 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 040c 	sub.w	r4, r4, ip
 8000c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c18:	e79d      	b.n	8000b56 <__udivmoddi4+0xa2>
 8000c1a:	4631      	mov	r1, r6
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	f1ce 0420 	rsb	r4, lr, #32
 8000c26:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c2a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c2e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c32:	0c3a      	lsrs	r2, r7, #16
 8000c34:	fa25 f404 	lsr.w	r4, r5, r4
 8000c38:	ea48 0803 	orr.w	r8, r8, r3
 8000c3c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c40:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c44:	fb02 4411 	mls	r4, r2, r1, r4
 8000c48:	fa1f fc87 	uxth.w	ip, r7
 8000c4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c50:	fb01 f30c 	mul.w	r3, r1, ip
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x1bc>
 8000c5c:	19ed      	adds	r5, r5, r7
 8000c5e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c62:	f080 808a 	bcs.w	8000d7a <__udivmoddi4+0x2c6>
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	f240 8087 	bls.w	8000d7a <__udivmoddi4+0x2c6>
 8000c6c:	3902      	subs	r1, #2
 8000c6e:	443d      	add	r5, r7
 8000c70:	1aeb      	subs	r3, r5, r3
 8000c72:	fa1f f588 	uxth.w	r5, r8
 8000c76:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c7a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c82:	fb00 f30c 	mul.w	r3, r0, ip
 8000c86:	42ab      	cmp	r3, r5
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1e6>
 8000c8a:	19ed      	adds	r5, r5, r7
 8000c8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c90:	d26f      	bcs.n	8000d72 <__udivmoddi4+0x2be>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0x2be>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443d      	add	r5, r7
 8000c9a:	1aeb      	subs	r3, r5, r3
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	e78f      	b.n	8000bc2 <__udivmoddi4+0x10e>
 8000ca2:	f1c1 0720 	rsb	r7, r1, #32
 8000ca6:	fa22 f807 	lsr.w	r8, r2, r7
 8000caa:	408b      	lsls	r3, r1
 8000cac:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb0:	ea48 0303 	orr.w	r3, r8, r3
 8000cb4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000cb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cc2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cca:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cce:	fa1f f883 	uxth.w	r8, r3
 8000cd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cd6:	fb09 f408 	mul.w	r4, r9, r8
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x244>
 8000ce6:	18ed      	adds	r5, r5, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	d243      	bcs.n	8000d76 <__udivmoddi4+0x2c2>
 8000cee:	42ac      	cmp	r4, r5
 8000cf0:	d941      	bls.n	8000d76 <__udivmoddi4+0x2c2>
 8000cf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf6:	441d      	add	r5, r3
 8000cf8:	1b2d      	subs	r5, r5, r4
 8000cfa:	fa1f fe8e 	uxth.w	lr, lr
 8000cfe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d02:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d0a:	fb00 f808 	mul.w	r8, r0, r8
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x26e>
 8000d12:	18e4      	adds	r4, r4, r3
 8000d14:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d18:	d229      	bcs.n	8000d6e <__udivmoddi4+0x2ba>
 8000d1a:	45a0      	cmp	r8, r4
 8000d1c:	d927      	bls.n	8000d6e <__udivmoddi4+0x2ba>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	441c      	add	r4, r3
 8000d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d26:	eba4 0408 	sub.w	r4, r4, r8
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	454c      	cmp	r4, r9
 8000d30:	46c6      	mov	lr, r8
 8000d32:	464d      	mov	r5, r9
 8000d34:	d315      	bcc.n	8000d62 <__udivmoddi4+0x2ae>
 8000d36:	d012      	beq.n	8000d5e <__udivmoddi4+0x2aa>
 8000d38:	b156      	cbz	r6, 8000d50 <__udivmoddi4+0x29c>
 8000d3a:	ebba 030e 	subs.w	r3, sl, lr
 8000d3e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d42:	fa04 f707 	lsl.w	r7, r4, r7
 8000d46:	40cb      	lsrs	r3, r1
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	40cc      	lsrs	r4, r1
 8000d4c:	6037      	str	r7, [r6, #0]
 8000d4e:	6074      	str	r4, [r6, #4]
 8000d50:	2100      	movs	r1, #0
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	4618      	mov	r0, r3
 8000d58:	e6f8      	b.n	8000b4c <__udivmoddi4+0x98>
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	e6e0      	b.n	8000b20 <__udivmoddi4+0x6c>
 8000d5e:	45c2      	cmp	sl, r8
 8000d60:	d2ea      	bcs.n	8000d38 <__udivmoddi4+0x284>
 8000d62:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d66:	eb69 0503 	sbc.w	r5, r9, r3
 8000d6a:	3801      	subs	r0, #1
 8000d6c:	e7e4      	b.n	8000d38 <__udivmoddi4+0x284>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	e7d7      	b.n	8000d22 <__udivmoddi4+0x26e>
 8000d72:	4640      	mov	r0, r8
 8000d74:	e791      	b.n	8000c9a <__udivmoddi4+0x1e6>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e7be      	b.n	8000cf8 <__udivmoddi4+0x244>
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	e778      	b.n	8000c70 <__udivmoddi4+0x1bc>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	e745      	b.n	8000c10 <__udivmoddi4+0x15c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e708      	b.n	8000b9a <__udivmoddi4+0xe6>
 8000d88:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8c:	443d      	add	r5, r7
 8000d8e:	e72b      	b.n	8000be8 <__udivmoddi4+0x134>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_InitTick+0x3c>)
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_InitTick+0x40>)
{
 8000d9a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	7818      	ldrb	r0, [r3, #0]
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000da6:	6810      	ldr	r0, [r2, #0]
 8000da8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dac:	f000 f894 	bl	8000ed8 <HAL_SYSTICK_Config>
 8000db0:	4604      	mov	r4, r0
 8000db2:	b958      	cbnz	r0, 8000dcc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	2d0f      	cmp	r5, #15
 8000db6:	d809      	bhi.n	8000dcc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	4602      	mov	r2, r0
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f84a 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_InitTick+0x44>)
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	601d      	str	r5, [r3, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_Init>:
{
 8000ddc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x30>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f81b 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ffc8 	bl	8000d94 <HAL_InitTick>
  HAL_MspInit();
 8000e04:	f001 fc30 	bl	8002668 <HAL_MspInit>
}
 8000e08:	2000      	movs	r0, #0
 8000e0a:	bd08      	pop	{r3, pc}
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_IncTick+0x10>)
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_IncTick+0x14>)
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	440b      	add	r3, r1
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	20000000 	.word	0x20000000

08000e28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <HAL_GetTick+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200000a0 	.word	0x200000a0

08000e34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e44:	0200      	lsls	r0, r0, #8
 8000e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e50:	60d3      	str	r3, [r2, #12]
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b530      	push	{r4, r5, lr}
 8000e5c:	68dc      	ldr	r4, [r3, #12]
 8000e5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	bf28      	it	cs
 8000e6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 0501 	mov.w	r5, #1
 8000e74:	fa05 f303 	lsl.w	r3, r5, r3
 8000e78:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7c:	bf8c      	ite	hi
 8000e7e:	3c03      	subhi	r4, #3
 8000e80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e82:	4019      	ands	r1, r3
 8000e84:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e86:	fa05 f404 	lsl.w	r4, r5, r4
 8000e8a:	3c01      	subs	r4, #1
 8000e8c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	ea42 0201 	orr.w	r2, r2, r1
 8000e94:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	bfaf      	iteee	ge
 8000e9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	f000 000f 	andlt.w	r0, r0, #15
 8000ea2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ebc <HAL_NVIC_SetPriority+0x64>)
 8000ea4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	bfa5      	ittet	ge
 8000ea8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000eac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000eb4:	bd30      	pop	{r4, r5, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	e000ed14 	.word	0xe000ed14

08000ec0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec0:	0942      	lsrs	r2, r0, #5
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f000 001f 	and.w	r0, r0, #31
 8000ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	3801      	subs	r0, #1
 8000eda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ede:	d20a      	bcs.n	8000ef6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	21f0      	movs	r1, #240	; 0xf0
 8000ee8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f06:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f08:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f0a:	bf0c      	ite	eq
 8000f0c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f10:	f022 0204 	bicne.w	r2, r2, #4
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4770      	bx	lr
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f1c:	4770      	bx	lr

08000f1e <HAL_SYSTICK_IRQHandler>:
{
 8000f1e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f20:	f7ff fffc 	bl	8000f1c <HAL_SYSTICK_Callback>
 8000f24:	bd08      	pop	{r3, pc}

08000f26 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f26:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d003      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
 8000f34:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000f46:	2000      	movs	r0, #0
}
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f50:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800111c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4a6e      	ldr	r2, [pc, #440]	; (8001114 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001120 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f60:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000f62:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f68:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000f70:	45b6      	cmp	lr, r6
 8000f72:	f040 80b6 	bne.w	80010e2 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f76:	684c      	ldr	r4, [r1, #4]
 8000f78:	f024 0710 	bic.w	r7, r4, #16
 8000f7c:	2f02      	cmp	r7, #2
 8000f7e:	d116      	bne.n	8000fae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f84:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f88:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f90:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f94:	f04f 0c0f 	mov.w	ip, #15
 8000f98:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f9c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa0:	690d      	ldr	r5, [r1, #16]
 8000fa2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fa6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	f8ca 5020 	str.w	r5, [sl, #32]
 8000fae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fb4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000fbc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbe:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000fd2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd6:	d811      	bhi.n	8000ffc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000fd8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fda:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	68cf      	ldr	r7, [r1, #12]
 8000fe0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000fe4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000fe8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ff4:	409f      	lsls	r7, r3
 8000ff6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ffa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ffc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	688f      	ldr	r7, [r1, #8]
 8001002:	fa07 f70a 	lsl.w	r7, r7, sl
 8001006:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001008:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100a:	00e5      	lsls	r5, r4, #3
 800100c:	d569      	bpl.n	80010e2 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	f04f 0b00 	mov.w	fp, #0
 8001012:	f8cd b00c 	str.w	fp, [sp, #12]
 8001016:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	4d3f      	ldr	r5, [pc, #252]	; (8001118 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001020:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001024:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001028:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800102c:	9703      	str	r7, [sp, #12]
 800102e:	9f03      	ldr	r7, [sp, #12]
 8001030:	f023 0703 	bic.w	r7, r3, #3
 8001034:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001038:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001040:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001048:	f04f 0e0f 	mov.w	lr, #15
 800104c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001050:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001052:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	d04b      	beq.n	80010f0 <HAL_GPIO_Init+0x1a4>
 8001058:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800105c:	42a8      	cmp	r0, r5
 800105e:	d049      	beq.n	80010f4 <HAL_GPIO_Init+0x1a8>
 8001060:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001064:	42a8      	cmp	r0, r5
 8001066:	d047      	beq.n	80010f8 <HAL_GPIO_Init+0x1ac>
 8001068:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800106c:	42a8      	cmp	r0, r5
 800106e:	d045      	beq.n	80010fc <HAL_GPIO_Init+0x1b0>
 8001070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001074:	42a8      	cmp	r0, r5
 8001076:	d043      	beq.n	8001100 <HAL_GPIO_Init+0x1b4>
 8001078:	4548      	cmp	r0, r9
 800107a:	d043      	beq.n	8001104 <HAL_GPIO_Init+0x1b8>
 800107c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001080:	42a8      	cmp	r0, r5
 8001082:	d041      	beq.n	8001108 <HAL_GPIO_Init+0x1bc>
 8001084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001088:	42a8      	cmp	r0, r5
 800108a:	d03f      	beq.n	800110c <HAL_GPIO_Init+0x1c0>
 800108c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001090:	42a8      	cmp	r0, r5
 8001092:	d03d      	beq.n	8001110 <HAL_GPIO_Init+0x1c4>
 8001094:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001098:	42a8      	cmp	r0, r5
 800109a:	bf14      	ite	ne
 800109c:	250a      	movne	r5, #10
 800109e:	2509      	moveq	r5, #9
 80010a0:	fa05 f50c 	lsl.w	r5, r5, ip
 80010a4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80010aa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80010b2:	bf0c      	ite	eq
 80010b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010b6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80010b8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80010ba:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80010c0:	bf0c      	ite	eq
 80010c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010c4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80010c6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80010ce:	bf0c      	ite	eq
 80010d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010d2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80010d4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80010d6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80010da:	bf54      	ite	pl
 80010dc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010de:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010e0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	3301      	adds	r3, #1
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	f47f af3c 	bne.w	8000f62 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80010ea:	b005      	add	sp, #20
 80010ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f0:	465d      	mov	r5, fp
 80010f2:	e7d5      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 80010f4:	2501      	movs	r5, #1
 80010f6:	e7d3      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 80010f8:	2502      	movs	r5, #2
 80010fa:	e7d1      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 80010fc:	2503      	movs	r5, #3
 80010fe:	e7cf      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 8001100:	2504      	movs	r5, #4
 8001102:	e7cd      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 8001104:	2505      	movs	r5, #5
 8001106:	e7cb      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 8001108:	2506      	movs	r5, #6
 800110a:	e7c9      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 800110c:	2507      	movs	r5, #7
 800110e:	e7c7      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 8001110:	2508      	movs	r5, #8
 8001112:	e7c5      	b.n	80010a0 <HAL_GPIO_Init+0x154>
 8001114:	40013c00 	.word	0x40013c00
 8001118:	40020000 	.word	0x40020000
 800111c:	40023800 	.word	0x40023800
 8001120:	40021400 	.word	0x40021400

08001124 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001124:	6903      	ldr	r3, [r0, #16]
 8001126:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001128:	bf14      	ite	ne
 800112a:	2001      	movne	r0, #1
 800112c:	2000      	moveq	r0, #0
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	b10a      	cbz	r2, 8001136 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	6181      	str	r1, [r0, #24]
 8001134:	4770      	bx	lr
 8001136:	0409      	lsls	r1, r1, #16
 8001138:	e7fb      	b.n	8001132 <HAL_GPIO_WritePin+0x2>
	...

0800113c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800113c:	4910      	ldr	r1, [pc, #64]	; (8001180 <HAL_RCC_GetSysClockFreq+0x44>)
{
 800113e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001140:	688b      	ldr	r3, [r1, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b08      	cmp	r3, #8
 8001148:	d118      	bne.n	800117c <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800114a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114e:	6849      	ldr	r1, [r1, #4]
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001152:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001156:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800115a:	bf18      	it	ne
 800115c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800115e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001162:	fba1 0100 	umull	r0, r1, r1, r0
 8001166:	f7ff fc8d 	bl	8000a84 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_RCC_GetSysClockFreq+0x44>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001172:	3301      	adds	r3, #1
 8001174:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001176:	fbb0 f0f3 	udiv	r0, r0, r3
 800117a:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800117c:	4801      	ldr	r0, [pc, #4]	; (8001184 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800117e:	bd08      	pop	{r3, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	00f42400 	.word	0x00f42400

08001188 <HAL_RCC_ClockConfig>:
{
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800118e:	4604      	mov	r4, r0
 8001190:	b910      	cbnz	r0, 8001198 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001192:	2001      	movs	r0, #1
 8001194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_RCC_ClockConfig+0x124>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f002 020f 	and.w	r2, r2, #15
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d328      	bcc.n	80011f6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	078f      	lsls	r7, r1, #30
 80011a8:	d42d      	bmi.n	8001206 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	07c8      	lsls	r0, r1, #31
 80011ac:	d440      	bmi.n	8001230 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <HAL_RCC_ClockConfig+0x124>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f002 020f 	and.w	r2, r2, #15
 80011b6:	4295      	cmp	r5, r2
 80011b8:	d366      	bcc.n	8001288 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	0751      	lsls	r1, r2, #29
 80011be:	d46c      	bmi.n	800129a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	0713      	lsls	r3, r2, #28
 80011c2:	d507      	bpl.n	80011d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c4:	4a3a      	ldr	r2, [pc, #232]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
 80011c6:	6921      	ldr	r1, [r4, #16]
 80011c8:	6893      	ldr	r3, [r2, #8]
 80011ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d4:	f7ff ffb2 	bl	800113c <HAL_RCC_GetSysClockFreq>
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
 80011da:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <HAL_RCC_ClockConfig+0x12c>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	40d8      	lsrs	r0, r3
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <HAL_RCC_ClockConfig+0x130>)
 80011e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fdd2 	bl	8000d94 <HAL_InitTick>
  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
 80011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	4299      	cmp	r1, r3
 8001202:	d1c6      	bne.n	8001192 <HAL_RCC_ClockConfig+0xa>
 8001204:	e7ce      	b.n	80011a4 <HAL_RCC_ClockConfig+0x1c>
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800120c:	bf1e      	ittt	ne
 800120e:	689a      	ldrne	r2, [r3, #8]
 8001210:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001214:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001216:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001218:	bf42      	ittt	mi
 800121a:	689a      	ldrmi	r2, [r3, #8]
 800121c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001220:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	68a0      	ldr	r0, [r4, #8]
 8001226:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800122a:	4302      	orrs	r2, r0
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	e7bc      	b.n	80011aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001230:	6862      	ldr	r2, [r4, #4]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
 8001234:	2a01      	cmp	r2, #1
 8001236:	d11d      	bne.n	8001274 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	d0a8      	beq.n	8001192 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001240:	4e1b      	ldr	r6, [pc, #108]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
 8001242:	68b3      	ldr	r3, [r6, #8]
 8001244:	f023 0303 	bic.w	r3, r3, #3
 8001248:	4313      	orrs	r3, r2
 800124a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800124c:	f7ff fdec 	bl	8000e28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001254:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	68b3      	ldr	r3, [r6, #8]
 8001258:	6862      	ldr	r2, [r4, #4]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001262:	d0a4      	beq.n	80011ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001264:	f7ff fde0 	bl	8000e28 <HAL_GetTick>
 8001268:	1bc0      	subs	r0, r0, r7
 800126a:	4540      	cmp	r0, r8
 800126c:	d9f3      	bls.n	8001256 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800126e:	2003      	movs	r0, #3
}
 8001270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001274:	1e91      	subs	r1, r2, #2
 8001276:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001278:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	d802      	bhi.n	8001282 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001280:	e7dd      	b.n	800123e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	f013 0f02 	tst.w	r3, #2
 8001286:	e7da      	b.n	800123e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001288:	b2ea      	uxtb	r2, r5
 800128a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	429d      	cmp	r5, r3
 8001294:	f47f af7d 	bne.w	8001192 <HAL_RCC_ClockConfig+0xa>
 8001298:	e78f      	b.n	80011ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129a:	4905      	ldr	r1, [pc, #20]	; (80012b0 <HAL_RCC_ClockConfig+0x128>)
 800129c:	68e0      	ldr	r0, [r4, #12]
 800129e:	688b      	ldr	r3, [r1, #8]
 80012a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012a4:	4303      	orrs	r3, r0
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e78a      	b.n	80011c0 <HAL_RCC_ClockConfig+0x38>
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	080031e0 	.word	0x080031e0
 80012b8:	2000000c 	.word	0x2000000c

080012bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012bc:	4b01      	ldr	r3, [pc, #4]	; (80012c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012d6:	6810      	ldr	r0, [r2, #0]
}
 80012d8:	40d8      	lsrs	r0, r3
 80012da:	4770      	bx	lr
 80012dc:	40023800 	.word	0x40023800
 80012e0:	080031f0 	.word	0x080031f0
 80012e4:	2000000c 	.word	0x2000000c

080012e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012f6:	6810      	ldr	r0, [r2, #0]
}
 80012f8:	40d8      	lsrs	r0, r3
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800
 8001300:	080031f0 	.word	0x080031f0
 8001304:	2000000c 	.word	0x2000000c

08001308 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001308:	6803      	ldr	r3, [r0, #0]
{
 800130a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	07dd      	lsls	r5, r3, #31
{
 8001310:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	d410      	bmi.n	8001336 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	0798      	lsls	r0, r3, #30
 8001318:	d45b      	bmi.n	80013d2 <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	071a      	lsls	r2, r3, #28
 800131e:	f100 809d 	bmi.w	800145c <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	075b      	lsls	r3, r3, #29
 8001326:	f100 80bb 	bmi.w	80014a0 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	69a2      	ldr	r2, [r4, #24]
 800132c:	2a00      	cmp	r2, #0
 800132e:	f040 811c 	bne.w	800156a <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001332:	2000      	movs	r0, #0
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001336:	4ba7      	ldr	r3, [pc, #668]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	f002 020c 	and.w	r2, r2, #12
 800133e:	2a04      	cmp	r2, #4
 8001340:	d007      	beq.n	8001352 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001348:	2a08      	cmp	r2, #8
 800134a:	d10d      	bne.n	8001368 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0259      	lsls	r1, r3, #9
 8001350:	d50a      	bpl.n	8001368 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	039a      	lsls	r2, r3, #14
 8001358:	d5dc      	bpl.n	8001314 <HAL_RCC_OscConfig+0xc>
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1d9      	bne.n	8001314 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
}
 8001362:	b002      	add	sp, #8
 8001364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	4d9a      	ldr	r5, [pc, #616]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d111      	bne.n	8001396 <HAL_RCC_OscConfig+0x8e>
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800137a:	f7ff fd55 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4d95      	ldr	r5, [pc, #596]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001380:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	039b      	lsls	r3, r3, #14
 8001386:	d4c5      	bmi.n	8001314 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fd4e 	bl	8000e28 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	2864      	cmp	r0, #100	; 0x64
 8001390:	d9f7      	bls.n	8001382 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	e7e5      	b.n	8001362 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139a:	d104      	bne.n	80013a6 <HAL_RCC_OscConfig+0x9e>
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	e7e5      	b.n	8001372 <HAL_RCC_OscConfig+0x6a>
 80013a6:	682a      	ldr	r2, [r5, #0]
 80013a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013ac:	602a      	str	r2, [r5, #0]
 80013ae:	682a      	ldr	r2, [r5, #0]
 80013b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013b4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1df      	bne.n	800137a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80013ba:	f7ff fd35 	bl	8000e28 <HAL_GetTick>
 80013be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	039f      	lsls	r7, r3, #14
 80013c4:	d5a6      	bpl.n	8001314 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fd2f 	bl	8000e28 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2864      	cmp	r0, #100	; 0x64
 80013ce:	d9f7      	bls.n	80013c0 <HAL_RCC_OscConfig+0xb8>
 80013d0:	e7df      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	f012 0f0c 	tst.w	r2, #12
 80013da:	d007      	beq.n	80013ec <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013e2:	2a08      	cmp	r2, #8
 80013e4:	d111      	bne.n	800140a <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	025e      	lsls	r6, r3, #9
 80013ea:	d40e      	bmi.n	800140a <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	0795      	lsls	r5, r2, #30
 80013f2:	d502      	bpl.n	80013fa <HAL_RCC_OscConfig+0xf2>
 80013f4:	68e2      	ldr	r2, [r4, #12]
 80013f6:	2a01      	cmp	r2, #1
 80013f8:	d1b2      	bne.n	8001360 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	6921      	ldr	r1, [r4, #16]
 80013fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001402:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001406:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001408:	e787      	b.n	800131a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140a:	68e2      	ldr	r2, [r4, #12]
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x2d0>)
 800140e:	b1b2      	cbz	r2, 800143e <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001414:	f7ff fd08 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4d6e      	ldr	r5, [pc, #440]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800141a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	0798      	lsls	r0, r3, #30
 8001420:	d507      	bpl.n	8001432 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	6922      	ldr	r2, [r4, #16]
 8001426:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800142a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800142e:	602b      	str	r3, [r5, #0]
 8001430:	e773      	b.n	800131a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fcf9 	bl	8000e28 <HAL_GetTick>
 8001436:	1b80      	subs	r0, r0, r6
 8001438:	2802      	cmp	r0, #2
 800143a:	d9ef      	bls.n	800141c <HAL_RCC_OscConfig+0x114>
 800143c:	e7a9      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800143e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001440:	f7ff fcf2 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001444:	4d63      	ldr	r5, [pc, #396]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001446:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	0799      	lsls	r1, r3, #30
 800144c:	f57f af65 	bpl.w	800131a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fcea 	bl	8000e28 <HAL_GetTick>
 8001454:	1b80      	subs	r0, r0, r6
 8001456:	2802      	cmp	r0, #2
 8001458:	d9f6      	bls.n	8001448 <HAL_RCC_OscConfig+0x140>
 800145a:	e79a      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145c:	6962      	ldr	r2, [r4, #20]
 800145e:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x2d4>)
 8001460:	b17a      	cbz	r2, 8001482 <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001466:	f7ff fcdf 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4d5a      	ldr	r5, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800146c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001470:	079f      	lsls	r7, r3, #30
 8001472:	f53f af56 	bmi.w	8001322 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fcd7 	bl	8000e28 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f6      	bls.n	800146e <HAL_RCC_OscConfig+0x166>
 8001480:	e787      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001482:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001484:	f7ff fcd0 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4d52      	ldr	r5, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800148a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800148e:	0798      	lsls	r0, r3, #30
 8001490:	f57f af47 	bpl.w	8001322 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fcc8 	bl	8000e28 <HAL_GetTick>
 8001498:	1b80      	subs	r0, r0, r6
 800149a:	2802      	cmp	r0, #2
 800149c:	d9f6      	bls.n	800148c <HAL_RCC_OscConfig+0x184>
 800149e:	e778      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 80014a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80014a8:	d128      	bne.n	80014fc <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4d47      	ldr	r5, [pc, #284]	; (80015e0 <HAL_RCC_OscConfig+0x2d8>)
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	05d9      	lsls	r1, r3, #23
 80014c6:	d51b      	bpl.n	8001500 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	68a3      	ldr	r3, [r4, #8]
 80014ca:	4d42      	ldr	r5, [pc, #264]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d127      	bne.n	8001520 <HAL_RCC_OscConfig+0x218>
 80014d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014d8:	f7ff fca6 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	4d3d      	ldr	r5, [pc, #244]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80014de:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e6:	079b      	lsls	r3, r3, #30
 80014e8:	d539      	bpl.n	800155e <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	f43f af1d 	beq.w	800132a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f0:	4a38      	ldr	r2, [pc, #224]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 80014f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	e716      	b.n	800132a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2600      	movs	r6, #0
 80014fe:	e7df      	b.n	80014c0 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001508:	f7ff fc8e 	bl	8000e28 <HAL_GetTick>
 800150c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	05da      	lsls	r2, r3, #23
 8001512:	d4d9      	bmi.n	80014c8 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff fc88 	bl	8000e28 <HAL_GetTick>
 8001518:	1bc0      	subs	r0, r0, r7
 800151a:	2802      	cmp	r0, #2
 800151c:	d9f7      	bls.n	800150e <HAL_RCC_OscConfig+0x206>
 800151e:	e738      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	2b05      	cmp	r3, #5
 8001522:	d104      	bne.n	800152e <HAL_RCC_OscConfig+0x226>
 8001524:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	672b      	str	r3, [r5, #112]	; 0x70
 800152c:	e7d0      	b.n	80014d0 <HAL_RCC_OscConfig+0x1c8>
 800152e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	672a      	str	r2, [r5, #112]	; 0x70
 8001536:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001538:	f022 0204 	bic.w	r2, r2, #4
 800153c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ca      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8001542:	f7ff fc71 	bl	8000e28 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800154a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800154e:	0798      	lsls	r0, r3, #30
 8001550:	d5cb      	bpl.n	80014ea <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fc69 	bl	8000e28 <HAL_GetTick>
 8001556:	1bc0      	subs	r0, r0, r7
 8001558:	4540      	cmp	r0, r8
 800155a:	d9f7      	bls.n	800154c <HAL_RCC_OscConfig+0x244>
 800155c:	e719      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fc63 	bl	8000e28 <HAL_GetTick>
 8001562:	1bc0      	subs	r0, r0, r7
 8001564:	4540      	cmp	r0, r8
 8001566:	d9bd      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1dc>
 8001568:	e713      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156a:	4d1a      	ldr	r5, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
 800156c:	68ab      	ldr	r3, [r5, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	f43f aef4 	beq.w	8001360 <HAL_RCC_OscConfig+0x58>
 8001578:	4e1a      	ldr	r6, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x2dc>)
 800157a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800157e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	d138      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8001582:	f7ff fc51 	bl	8000e28 <HAL_GetTick>
 8001586:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	0199      	lsls	r1, r3, #6
 800158c:	d42c      	bmi.n	80015e8 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158e:	6a22      	ldr	r2, [r4, #32]
 8001590:	69e3      	ldr	r3, [r4, #28]
 8001592:	4313      	orrs	r3, r2
 8001594:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001596:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800159a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800159c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015aa:	0852      	lsrs	r2, r2, #1
 80015ac:	3a01      	subs	r2, #1
 80015ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015b2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015b4:	2301      	movs	r3, #1
 80015b6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc36 	bl	8000e28 <HAL_GetTick>
 80015bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	019a      	lsls	r2, r3, #6
 80015c2:	f53f aeb6 	bmi.w	8001332 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fc2f 	bl	8000e28 <HAL_GetTick>
 80015ca:	1b40      	subs	r0, r0, r5
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9f6      	bls.n	80015be <HAL_RCC_OscConfig+0x2b6>
 80015d0:	e6df      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	42470000 	.word	0x42470000
 80015dc:	42470e80 	.word	0x42470e80
 80015e0:	40007000 	.word	0x40007000
 80015e4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fc1e 	bl	8000e28 <HAL_GetTick>
 80015ec:	1bc0      	subs	r0, r0, r7
 80015ee:	2802      	cmp	r0, #2
 80015f0:	d9ca      	bls.n	8001588 <HAL_RCC_OscConfig+0x280>
 80015f2:	e6ce      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc18 	bl	8000e28 <HAL_GetTick>
 80015f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	f57f ae98 	bpl.w	8001332 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fc11 	bl	8000e28 <HAL_GetTick>
 8001606:	1b00      	subs	r0, r0, r4
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f6      	bls.n	80015fa <HAL_RCC_OscConfig+0x2f2>
 800160c:	e6c1      	b.n	8001392 <HAL_RCC_OscConfig+0x8a>
 800160e:	bf00      	nop

08001610 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	6803      	ldr	r3, [r0, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001622:	2000      	movs	r0, #0
 8001624:	4770      	bx	lr

08001626 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001626:	6803      	ldr	r3, [r0, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001630:	6a19      	ldr	r1, [r3, #32]
 8001632:	f241 1211 	movw	r2, #4369	; 0x1111
 8001636:	4211      	tst	r1, r2
 8001638:	d108      	bne.n	800164c <HAL_TIM_Base_Stop_IT+0x26>
 800163a:	6a19      	ldr	r1, [r3, #32]
 800163c:	f240 4244 	movw	r2, #1092	; 0x444
 8001640:	4211      	tst	r1, r2
 8001642:	bf02      	ittt	eq
 8001644:	681a      	ldreq	r2, [r3, #0]
 8001646:	f022 0201 	biceq.w	r2, r2, #1
 800164a:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 800164c:	2000      	movs	r0, #0
 800164e:	4770      	bx	lr

08001650 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001650:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001654:	2b01      	cmp	r3, #1
{
 8001656:	b570      	push	{r4, r5, r6, lr}
 8001658:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800165c:	d01c      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800165e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001662:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001664:	2201      	movs	r2, #1
 8001666:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800166a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800166c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001670:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001674:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001676:	680a      	ldr	r2, [r1, #0]
 8001678:	2a40      	cmp	r2, #64	; 0x40
 800167a:	d079      	beq.n	8001770 <HAL_TIM_ConfigClockSource+0x120>
 800167c:	d819      	bhi.n	80016b2 <HAL_TIM_ConfigClockSource+0x62>
 800167e:	2a10      	cmp	r2, #16
 8001680:	f000 8093 	beq.w	80017aa <HAL_TIM_ConfigClockSource+0x15a>
 8001684:	d80a      	bhi.n	800169c <HAL_TIM_ConfigClockSource+0x4c>
 8001686:	2a00      	cmp	r2, #0
 8001688:	f000 8089 	beq.w	800179e <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800168c:	2301      	movs	r3, #1
 800168e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001692:	2300      	movs	r3, #0
 8001694:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001698:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 800169a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800169c:	2a20      	cmp	r2, #32
 800169e:	f000 808a 	beq.w	80017b6 <HAL_TIM_ConfigClockSource+0x166>
 80016a2:	2a30      	cmp	r2, #48	; 0x30
 80016a4:	d1f2      	bne.n	800168c <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80016a6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80016a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016ac:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80016b0:	e036      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016b2:	2a70      	cmp	r2, #112	; 0x70
 80016b4:	d036      	beq.n	8001724 <HAL_TIM_ConfigClockSource+0xd4>
 80016b6:	d81b      	bhi.n	80016f0 <HAL_TIM_ConfigClockSource+0xa0>
 80016b8:	2a50      	cmp	r2, #80	; 0x50
 80016ba:	d042      	beq.n	8001742 <HAL_TIM_ConfigClockSource+0xf2>
 80016bc:	2a60      	cmp	r2, #96	; 0x60
 80016be:	d1e5      	bne.n	800168c <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016c0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80016c2:	684d      	ldr	r5, [r1, #4]
 80016c4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016c6:	f024 0410 	bic.w	r4, r4, #16
 80016ca:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016cc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80016ce:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016d0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016d8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016dc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80016e0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80016e2:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016ea:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80016ee:	e017      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016f4:	d011      	beq.n	800171a <HAL_TIM_ConfigClockSource+0xca>
 80016f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016fa:	d1c7      	bne.n	800168c <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016fc:	688a      	ldr	r2, [r1, #8]
 80016fe:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001700:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001702:	68c9      	ldr	r1, [r1, #12]
 8001704:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001706:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800170a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800170e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001710:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001718:	e002      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	e7b3      	b.n	800168c <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001724:	688a      	ldr	r2, [r1, #8]
 8001726:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001728:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800172a:	68c9      	ldr	r1, [r1, #12]
 800172c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800172e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001732:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001736:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001738:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800173a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800173c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001740:	e7ee      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001742:	684c      	ldr	r4, [r1, #4]
 8001744:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001746:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001748:	6a1d      	ldr	r5, [r3, #32]
 800174a:	f025 0501 	bic.w	r5, r5, #1
 800174e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001750:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001752:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001756:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800175a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800175e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001762:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001764:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800176a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800176e:	e7d7      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001770:	684c      	ldr	r4, [r1, #4]
 8001772:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001774:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001776:	6a1d      	ldr	r5, [r3, #32]
 8001778:	f025 0501 	bic.w	r5, r5, #1
 800177c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800177e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001780:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001784:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001788:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800178c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800178e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001790:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001792:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001798:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800179c:	e7c0      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800179e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017a4:	f042 0207 	orr.w	r2, r2, #7
 80017a8:	e7ba      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80017aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017b0:	f042 0217 	orr.w	r2, r2, #23
 80017b4:	e7b4      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80017b6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017bc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80017c0:	e7ae      	b.n	8001720 <HAL_TIM_ConfigClockSource+0xd0>

080017c2 <HAL_TIM_OC_DelayElapsedCallback>:
 80017c2:	4770      	bx	lr

080017c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_TriggerCallback>:
 80017c6:	4770      	bx	lr

080017c8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	0791      	lsls	r1, r2, #30
{
 80017ce:	b510      	push	{r4, lr}
 80017d0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d2:	d50e      	bpl.n	80017f2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	0792      	lsls	r2, r2, #30
 80017d8:	d50b      	bpl.n	80017f2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017da:	f06f 0202 	mvn.w	r2, #2
 80017de:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e8:	d077      	beq.n	80018da <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	f000 fd05 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ee:	2300      	movs	r3, #0
 80017f0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	0750      	lsls	r0, r2, #29
 80017f8:	d510      	bpl.n	800181c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	0751      	lsls	r1, r2, #29
 80017fe:	d50d      	bpl.n	800181c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001800:	f06f 0204 	mvn.w	r2, #4
 8001804:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001806:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001808:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800180a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001810:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001812:	d068      	beq.n	80018e6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001814:	f000 fcf0 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001818:	2300      	movs	r3, #0
 800181a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	0712      	lsls	r2, r2, #28
 8001822:	d50f      	bpl.n	8001844 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	0710      	lsls	r0, r2, #28
 8001828:	d50c      	bpl.n	8001844 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800182a:	f06f 0208 	mvn.w	r2, #8
 800182e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001830:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001832:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001834:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001836:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001838:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183a:	d05a      	beq.n	80018f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800183c:	f000 fcdc 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001840:	2300      	movs	r3, #0
 8001842:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	06d2      	lsls	r2, r2, #27
 800184a:	d510      	bpl.n	800186e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	06d0      	lsls	r0, r2, #27
 8001850:	d50d      	bpl.n	800186e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001852:	f06f 0210 	mvn.w	r2, #16
 8001856:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001858:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001860:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001862:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001864:	d04b      	beq.n	80018fe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001866:	f000 fcc7 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	2300      	movs	r3, #0
 800186c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	07d1      	lsls	r1, r2, #31
 8001874:	d508      	bpl.n	8001888 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	07d2      	lsls	r2, r2, #31
 800187a:	d505      	bpl.n	8001888 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800187c:	f06f 0201 	mvn.w	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001882:	4620      	mov	r0, r4
 8001884:	f000 fd50 	bl	8002328 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	0610      	lsls	r0, r2, #24
 800188e:	d508      	bpl.n	80018a2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	0611      	lsls	r1, r2, #24
 8001894:	d505      	bpl.n	80018a2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001896:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800189a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f9ea 	bl	8001c76 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	0652      	lsls	r2, r2, #25
 80018a8:	d508      	bpl.n	80018bc <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	0650      	lsls	r0, r2, #25
 80018ae:	d505      	bpl.n	80018bc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff ff85 	bl	80017c6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	0691      	lsls	r1, r2, #26
 80018c2:	d522      	bpl.n	800190a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	0692      	lsls	r2, r2, #26
 80018c8:	d51f      	bpl.n	800190a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018d6:	f000 b9cd 	b.w	8001c74 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	f7ff ff72 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ff70 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80018e4:	e783      	b.n	80017ee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e6:	f7ff ff6c 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff ff6a 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80018f0:	e792      	b.n	8001818 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	f7ff ff66 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff ff64 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80018fc:	e7a0      	b.n	8001840 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fe:	f7ff ff60 	bl	80017c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff ff5e 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001908:	e7af      	b.n	800186a <HAL_TIM_IRQHandler+0xa2>
 800190a:	bd10      	pop	{r4, pc}

0800190c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800190c:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800190e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001910:	4290      	cmp	r0, r2
 8001912:	d012      	beq.n	800193a <TIM_Base_SetConfig+0x2e>
 8001914:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001918:	d00f      	beq.n	800193a <TIM_Base_SetConfig+0x2e>
 800191a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800191e:	4290      	cmp	r0, r2
 8001920:	d00b      	beq.n	800193a <TIM_Base_SetConfig+0x2e>
 8001922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001926:	4290      	cmp	r0, r2
 8001928:	d007      	beq.n	800193a <TIM_Base_SetConfig+0x2e>
 800192a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192e:	4290      	cmp	r0, r2
 8001930:	d003      	beq.n	800193a <TIM_Base_SetConfig+0x2e>
 8001932:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001936:	4290      	cmp	r0, r2
 8001938:	d11d      	bne.n	8001976 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800193a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800193c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001940:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <TIM_Base_SetConfig+0xbc>)
 8001944:	4290      	cmp	r0, r2
 8001946:	d104      	bne.n	8001952 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001948:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800194a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800194e:	4313      	orrs	r3, r2
 8001950:	e028      	b.n	80019a4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001952:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001956:	d0f7      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <TIM_Base_SetConfig+0xc0>)
 800195a:	4290      	cmp	r0, r2
 800195c:	d0f4      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 800195e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001962:	4290      	cmp	r0, r2
 8001964:	d0f0      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 8001966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196a:	4290      	cmp	r0, r2
 800196c:	d0ec      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 800196e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001972:	4290      	cmp	r0, r2
 8001974:	d0e8      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <TIM_Base_SetConfig+0xc4>)
 8001978:	4290      	cmp	r0, r2
 800197a:	d0e5      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 800197c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001980:	4290      	cmp	r0, r2
 8001982:	d0e1      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 8001984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001988:	4290      	cmp	r0, r2
 800198a:	d0dd      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 800198c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001990:	4290      	cmp	r0, r2
 8001992:	d0d9      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 8001994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001998:	4290      	cmp	r0, r2
 800199a:	d0d5      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
 800199c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a0:	4290      	cmp	r0, r2
 80019a2:	d0d1      	beq.n	8001948 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80019a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a6:	688b      	ldr	r3, [r1, #8]
 80019a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80019aa:	680b      	ldr	r3, [r1, #0]
 80019ac:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <TIM_Base_SetConfig+0xbc>)
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d006      	beq.n	80019c2 <TIM_Base_SetConfig+0xb6>
 80019b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d002      	beq.n	80019c2 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80019bc:	2301      	movs	r3, #1
 80019be:	6143      	str	r3, [r0, #20]
}
 80019c0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80019c2:	690b      	ldr	r3, [r1, #16]
 80019c4:	6303      	str	r3, [r0, #48]	; 0x30
 80019c6:	e7f9      	b.n	80019bc <TIM_Base_SetConfig+0xb0>
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40014000 	.word	0x40014000

080019d4 <HAL_TIM_Base_Init>:
{ 
 80019d4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019d6:	4604      	mov	r4, r0
 80019d8:	b1a0      	cbz	r0, 8001a04 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e2:	b91b      	cbnz	r3, 80019ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80019e8:	f000 fe6e 	bl	80026c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019ec:	2302      	movs	r3, #2
 80019ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	1d21      	adds	r1, r4, #4
 80019f6:	f7ff ff89 	bl	800190c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
 8001a02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
}
 8001a06:	bd10      	pop	{r4, pc}

08001a08 <HAL_TIM_IC_Init>:
{
 8001a08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	b1a0      	cbz	r0, 8001a38 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a16:	b91b      	cbnz	r3, 8001a20 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8001a1c:	f000 fe98 	bl	8002750 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001a20:	2302      	movs	r3, #2
 8001a22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a26:	6820      	ldr	r0, [r4, #0]
 8001a28:	1d21      	adds	r1, r4, #4
 8001a2a:	f7ff ff6f 	bl	800190c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001a34:	2000      	movs	r0, #0
 8001a36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
}
 8001a3a:	bd10      	pop	{r4, pc}

08001a3c <TIM_TI1_SetConfig>:
{
 8001a3c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a3e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a40:	4e1a      	ldr	r6, [pc, #104]	; (8001aac <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a42:	f024 0401 	bic.w	r4, r4, #1
 8001a46:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a48:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001a4a:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a4c:	42b0      	cmp	r0, r6
 8001a4e:	f024 0403 	bic.w	r4, r4, #3
 8001a52:	d01a      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a58:	d017      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a5a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001a5e:	42b0      	cmp	r0, r6
 8001a60:	d013      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a66:	42b0      	cmp	r0, r6
 8001a68:	d00f      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a6e:	42b0      	cmp	r0, r6
 8001a70:	d00b      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a72:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001a76:	42b0      	cmp	r0, r6
 8001a78:	d007      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a7a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001a7e:	42b0      	cmp	r0, r6
 8001a80:	d003      	beq.n	8001a8a <TIM_TI1_SetConfig+0x4e>
 8001a82:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001a86:	42b0      	cmp	r0, r6
 8001a88:	d10d      	bne.n	8001aa6 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8001a8a:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a8c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a92:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a94:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a98:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a9c:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a9e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001aa0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001aa2:	6201      	str	r1, [r0, #32]
}
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001aa6:	f044 0201 	orr.w	r2, r4, #1
 8001aaa:	e7ef      	b.n	8001a8c <TIM_TI1_SetConfig+0x50>
 8001aac:	40010000 	.word	0x40010000

08001ab0 <HAL_TIM_IC_ConfigChannel>:
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001ab2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ab6:	2b01      	cmp	r3, #1
{
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ac0:	d019      	beq.n	8001af6 <HAL_TIM_IC_ConfigChannel+0x46>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001acc:	b9a2      	cbnz	r2, 8001af8 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001ace:	68cb      	ldr	r3, [r1, #12]
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	c906      	ldmia	r1, {r1, r2}
 8001ad4:	f7ff ffb2 	bl	8001a3c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ad8:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ada:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	f022 020c 	bic.w	r2, r2, #12
 8001ae2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001aea:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001aec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001af2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001af8:	2a04      	cmp	r2, #4
 8001afa:	688e      	ldr	r6, [r1, #8]
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	68e8      	ldr	r0, [r5, #12]
 8001b00:	c982      	ldmia	r1, {r1, r7}
 8001b02:	d11f      	bne.n	8001b44 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	f022 0210 	bic.w	r2, r2, #16
 8001b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b0c:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001b0e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001b10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001b14:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b18:	0300      	lsls	r0, r0, #12
 8001b1a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b1c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b20:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b22:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b24:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b28:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b2c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b30:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b38:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001b40:	619e      	str	r6, [r3, #24]
 8001b42:	e7d2      	b.n	8001aea <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001b44:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b46:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001b48:	d11c      	bne.n	8001b84 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001b50:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001b52:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001b54:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001b58:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b5a:	0100      	lsls	r0, r0, #4
 8001b5c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001b5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b62:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b64:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b66:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001b6a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b6e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001b70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001b72:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	f022 020c 	bic.w	r2, r2, #12
 8001b7a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b80:	61de      	str	r6, [r3, #28]
 8001b82:	e7b2      	b.n	8001aea <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001b8a:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001b8c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001b8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001b92:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b96:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001b98:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b9c:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b9e:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ba0:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ba2:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001ba6:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001baa:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001bac:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001bae:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001bb6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001bbe:	e7df      	b.n	8001b80 <HAL_TIM_IC_ConfigChannel+0xd0>

08001bc0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001bc0:	6a03      	ldr	r3, [r0, #32]
{
 8001bc2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001bc4:	2401      	movs	r4, #1
 8001bc6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001bc8:	ea23 0304 	bic.w	r3, r3, r4
 8001bcc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001bce:	6a03      	ldr	r3, [r0, #32]
 8001bd0:	408a      	lsls	r2, r1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	6202      	str	r2, [r0, #32]
 8001bd6:	bd10      	pop	{r4, pc}

08001bd8 <HAL_TIM_IC_Start_IT>:
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
  switch (Channel)
 8001bdc:	290c      	cmp	r1, #12
 8001bde:	d80d      	bhi.n	8001bfc <HAL_TIM_IC_Start_IT+0x24>
 8001be0:	e8df f001 	tbb	[pc, r1]
 8001be4:	0c0c0c07 	.word	0x0c0c0c07
 8001be8:	0c0c0c17 	.word	0x0c0c0c17
 8001bec:	0c0c0c1c 	.word	0x0c0c0c1c
 8001bf0:	21          	.byte	0x21
 8001bf1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bf2:	6802      	ldr	r2, [r0, #0]
 8001bf4:	68d3      	ldr	r3, [r2, #12]
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bfa:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bfc:	6820      	ldr	r0, [r4, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f7ff ffde 	bl	8001bc0 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6013      	str	r3, [r2, #0]
} 
 8001c0e:	2000      	movs	r0, #0
 8001c10:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	68d3      	ldr	r3, [r2, #12]
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	e7ee      	b.n	8001bfa <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c1c:	6802      	ldr	r2, [r0, #0]
 8001c1e:	68d3      	ldr	r3, [r2, #12]
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	e7e9      	b.n	8001bfa <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c26:	6802      	ldr	r2, [r0, #0]
 8001c28:	68d3      	ldr	r3, [r2, #12]
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	e7e4      	b.n	8001bfa <HAL_TIM_IC_Start_IT+0x22>

08001c30 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001c30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c34:	2b01      	cmp	r3, #1
{
 8001c36:	b510      	push	{r4, lr}
 8001c38:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001c3c:	d018      	beq.n	8001c70 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c42:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c44:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c46:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c48:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c4e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4322      	orrs	r2, r4
 8001c54:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001c70:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001c72:	bd10      	pop	{r4, pc}

08001c74 <HAL_TIMEx_CommutationCallback>:
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	4770      	bx	lr

08001c78 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c78:	6803      	ldr	r3, [r0, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001c90:	4770      	bx	lr
	...

08001c94 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c98:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c9a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001c9c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c9e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ca4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001ca6:	6133      	str	r3, [r6, #16]
{
 8001ca8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001caa:	6883      	ldr	r3, [r0, #8]
 8001cac:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001cae:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001cb4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cb8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001cba:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001cc2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001cc4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001cc6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001ccc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001cd2:	6173      	str	r3, [r6, #20]
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd6:	d17c      	bne.n	8001dd2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	d003      	beq.n	8001ce4 <UART_SetConfig+0x50>
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce0:	429e      	cmp	r6, r3
 8001ce2:	d144      	bne.n	8001d6e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ce4:	f7ff fb00 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	2519      	movs	r5, #25
 8001cea:	fb05 f300 	mul.w	r3, r5, r0
 8001cee:	6860      	ldr	r0, [r4, #4]
 8001cf0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cf4:	0040      	lsls	r0, r0, #1
 8001cf6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cfa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d02:	f7ff faf1 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	4368      	muls	r0, r5
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d10:	f7ff faea 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	4368      	muls	r0, r5
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d22:	fb09 7313 	mls	r3, r9, r3, r7
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	3332      	adds	r3, #50	; 0x32
 8001d2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001d34:	f7ff fad8 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001d38:	6862      	ldr	r2, [r4, #4]
 8001d3a:	4368      	muls	r0, r5
 8001d3c:	0052      	lsls	r2, r2, #1
 8001d3e:	fbb0 faf2 	udiv	sl, r0, r2
 8001d42:	f7ff fad1 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d46:	6863      	ldr	r3, [r4, #4]
 8001d48:	4368      	muls	r0, r5
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d50:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d54:	fb09 a313 	mls	r3, r9, r3, sl
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	3332      	adds	r3, #50	; 0x32
 8001d5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d66:	443b      	add	r3, r7
 8001d68:	60b3      	str	r3, [r6, #8]
 8001d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d6e:	f7ff faab 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001d72:	2519      	movs	r5, #25
 8001d74:	fb05 f300 	mul.w	r3, r5, r0
 8001d78:	6860      	ldr	r0, [r4, #4]
 8001d7a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d7e:	0040      	lsls	r0, r0, #1
 8001d80:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d8c:	f7ff fa9c 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	4368      	muls	r0, r5
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d9a:	f7ff fa95 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	4368      	muls	r0, r5
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dac:	fb09 7313 	mls	r3, r9, r3, r7
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	3332      	adds	r3, #50	; 0x32
 8001db4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001dbe:	f7ff fa83 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	4368      	muls	r0, r5
 8001dc6:	0052      	lsls	r2, r2, #1
 8001dc8:	fbb0 faf2 	udiv	sl, r0, r2
 8001dcc:	f7ff fa7c 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001dd0:	e7b9      	b.n	8001d46 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd2:	429e      	cmp	r6, r3
 8001dd4:	d002      	beq.n	8001ddc <UART_SetConfig+0x148>
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <UART_SetConfig+0x230>)
 8001dd8:	429e      	cmp	r6, r3
 8001dda:	d140      	bne.n	8001e5e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ddc:	f7ff fa84 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001de0:	6867      	ldr	r7, [r4, #4]
 8001de2:	2519      	movs	r5, #25
 8001de4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001de8:	fb05 f300 	mul.w	r3, r5, r0
 8001dec:	00bf      	lsls	r7, r7, #2
 8001dee:	fbb3 f3f7 	udiv	r3, r3, r7
 8001df2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001df6:	011f      	lsls	r7, r3, #4
 8001df8:	f7ff fa76 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001dfc:	6863      	ldr	r3, [r4, #4]
 8001dfe:	4368      	muls	r0, r5
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	fbb0 f8f3 	udiv	r8, r0, r3
 8001e06:	f7ff fa6f 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001e0a:	6863      	ldr	r3, [r4, #4]
 8001e0c:	4368      	muls	r0, r5
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e14:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e18:	fb09 8313 	mls	r3, r9, r3, r8
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	3332      	adds	r3, #50	; 0x32
 8001e20:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e24:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001e28:	f7ff fa5e 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	4368      	muls	r0, r5
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	fbb0 faf2 	udiv	sl, r0, r2
 8001e36:	f7ff fa57 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e3a:	6863      	ldr	r3, [r4, #4]
 8001e3c:	4368      	muls	r0, r5
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e44:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e48:	fb09 a313 	mls	r3, r9, r3, sl
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	3332      	adds	r3, #50	; 0x32
 8001e50:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	ea43 0308 	orr.w	r3, r3, r8
 8001e5c:	e783      	b.n	8001d66 <UART_SetConfig+0xd2>
 8001e5e:	f7ff fa33 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001e62:	6867      	ldr	r7, [r4, #4]
 8001e64:	2519      	movs	r5, #25
 8001e66:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e6a:	fb05 f300 	mul.w	r3, r5, r0
 8001e6e:	00bf      	lsls	r7, r7, #2
 8001e70:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e74:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e78:	011f      	lsls	r7, r3, #4
 8001e7a:	f7ff fa25 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	4368      	muls	r0, r5
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fbb0 f8f3 	udiv	r8, r0, r3
 8001e88:	f7ff fa1e 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001e8c:	6863      	ldr	r3, [r4, #4]
 8001e8e:	4368      	muls	r0, r5
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e9a:	fb09 8313 	mls	r3, r9, r3, r8
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	3332      	adds	r3, #50	; 0x32
 8001ea2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ea6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001eaa:	f7ff fa0d 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001eae:	6862      	ldr	r2, [r4, #4]
 8001eb0:	4368      	muls	r0, r5
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	fbb0 faf2 	udiv	sl, r0, r2
 8001eb8:	f7ff fa06 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 8001ebc:	e7bd      	b.n	8001e3a <UART_SetConfig+0x1a6>
 8001ebe:	bf00      	nop
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40011400 	.word	0x40011400

08001ec8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460e      	mov	r6, r1
 8001ece:	4617      	mov	r7, r2
 8001ed0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001ed2:	6821      	ldr	r1, [r4, #0]
 8001ed4:	680b      	ldr	r3, [r1, #0]
 8001ed6:	ea36 0303 	bics.w	r3, r6, r3
 8001eda:	d101      	bne.n	8001ee0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
}
 8001ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ee0:	1c6b      	adds	r3, r5, #1
 8001ee2:	d0f7      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ee4:	b995      	cbnz	r5, 8001f0c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001eee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001efe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001f02:	2300      	movs	r3, #0
 8001f04:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001f08:	2003      	movs	r0, #3
 8001f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001f0c:	f7fe ff8c 	bl	8000e28 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	4285      	cmp	r5, r0
 8001f14:	d2dd      	bcs.n	8001ed2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001f16:	e7e6      	b.n	8001ee6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001f18 <HAL_UART_Init>:
{
 8001f18:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	b340      	cbz	r0, 8001f70 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f26:	b91b      	cbnz	r3, 8001f30 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f28:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001f2c:	f000 fc3c 	bl	80027a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f30:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f32:	2324      	movs	r3, #36	; 0x24
 8001f34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f38:	68d3      	ldr	r3, [r2, #12]
 8001f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f3e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff fea7 	bl	8001c94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f56:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f5e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001f62:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f64:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f6a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001f6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
}
 8001f72:	bd10      	pop	{r4, pc}

08001f74 <HAL_UART_Transmit>:
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f78:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001f7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f7e:	2b20      	cmp	r3, #32
{
 8001f80:	4604      	mov	r4, r0
 8001f82:	460d      	mov	r5, r1
 8001f84:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001f86:	d14f      	bne.n	8002028 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	d04a      	beq.n	8002022 <HAL_UART_Transmit+0xae>
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d048      	beq.n	8002022 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001f90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d047      	beq.n	8002028 <HAL_UART_Transmit+0xb4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa2:	2321      	movs	r3, #33	; 0x21
 8001fa4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001fa8:	f7fe ff3e 	bl	8000e28 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001fac:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001fb0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001fb2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001fb6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b96b      	cbnz	r3, 8001fd8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff ff80 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001fc8:	b9b0      	cbnz	r0, 8001ff8 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001fd0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001fd8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fe0:	68a3      	ldr	r3, [r4, #8]
 8001fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe6:	4632      	mov	r2, r6
 8001fe8:	463b      	mov	r3, r7
 8001fea:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001fee:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ff0:	d10e      	bne.n	8002010 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	f7ff ff69 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ff6:	b110      	cbz	r0, 8001ffe <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ffe:	882b      	ldrh	r3, [r5, #0]
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002006:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002008:	6923      	ldr	r3, [r4, #16]
 800200a:	b943      	cbnz	r3, 800201e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800200c:	3502      	adds	r5, #2
 800200e:	e7d2      	b.n	8001fb6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002010:	f7ff ff5a 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002014:	2800      	cmp	r0, #0
 8002016:	d1ef      	bne.n	8001ff8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	782a      	ldrb	r2, [r5, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	3501      	adds	r5, #1
 8002020:	e7c9      	b.n	8001fb6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002022:	2001      	movs	r0, #1
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002028:	2002      	movs	r0, #2
}
 800202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800202e <HAL_UART_TxCpltCallback>:
 800202e:	4770      	bx	lr

08002030 <HAL_UART_RxCpltCallback>:
 8002030:	4770      	bx	lr

08002032 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002032:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002036:	2b22      	cmp	r3, #34	; 0x22
{
 8002038:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800203a:	d132      	bne.n	80020a2 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800203c:	6883      	ldr	r3, [r0, #8]
 800203e:	6901      	ldr	r1, [r0, #16]
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002046:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002048:	d11f      	bne.n	800208a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800204a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800204c:	b9c9      	cbnz	r1, 8002082 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800204e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002052:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002056:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002058:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800205a:	3c01      	subs	r4, #1
 800205c:	b2a4      	uxth	r4, r4
 800205e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002060:	b96c      	cbnz	r4, 800207e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002062:	6803      	ldr	r3, [r0, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800206a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002074:	2320      	movs	r3, #32
 8002076:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800207a:	f7ff ffd9 	bl	8002030 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800207e:	2000      	movs	r0, #0
}
 8002080:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f823 2b01 	strh.w	r2, [r3], #1
 8002088:	e7e5      	b.n	8002056 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800208a:	b921      	cbnz	r1, 8002096 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800208c:	1c59      	adds	r1, r3, #1
 800208e:	6852      	ldr	r2, [r2, #4]
 8002090:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e7e0      	b.n	8002058 <UART_Receive_IT+0x26>
 8002096:	6852      	ldr	r2, [r2, #4]
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	6281      	str	r1, [r0, #40]	; 0x28
 800209c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a0:	e7f7      	b.n	8002092 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80020a2:	2002      	movs	r0, #2
 80020a4:	bd10      	pop	{r4, pc}

080020a6 <HAL_UART_ErrorCallback>:
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020ac:	68d9      	ldr	r1, [r3, #12]
{
 80020ae:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80020b0:	0716      	lsls	r6, r2, #28
{
 80020b2:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020b4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80020b6:	d107      	bne.n	80020c8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b8:	0696      	lsls	r6, r2, #26
 80020ba:	d55a      	bpl.n	8002172 <HAL_UART_IRQHandler+0xca>
 80020bc:	068d      	lsls	r5, r1, #26
 80020be:	d558      	bpl.n	8002172 <HAL_UART_IRQHandler+0xca>
}
 80020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80020c4:	f7ff bfb5 	b.w	8002032 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020c8:	f015 0501 	ands.w	r5, r5, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_UART_IRQHandler+0x2c>
 80020ce:	f411 7f90 	tst.w	r1, #288	; 0x120
 80020d2:	d04e      	beq.n	8002172 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020d4:	07d3      	lsls	r3, r2, #31
 80020d6:	d505      	bpl.n	80020e4 <HAL_UART_IRQHandler+0x3c>
 80020d8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020da:	bf42      	ittt	mi
 80020dc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80020de:	f043 0301 	orrmi.w	r3, r3, #1
 80020e2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020e4:	0750      	lsls	r0, r2, #29
 80020e6:	d504      	bpl.n	80020f2 <HAL_UART_IRQHandler+0x4a>
 80020e8:	b11d      	cbz	r5, 80020f2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f2:	0793      	lsls	r3, r2, #30
 80020f4:	d504      	bpl.n	8002100 <HAL_UART_IRQHandler+0x58>
 80020f6:	b11d      	cbz	r5, 8002100 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002100:	0716      	lsls	r6, r2, #28
 8002102:	d504      	bpl.n	800210e <HAL_UART_IRQHandler+0x66>
 8002104:	b11d      	cbz	r5, 800210e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800210e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d066      	beq.n	80021e2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002114:	0695      	lsls	r5, r2, #26
 8002116:	d504      	bpl.n	8002122 <HAL_UART_IRQHandler+0x7a>
 8002118:	0688      	lsls	r0, r1, #26
 800211a:	d502      	bpl.n	8002122 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff ff88 	bl	8002032 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002126:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002128:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800212a:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800212c:	d402      	bmi.n	8002134 <HAL_UART_IRQHandler+0x8c>
 800212e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002132:	d01a      	beq.n	800216a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002134:	f7ff fda0 	bl	8001c78 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	0652      	lsls	r2, r2, #25
 800213e:	d510      	bpl.n	8002162 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002140:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002142:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002148:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800214a:	b150      	cbz	r0, 8002162 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_UART_IRQHandler+0x13c>)
 800214e:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002150:	f7fe fee9 	bl	8000f26 <HAL_DMA_Abort_IT>
 8002154:	2800      	cmp	r0, #0
 8002156:	d044      	beq.n	80021e2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002158:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800215a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002160:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ff9f 	bl	80020a6 <HAL_UART_ErrorCallback>
 8002168:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800216a:	f7ff ff9c 	bl	80020a6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002170:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002172:	0616      	lsls	r6, r2, #24
 8002174:	d527      	bpl.n	80021c6 <HAL_UART_IRQHandler+0x11e>
 8002176:	060d      	lsls	r5, r1, #24
 8002178:	d525      	bpl.n	80021c6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800217a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800217e:	2a21      	cmp	r2, #33	; 0x21
 8002180:	d12f      	bne.n	80021e2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002182:	68a2      	ldr	r2, [r4, #8]
 8002184:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002188:	6a22      	ldr	r2, [r4, #32]
 800218a:	d117      	bne.n	80021bc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800218c:	8811      	ldrh	r1, [r2, #0]
 800218e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002192:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002194:	6921      	ldr	r1, [r4, #16]
 8002196:	b979      	cbnz	r1, 80021b8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002198:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800219a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800219c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800219e:	3a01      	subs	r2, #1
 80021a0:	b292      	uxth	r2, r2
 80021a2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80021a4:	b9ea      	cbnz	r2, 80021e2 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80021b8:	3201      	adds	r2, #1
 80021ba:	e7ee      	b.n	800219a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021bc:	1c51      	adds	r1, r2, #1
 80021be:	6221      	str	r1, [r4, #32]
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	e7ea      	b.n	800219c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021c6:	0650      	lsls	r0, r2, #25
 80021c8:	d50b      	bpl.n	80021e2 <HAL_UART_IRQHandler+0x13a>
 80021ca:	064a      	lsls	r2, r1, #25
 80021cc:	d509      	bpl.n	80021e2 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021d6:	2320      	movs	r3, #32
 80021d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff26 	bl	800202e <HAL_UART_TxCpltCallback>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	080021e9 	.word	0x080021e9

080021e8 <UART_DMAAbortOnError>:
{
 80021e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80021f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80021f2:	f7ff ff58 	bl	80020a6 <HAL_UART_ErrorCallback>
 80021f6:	bd08      	pop	{r3, pc}

080021f8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int inta,intb,floata,floatb;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim->Instance==TIM2){
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002200:	b08d      	sub	sp, #52	; 0x34
 8002202:	4604      	mov	r4, r0
	if(htim->Instance==TIM2){
 8002204:	d109      	bne.n	800221a <HAL_TIM_IC_CaptureCallback+0x22>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==1){
 8002206:	2120      	movs	r1, #32
 8002208:	4839      	ldr	r0, [pc, #228]	; (80022f0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800220a:	f7fe ff8b 	bl	8001124 <HAL_GPIO_ReadPin>
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002210:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8002212:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==1){
 8002214:	d111      	bne.n	800223a <HAL_TIM_IC_CaptureCallback+0x42>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
			inta=(int)distance;
			floata=(int)((distance-inta)*100);
			HAL_TIM_Base_Start_IT(&htim1);
		}
	}
	if(htim->Instance==TIM3){
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d109      	bne.n	8002236 <HAL_TIM_IC_CaptureCallback+0x3e>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)==1){
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	4835      	ldr	r0, [pc, #212]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x104>)
 8002226:	f7fe ff7d 	bl	8001124 <HAL_GPIO_ReadPin>
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_TIM_IC_CaptureCallback+0x108>)
 800222c:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim3,0);
 800222e:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)==1){
 8002230:	d124      	bne.n	800227c <HAL_TIM_IC_CaptureCallback+0x84>
			__HAL_TIM_SET_COUNTER(&htim3,0);
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
			HAL_TIM_Base_Start_IT(&htim1);
		}
	}

}
 8002236:	b00d      	add	sp, #52	; 0x34
 8002238:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int cnt=__HAL_TIM_GET_COUNTER(&htim2);
 800223a:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double distance=cnt/(double)58;
 800223c:	f7fe f982 	bl	8000544 <__aeabi_i2d>
 8002240:	2200      	movs	r2, #0
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002244:	f7fe fb0e 	bl	8000864 <__aeabi_ddiv>
 8002248:	460f      	mov	r7, r1
 800224a:	4606      	mov	r6, r0
			inta=(int)distance;
 800224c:	f7fe fbf2 	bl	8000a34 <__aeabi_d2iz>
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002252:	6018      	str	r0, [r3, #0]
			floata=(int)((distance-inta)*100);
 8002254:	f7fe f976 	bl	8000544 <__aeabi_i2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4630      	mov	r0, r6
 800225e:	4639      	mov	r1, r7
 8002260:	f7fe f822 	bl	80002a8 <__aeabi_dsub>
 8002264:	2200      	movs	r2, #0
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_TIM_IC_CaptureCallback+0x114>)
 8002268:	f7fe f9d2 	bl	8000610 <__aeabi_dmul>
 800226c:	f7fe fbe2 	bl	8000a34 <__aeabi_d2iz>
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002272:	6018      	str	r0, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8002274:	4827      	ldr	r0, [pc, #156]	; (8002314 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002276:	f7ff f9cb 	bl	8001610 <HAL_TIM_Base_Start_IT>
 800227a:	e7ce      	b.n	800221a <HAL_TIM_IC_CaptureCallback+0x22>
			int cnt=__HAL_TIM_GET_COUNTER(&htim3);
 800227c:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double distance=cnt/(double)58;
 800227e:	f7fe f961 	bl	8000544 <__aeabi_i2d>
 8002282:	2200      	movs	r2, #0
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002286:	f7fe faed 	bl	8000864 <__aeabi_ddiv>
 800228a:	460f      	mov	r7, r1
 800228c:	4606      	mov	r6, r0
			intb=(int)distance;
 800228e:	f7fe fbd1 	bl	8000a34 <__aeabi_d2iz>
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002294:	6018      	str	r0, [r3, #0]
 8002296:	4604      	mov	r4, r0
			floatb=(int)((distance-intb)*100);
 8002298:	f7fe f954 	bl	8000544 <__aeabi_i2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4630      	mov	r0, r6
 80022a2:	4639      	mov	r1, r7
 80022a4:	f7fe f800 	bl	80002a8 <__aeabi_dsub>
 80022a8:	2200      	movs	r2, #0
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_TIM_IC_CaptureCallback+0x114>)
 80022ac:	f7fe f9b0 	bl	8000610 <__aeabi_dmul>
 80022b0:	f7fe fbc0 	bl	8000a34 <__aeabi_d2iz>
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_TIM_IC_CaptureCallback+0x124>)
 80022b6:	4605      	mov	r5, r0
 80022b8:	6018      	str	r0, [r3, #0]
			char tosend[40]={0};
 80022ba:	2228      	movs	r2, #40	; 0x28
 80022bc:	2100      	movs	r1, #0
 80022be:	a802      	add	r0, sp, #8
 80022c0:	f000 fb3e 	bl	8002940 <memset>
			sprintf(tosend,"%d.%02d , %d.%02d\r\n",inta,floata,intb,floatb);
 80022c4:	e88d 0030 	stmia.w	sp, {r4, r5}
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x118>)
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_TIM_IC_CaptureCallback+0x110>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	4913      	ldr	r1, [pc, #76]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022d2:	a802      	add	r0, sp, #8
 80022d4:	f000 fb3c 	bl	8002950 <siprintf>
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
 80022d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022dc:	2228      	movs	r2, #40	; 0x28
 80022de:	a902      	add	r1, sp, #8
 80022e0:	4810      	ldr	r0, [pc, #64]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022e2:	f7ff fe47 	bl	8001f74 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim1);
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80022e8:	f7ff f992 	bl	8001610 <HAL_TIM_Base_Start_IT>
}
 80022ec:	e7a3      	b.n	8002236 <HAL_TIM_IC_CaptureCallback+0x3e>
 80022ee:	bf00      	nop
 80022f0:	40020000 	.word	0x40020000
 80022f4:	2000016c 	.word	0x2000016c
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40020800 	.word	0x40020800
 8002300:	200000f0 	.word	0x200000f0
 8002304:	404d0000 	.word	0x404d0000
 8002308:	200000e8 	.word	0x200000e8
 800230c:	40590000 	.word	0x40590000
 8002310:	2000012c 	.word	0x2000012c
 8002314:	20000130 	.word	0x20000130
 8002318:	200000a4 	.word	0x200000a4
 800231c:	200000ec 	.word	0x200000ec
 8002320:	080031c0 	.word	0x080031c0
 8002324:	200000a8 	.word	0x200000a8

08002328 <HAL_TIM_PeriodElapsedCallback>:
int tim1Count=7000;
int ultrasonic=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance==TIM1){
 8002328:	6802      	ldr	r2, [r0, #0]
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800232c:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800232e:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance==TIM1){
 8002330:	d13c      	bne.n	80023ac <HAL_TIM_PeriodElapsedCallback+0x84>
		if(tim1Count<7000){
 8002332:	4c20      	ldr	r4, [pc, #128]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f641 3257 	movw	r2, #6999	; 0x1b57
 800233a:	4293      	cmp	r3, r2
 800233c:	dc02      	bgt.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x1c>
			tim1Count++;
 800233e:	3301      	adds	r3, #1
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd70      	pop	{r4, r5, r6, pc}
		}else{
			if(ultrasonic==0){
 8002344:	4d1c      	ldr	r5, [pc, #112]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
				HAL_TIM_Base_Stop_IT(&htim1);
 8002346:	481d      	ldr	r0, [pc, #116]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x94>)
			if(ultrasonic==0){
 8002348:	682e      	ldr	r6, [r5, #0]
 800234a:	b9ee      	cbnz	r6, 8002388 <HAL_TIM_PeriodElapsedCallback+0x60>
				HAL_TIM_Base_Stop_IT(&htim1);
 800234c:	f7ff f96b 	bl	8001626 <HAL_TIM_Base_Stop_IT>
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){
 8002350:	2120      	movs	r1, #32
 8002352:	481b      	ldr	r0, [pc, #108]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002354:	f7fe fee6 	bl	8001124 <HAL_GPIO_ReadPin>
 8002358:	b960      	cbnz	r0, 8002374 <HAL_TIM_PeriodElapsedCallback+0x4c>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
 800235a:	2201      	movs	r2, #1
 800235c:	2120      	movs	r1, #32
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
				}
			}else{
				HAL_TIM_Base_Stop_IT(&htim1);
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==0){
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
 800235e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002362:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8002366:	f7fe fee3 	bl	8001130 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Start_IT(&htim1);
 800236a:	4814      	ldr	r0, [pc, #80]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x94>)
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
				}
			}
		}
	}
}
 800236c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					HAL_TIM_Base_Start_IT(&htim1);
 8002370:	f7ff b94e 	b.w	8001610 <HAL_TIM_Base_Start_IT>
					ultrasonic=1;
 8002374:	2301      	movs	r3, #1
					tim1Count=0;
 8002376:	6026      	str	r6, [r4, #0]
					ultrasonic=1;
 8002378:	602b      	str	r3, [r5, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 800237a:	4632      	mov	r2, r6
 800237c:	2120      	movs	r1, #32
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 800237e:	4810      	ldr	r0, [pc, #64]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
}
 8002380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 8002384:	f7fe bed4 	b.w	8001130 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim1);
 8002388:	f7ff f94d 	bl	8001626 <HAL_TIM_Base_Stop_IT>
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==0){
 800238c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002392:	f7fe fec7 	bl	8001124 <HAL_GPIO_ReadPin>
 8002396:	b918      	cbnz	r0, 80023a0 <HAL_TIM_PeriodElapsedCallback+0x78>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800239e:	e7de      	b.n	800235e <HAL_TIM_PeriodElapsedCallback+0x36>
					tim1Count=0;
 80023a0:	2200      	movs	r2, #0
 80023a2:	6022      	str	r2, [r4, #0]
					ultrasonic=0;
 80023a4:	602a      	str	r2, [r5, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 80023a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023aa:	e7e8      	b.n	800237e <HAL_TIM_PeriodElapsedCallback+0x56>
 80023ac:	bd70      	pop	{r4, r5, r6, pc}
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	20000008 	.word	0x20000008
 80023b8:	20000090 	.word	0x20000090
 80023bc:	20000130 	.word	0x20000130
 80023c0:	40020400 	.word	0x40020400

080023c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	2200      	movs	r2, #0
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <SystemClock_Config+0x90>)
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023d0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80023d4:	6419      	str	r1, [r3, #64]	; 0x40
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023d8:	491f      	ldr	r1, [pc, #124]	; (8002458 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	680b      	ldr	r3, [r1, #0]
 80023e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	680b      	ldr	r3, [r1, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023f2:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023fc:	2302      	movs	r3, #2
 80023fe:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002400:	2301      	movs	r3, #1
 8002402:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002404:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002406:	2310      	movs	r3, #16
 8002408:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	f7fe ff7d 	bl	8001308 <HAL_RCC_OscConfig>
 800240e:	4601      	mov	r1, r0
 8002410:	b100      	cbz	r0, 8002414 <SystemClock_Config+0x50>
 8002412:	e7fe      	b.n	8002412 <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002414:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002416:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002418:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800241a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241c:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800241e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002420:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002422:	f7fe feb1 	bl	8001188 <HAL_RCC_ClockConfig>
 8002426:	4604      	mov	r4, r0
 8002428:	b100      	cbz	r0, 800242c <SystemClock_Config+0x68>
 800242a:	e7fe      	b.n	800242a <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800242c:	f7fe ff46 	bl	80012bc <HAL_RCC_GetHCLKFreq>
 8002430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002434:	fbb0 f0f3 	udiv	r0, r0, r3
 8002438:	f7fe fd4e 	bl	8000ed8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800243c:	2004      	movs	r0, #4
 800243e:	f7fe fd61 	bl	8000f04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002442:	4622      	mov	r2, r4
 8002444:	4621      	mov	r1, r4
 8002446:	f04f 30ff 	mov.w	r0, #4294967295
 800244a:	f7fe fd05 	bl	8000e58 <HAL_NVIC_SetPriority>
}
 800244e:	b014      	add	sp, #80	; 0x50
 8002450:	bd10      	pop	{r4, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000

0800245c <main>:
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	2400      	movs	r4, #0
  HAL_Init();
 8002462:	f7fe fcbb 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 8002466:	f7ff ffad 	bl	80023c4 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	4b74      	ldr	r3, [pc, #464]	; (800263c <main+0x1e0>)
 800246c:	9401      	str	r4, [sp, #4]
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_13, GPIO_PIN_RESET);
 8002470:	4873      	ldr	r0, [pc, #460]	; (8002640 <main+0x1e4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	f042 0202 	orr.w	r2, r2, #2
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247a:	f002 0202 	and.w	r2, r2, #2
 800247e:	9201      	str	r2, [sp, #4]
 8002480:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002482:	9402      	str	r4, [sp, #8]
 8002484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
 800248c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002492:	9202      	str	r2, [sp, #8]
 8002494:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	9403      	str	r4, [sp, #12]
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	f042 0204 	orr.w	r2, r2, #4
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a2:	f002 0204 	and.w	r2, r2, #4
 80024a6:	9203      	str	r2, [sp, #12]
 80024a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	9404      	str	r4, [sp, #16]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_13, GPIO_PIN_RESET);
 80024ba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_13, GPIO_PIN_RESET);
 80024be:	f242 0120 	movw	r1, #8224	; 0x2020
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_13, GPIO_PIN_RESET);
 80024c4:	f7fe fe34 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	485b      	ldr	r0, [pc, #364]	; (8002640 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024d6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	940e      	str	r4, [sp, #56]	; 0x38

  /*Configure GPIO pins : PB5 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f7fe fd34 	bl	8000f4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80024e4:	f242 0320 	movw	r3, #8224	; 0x2020
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	4855      	ldr	r0, [pc, #340]	; (8002640 <main+0x1e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 80024ea:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f7fe fd29 	bl	8000f4c <HAL_GPIO_Init>
  huart3.Instance = USART3;
 80024fa:	4852      	ldr	r0, [pc, #328]	; (8002644 <main+0x1e8>)
  huart3.Init.BaudRate = 115200;
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <main+0x1ec>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002500:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002504:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002508:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800250a:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250c:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800250e:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002510:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002512:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002514:	f7ff fd00 	bl	8001f18 <HAL_UART_Init>
 8002518:	b100      	cbz	r0, 800251c <main+0xc0>
 800251a:	e7fe      	b.n	800251a <main+0xbe>
  htim3.Instance = TIM3;
 800251c:	4c4b      	ldr	r4, [pc, #300]	; (800264c <main+0x1f0>)
  htim3.Init.Prescaler = 15;
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <main+0x1f4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 15;
 8002522:	270f      	movs	r7, #15
  htim3.Init.Period = 0xffff;
 8002524:	f64f 79ff 	movw	r9, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800252a:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 15;
 800252c:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.Period = 0xffff;
 8002530:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002534:	f7ff fa4e 	bl	80019d4 <HAL_TIM_Base_Init>
 8002538:	b100      	cbz	r0, 800253c <main+0xe0>
 800253a:	e7fe      	b.n	800253a <main+0xde>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253c:	ad10      	add	r5, sp, #64	; 0x40
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	f845 3d24 	str.w	r3, [r5, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002546:	4620      	mov	r0, r4
 8002548:	4629      	mov	r1, r5
 800254a:	f7ff f881 	bl	8001650 <HAL_TIM_ConfigClockSource>
 800254e:	b100      	cbz	r0, 8002552 <main+0xf6>
 8002550:	e7fe      	b.n	8002550 <main+0xf4>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002552:	4620      	mov	r0, r4
 8002554:	f7ff fa58 	bl	8001a08 <HAL_TIM_IC_Init>
 8002558:	b100      	cbz	r0, 800255c <main+0x100>
 800255a:	e7fe      	b.n	800255a <main+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002560:	a905      	add	r1, sp, #20
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff fb64 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	b100      	cbz	r0, 800256c <main+0x110>
 800256a:	e7fe      	b.n	800256a <main+0x10e>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800256c:	260a      	movs	r6, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800256e:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8002570:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002572:	2204      	movs	r2, #4
 8002574:	a90b      	add	r1, sp, #44	; 0x2c
 8002576:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002578:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800257a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800257e:	f7ff fa97 	bl	8001ab0 <HAL_TIM_IC_ConfigChannel>
 8002582:	b100      	cbz	r0, 8002586 <main+0x12a>
 8002584:	e7fe      	b.n	8002584 <main+0x128>
  htim2.Instance = TIM2;
 8002586:	4c33      	ldr	r4, [pc, #204]	; (8002654 <main+0x1f8>)
 8002588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002590:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 15;
 8002592:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.Period = 0xffff;
 8002596:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800259a:	f7ff fa35 	bl	8001a08 <HAL_TIM_IC_Init>
 800259e:	b100      	cbz	r0, 80025a2 <main+0x146>
 80025a0:	e7fe      	b.n	80025a0 <main+0x144>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a6:	4629      	mov	r1, r5
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff fb41 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4602      	mov	r2, r0
 80025b0:	b100      	cbz	r0, 80025b4 <main+0x158>
 80025b2:	e7fe      	b.n	80025b2 <main+0x156>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025b4:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 80025b6:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025b8:	a90b      	add	r1, sp, #44	; 0x2c
 80025ba:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80025bc:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025be:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025c2:	f7ff fa75 	bl	8001ab0 <HAL_TIM_IC_ConfigChannel>
 80025c6:	b100      	cbz	r0, 80025ca <main+0x16e>
 80025c8:	e7fe      	b.n	80025c8 <main+0x16c>
  htim1.Instance = TIM1;
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <main+0x1fc>)
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <main+0x200>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	6098      	str	r0, [r3, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d0:	6118      	str	r0, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025d2:	6158      	str	r0, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d4:	4618      	mov	r0, r3
  htim1.Init.Prescaler = 15;
 80025d6:	e883 0084 	stmia.w	r3, {r2, r7}
  htim1.Init.Period = 10;
 80025da:	60de      	str	r6, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025dc:	f7ff f9fa 	bl	80019d4 <HAL_TIM_Base_Init>
 80025e0:	b100      	cbz	r0, 80025e4 <main+0x188>
 80025e2:	e7fe      	b.n	80025e2 <main+0x186>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025e8:	a90b      	add	r1, sp, #44	; 0x2c
 80025ea:	481b      	ldr	r0, [pc, #108]	; (8002658 <main+0x1fc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ec:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ee:	f7ff f82f 	bl	8001650 <HAL_TIM_ConfigClockSource>
 80025f2:	b100      	cbz	r0, 80025f6 <main+0x19a>
 80025f4:	e7fe      	b.n	80025f4 <main+0x198>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f8:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025fa:	4629      	mov	r1, r5
 80025fc:	4816      	ldr	r0, [pc, #88]	; (8002658 <main+0x1fc>)
 80025fe:	f7ff fb17 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002602:	4601      	mov	r1, r0
 8002604:	b100      	cbz	r0, 8002608 <main+0x1ac>
 8002606:	e7fe      	b.n	8002606 <main+0x1aa>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <main+0x1f8>)
 800260a:	f7ff fae5 	bl	8001bd8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Transmit(&huart3,"Aok\r\n",5,0xffff);
 800260e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002612:	2205      	movs	r2, #5
 8002614:	4912      	ldr	r1, [pc, #72]	; (8002660 <main+0x204>)
 8002616:	480b      	ldr	r0, [pc, #44]	; (8002644 <main+0x1e8>)
 8002618:	f7ff fcac 	bl	8001f74 <HAL_UART_Transmit>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 800261c:	2104      	movs	r1, #4
 800261e:	480b      	ldr	r0, [pc, #44]	; (800264c <main+0x1f0>)
 8002620:	f7ff fada 	bl	8001bd8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Transmit(&huart3,"Bok\r\n",5,0xffff);
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	2205      	movs	r2, #5
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <main+0x208>)
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <main+0x1e8>)
 800262e:	f7ff fca1 	bl	8001f74 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim1);
 8002632:	4809      	ldr	r0, [pc, #36]	; (8002658 <main+0x1fc>)
 8002634:	f7fe ffec 	bl	8001610 <HAL_TIM_Base_Start_IT>
 8002638:	e7fe      	b.n	8002638 <main+0x1dc>
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40020400 	.word	0x40020400
 8002644:	200000a8 	.word	0x200000a8
 8002648:	40004800 	.word	0x40004800
 800264c:	200000f0 	.word	0x200000f0
 8002650:	40000400 	.word	0x40000400
 8002654:	2000016c 	.word	0x2000016c
 8002658:	20000130 	.word	0x20000130
 800265c:	40010000 	.word	0x40010000
 8002660:	080031d4 	.word	0x080031d4
 8002664:	080031da 	.word	0x080031da

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266a:	2003      	movs	r0, #3
 800266c:	f7fe fbe2 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	f06f 000b 	mvn.w	r0, #11
 8002678:	f7fe fbee 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	4611      	mov	r1, r2
 8002680:	f06f 000a 	mvn.w	r0, #10
 8002684:	f7fe fbe8 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	4611      	mov	r1, r2
 800268c:	f06f 0009 	mvn.w	r0, #9
 8002690:	f7fe fbe2 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	4611      	mov	r1, r2
 8002698:	f06f 0004 	mvn.w	r0, #4
 800269c:	f7fe fbdc 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	4611      	mov	r1, r2
 80026a4:	f06f 0003 	mvn.w	r0, #3
 80026a8:	f7fe fbd6 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	4611      	mov	r1, r2
 80026b0:	f06f 0001 	mvn.w	r0, #1
 80026b4:	f7fe fbd0 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	4611      	mov	r1, r2
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026c4:	f7fe bbc8 	b.w	8000e58 <HAL_NVIC_SetPriority>

080026c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_TIM_Base_MspInit+0x78>)
 80026ce:	4293      	cmp	r3, r2
{
 80026d0:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 80026d2:	d114      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d4:	2200      	movs	r2, #0
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_TIM_Base_MspInit+0x7c>)
 80026d8:	9201      	str	r2, [sp, #4]
 80026da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026dc:	f041 0101 	orr.w	r1, r1, #1
 80026e0:	6459      	str	r1, [r3, #68]	; 0x44
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	9301      	str	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026ea:	2019      	movs	r0, #25
 80026ec:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026f0:	f7fe fbb2 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026f4:	2019      	movs	r0, #25
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026f6:	f7fe fbe3 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fa:	b006      	add	sp, #24
 80026fc:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_TIM_Base_MspInit+0x80>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d1fa      	bne.n	80026fa <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002704:	2400      	movs	r4, #0
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_TIM_Base_MspInit+0x7c>)
 8002708:	9400      	str	r4, [sp, #0]
 800270a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270c:	480f      	ldr	r0, [pc, #60]	; (800274c <HAL_TIM_Base_MspInit+0x84>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270e:	f042 0202 	orr.w	r2, r2, #2
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800272c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f7fe fc0d 	bl	8000f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002732:	201d      	movs	r0, #29
 8002734:	4622      	mov	r2, r4
 8002736:	2101      	movs	r1, #1
 8002738:	f7fe fb8e 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800273c:	201d      	movs	r0, #29
 800273e:	e7da      	b.n	80026f6 <HAL_TIM_Base_MspInit+0x2e>
 8002740:	40010000 	.word	0x40010000
 8002744:	40023800 	.word	0x40023800
 8002748:	40000400 	.word	0x40000400
 800274c:	40020800 	.word	0x40020800

08002750 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002750:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM2)
 8002752:	6803      	ldr	r3, [r0, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002758:	b087      	sub	sp, #28
  if(htim_ic->Instance==TIM2)
 800275a:	d120      	bne.n	800279e <HAL_TIM_IC_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275c:	2400      	movs	r4, #0
 800275e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002762:	9400      	str	r4, [sp, #0]
 8002764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	480f      	ldr	r0, [pc, #60]	; (80027a4 <HAL_TIM_IC_MspInit+0x54>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800277c:	2320      	movs	r3, #32
 800277e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002780:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002788:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f7fe fbdf 	bl	8000f4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800278e:	201c      	movs	r0, #28
 8002790:	4622      	mov	r2, r4
 8002792:	4629      	mov	r1, r5
 8002794:	f7fe fb60 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002798:	201c      	movs	r0, #28
 800279a:	f7fe fb91 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800279e:	b007      	add	sp, #28
 80027a0:	bd30      	pop	{r4, r5, pc}
 80027a2:	bf00      	nop
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 80027aa:	6802      	ldr	r2, [r0, #0]
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_UART_MspInit+0x58>)
 80027ae:	429a      	cmp	r2, r3
{
 80027b0:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 80027b2:	d123      	bne.n	80027fc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b4:	2400      	movs	r4, #0
 80027b6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80027ba:	9400      	str	r4, [sp, #0]
 80027bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	4811      	ldr	r0, [pc, #68]	; (8002804 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80027c4:	6419      	str	r1, [r3, #64]	; 0x40
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027da:	2301      	movs	r3, #1
 80027dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e4:	2307      	movs	r3, #7
 80027e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f7fe fbb0 	bl	8000f4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027ec:	2027      	movs	r0, #39	; 0x27
 80027ee:	4622      	mov	r2, r4
 80027f0:	4621      	mov	r1, r4
 80027f2:	f7fe fb31 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027f6:	2027      	movs	r0, #39	; 0x27
 80027f8:	f7fe fb62 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027fc:	b006      	add	sp, #24
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	40004800 	.word	0x40004800
 8002804:	40020400 	.word	0x40020400

08002808 <NMI_Handler>:
 8002808:	4770      	bx	lr

0800280a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800280a:	e7fe      	b.n	800280a <HardFault_Handler>

0800280c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800280c:	e7fe      	b.n	800280c <MemManage_Handler>

0800280e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800280e:	e7fe      	b.n	800280e <BusFault_Handler>

08002810 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002810:	e7fe      	b.n	8002810 <UsageFault_Handler>

08002812 <SVC_Handler>:
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281a:	f7fe faf9 	bl	8000e10 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800281e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002822:	f7fe bb7c 	b.w	8000f1e <HAL_SYSTICK_IRQHandler>
	...

08002828 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002828:	4801      	ldr	r0, [pc, #4]	; (8002830 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800282a:	f7fe bfcd 	b.w	80017c8 <HAL_TIM_IRQHandler>
 800282e:	bf00      	nop
 8002830:	20000130 	.word	0x20000130

08002834 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002834:	4801      	ldr	r0, [pc, #4]	; (800283c <TIM2_IRQHandler+0x8>)
 8002836:	f7fe bfc7 	b.w	80017c8 <HAL_TIM_IRQHandler>
 800283a:	bf00      	nop
 800283c:	2000016c 	.word	0x2000016c

08002840 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002840:	4801      	ldr	r0, [pc, #4]	; (8002848 <TIM3_IRQHandler+0x8>)
 8002842:	f7fe bfc1 	b.w	80017c8 <HAL_TIM_IRQHandler>
 8002846:	bf00      	nop
 8002848:	200000f0 	.word	0x200000f0

0800284c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800284c:	4801      	ldr	r0, [pc, #4]	; (8002854 <USART3_IRQHandler+0x8>)
 800284e:	f7ff bc2b 	b.w	80020a8 <HAL_UART_IRQHandler>
 8002852:	bf00      	nop
 8002854:	200000a8 	.word	0x200000a8

08002858 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <SystemInit+0x40>)
 800285a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800285e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <SystemInit+0x44>)
 8002868:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800286a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002872:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800287a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800287e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <SystemInit+0x48>)
 8002882:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800288a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800288c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800288e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002892:	608b      	str	r3, [r1, #8]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00
 800289c:	40023800 	.word	0x40023800
 80028a0:	24003010 	.word	0x24003010

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028aa:	e003      	b.n	80028b4 <LoopCopyDataInit>

080028ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028b2:	3104      	adds	r1, #4

080028b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028bc:	d3f6      	bcc.n	80028ac <CopyDataInit>
  ldr  r2, =_sbss
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028c0:	e002      	b.n	80028c8 <LoopFillZerobss>

080028c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028c4:	f842 3b04 	str.w	r3, [r2], #4

080028c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028cc:	d3f9      	bcc.n	80028c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ce:	f7ff ffc3 	bl	8002858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f000 f811 	bl	80028f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7ff fdc1 	bl	800245c <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80028e0:	0800323c 	.word	0x0800323c
  ldr  r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028e8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80028ec:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80028f0:	200001ac 	.word	0x200001ac

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>
	...

080028f8 <__libc_init_array>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4e0d      	ldr	r6, [pc, #52]	; (8002930 <__libc_init_array+0x38>)
 80028fc:	4c0d      	ldr	r4, [pc, #52]	; (8002934 <__libc_init_array+0x3c>)
 80028fe:	1ba4      	subs	r4, r4, r6
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	2500      	movs	r5, #0
 8002904:	42a5      	cmp	r5, r4
 8002906:	d109      	bne.n	800291c <__libc_init_array+0x24>
 8002908:	4e0b      	ldr	r6, [pc, #44]	; (8002938 <__libc_init_array+0x40>)
 800290a:	4c0c      	ldr	r4, [pc, #48]	; (800293c <__libc_init_array+0x44>)
 800290c:	f000 fc4c 	bl	80031a8 <_init>
 8002910:	1ba4      	subs	r4, r4, r6
 8002912:	10a4      	asrs	r4, r4, #2
 8002914:	2500      	movs	r5, #0
 8002916:	42a5      	cmp	r5, r4
 8002918:	d105      	bne.n	8002926 <__libc_init_array+0x2e>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002920:	4798      	blx	r3
 8002922:	3501      	adds	r5, #1
 8002924:	e7ee      	b.n	8002904 <__libc_init_array+0xc>
 8002926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800292a:	4798      	blx	r3
 800292c:	3501      	adds	r5, #1
 800292e:	e7f2      	b.n	8002916 <__libc_init_array+0x1e>
 8002930:	08003234 	.word	0x08003234
 8002934:	08003234 	.word	0x08003234
 8002938:	08003234 	.word	0x08003234
 800293c:	08003238 	.word	0x08003238

08002940 <memset>:
 8002940:	4402      	add	r2, r0
 8002942:	4603      	mov	r3, r0
 8002944:	4293      	cmp	r3, r2
 8002946:	d100      	bne.n	800294a <memset+0xa>
 8002948:	4770      	bx	lr
 800294a:	f803 1b01 	strb.w	r1, [r3], #1
 800294e:	e7f9      	b.n	8002944 <memset+0x4>

08002950 <siprintf>:
 8002950:	b40e      	push	{r1, r2, r3}
 8002952:	b500      	push	{lr}
 8002954:	b09c      	sub	sp, #112	; 0x70
 8002956:	f44f 7102 	mov.w	r1, #520	; 0x208
 800295a:	ab1d      	add	r3, sp, #116	; 0x74
 800295c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002960:	9002      	str	r0, [sp, #8]
 8002962:	9006      	str	r0, [sp, #24]
 8002964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002968:	480a      	ldr	r0, [pc, #40]	; (8002994 <siprintf+0x44>)
 800296a:	9104      	str	r1, [sp, #16]
 800296c:	9107      	str	r1, [sp, #28]
 800296e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002972:	f853 2b04 	ldr.w	r2, [r3], #4
 8002976:	f8ad 1016 	strh.w	r1, [sp, #22]
 800297a:	6800      	ldr	r0, [r0, #0]
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	a902      	add	r1, sp, #8
 8002980:	f000 f866 	bl	8002a50 <_svfiprintf_r>
 8002984:	9b02      	ldr	r3, [sp, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	b01c      	add	sp, #112	; 0x70
 800298c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002990:	b003      	add	sp, #12
 8002992:	4770      	bx	lr
 8002994:	20000010 	.word	0x20000010

08002998 <__ssputs_r>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	688e      	ldr	r6, [r1, #8]
 800299e:	429e      	cmp	r6, r3
 80029a0:	4682      	mov	sl, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	4691      	mov	r9, r2
 80029a6:	4698      	mov	r8, r3
 80029a8:	d835      	bhi.n	8002a16 <__ssputs_r+0x7e>
 80029aa:	898a      	ldrh	r2, [r1, #12]
 80029ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029b0:	d031      	beq.n	8002a16 <__ssputs_r+0x7e>
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	6909      	ldr	r1, [r1, #16]
 80029b6:	1a6f      	subs	r7, r5, r1
 80029b8:	6965      	ldr	r5, [r4, #20]
 80029ba:	2302      	movs	r3, #2
 80029bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80029c4:	f108 0301 	add.w	r3, r8, #1
 80029c8:	443b      	add	r3, r7
 80029ca:	429d      	cmp	r5, r3
 80029cc:	bf38      	it	cc
 80029ce:	461d      	movcc	r5, r3
 80029d0:	0553      	lsls	r3, r2, #21
 80029d2:	d531      	bpl.n	8002a38 <__ssputs_r+0xa0>
 80029d4:	4629      	mov	r1, r5
 80029d6:	f000 fb39 	bl	800304c <_malloc_r>
 80029da:	4606      	mov	r6, r0
 80029dc:	b950      	cbnz	r0, 80029f4 <__ssputs_r+0x5c>
 80029de:	230c      	movs	r3, #12
 80029e0:	f8ca 3000 	str.w	r3, [sl]
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	463a      	mov	r2, r7
 80029f6:	6921      	ldr	r1, [r4, #16]
 80029f8:	f000 fab4 	bl	8002f64 <memcpy>
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	81a3      	strh	r3, [r4, #12]
 8002a08:	6126      	str	r6, [r4, #16]
 8002a0a:	6165      	str	r5, [r4, #20]
 8002a0c:	443e      	add	r6, r7
 8002a0e:	1bed      	subs	r5, r5, r7
 8002a10:	6026      	str	r6, [r4, #0]
 8002a12:	60a5      	str	r5, [r4, #8]
 8002a14:	4646      	mov	r6, r8
 8002a16:	4546      	cmp	r6, r8
 8002a18:	bf28      	it	cs
 8002a1a:	4646      	movcs	r6, r8
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	4649      	mov	r1, r9
 8002a20:	6820      	ldr	r0, [r4, #0]
 8002a22:	f000 faaa 	bl	8002f7a <memmove>
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	1b9b      	subs	r3, r3, r6
 8002a2a:	60a3      	str	r3, [r4, #8]
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	441e      	add	r6, r3
 8002a30:	6026      	str	r6, [r4, #0]
 8002a32:	2000      	movs	r0, #0
 8002a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a38:	462a      	mov	r2, r5
 8002a3a:	f000 fb65 	bl	8003108 <_realloc_r>
 8002a3e:	4606      	mov	r6, r0
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1e1      	bne.n	8002a08 <__ssputs_r+0x70>
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	4650      	mov	r0, sl
 8002a48:	f000 fab2 	bl	8002fb0 <_free_r>
 8002a4c:	e7c7      	b.n	80029de <__ssputs_r+0x46>
	...

08002a50 <_svfiprintf_r>:
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b09d      	sub	sp, #116	; 0x74
 8002a56:	4680      	mov	r8, r0
 8002a58:	9303      	str	r3, [sp, #12]
 8002a5a:	898b      	ldrh	r3, [r1, #12]
 8002a5c:	061c      	lsls	r4, r3, #24
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4616      	mov	r6, r2
 8002a62:	d50f      	bpl.n	8002a84 <_svfiprintf_r+0x34>
 8002a64:	690b      	ldr	r3, [r1, #16]
 8002a66:	b96b      	cbnz	r3, 8002a84 <_svfiprintf_r+0x34>
 8002a68:	2140      	movs	r1, #64	; 0x40
 8002a6a:	f000 faef 	bl	800304c <_malloc_r>
 8002a6e:	6028      	str	r0, [r5, #0]
 8002a70:	6128      	str	r0, [r5, #16]
 8002a72:	b928      	cbnz	r0, 8002a80 <_svfiprintf_r+0x30>
 8002a74:	230c      	movs	r3, #12
 8002a76:	f8c8 3000 	str.w	r3, [r8]
 8002a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7e:	e0c5      	b.n	8002c0c <_svfiprintf_r+0x1bc>
 8002a80:	2340      	movs	r3, #64	; 0x40
 8002a82:	616b      	str	r3, [r5, #20]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
 8002a88:	2320      	movs	r3, #32
 8002a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a8e:	2330      	movs	r3, #48	; 0x30
 8002a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a94:	f04f 0b01 	mov.w	fp, #1
 8002a98:	4637      	mov	r7, r6
 8002a9a:	463c      	mov	r4, r7
 8002a9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d13c      	bne.n	8002b1e <_svfiprintf_r+0xce>
 8002aa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002aa8:	d00b      	beq.n	8002ac2 <_svfiprintf_r+0x72>
 8002aaa:	4653      	mov	r3, sl
 8002aac:	4632      	mov	r2, r6
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	f7ff ff71 	bl	8002998 <__ssputs_r>
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	f000 80a3 	beq.w	8002c02 <_svfiprintf_r+0x1b2>
 8002abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002abe:	4453      	add	r3, sl
 8002ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac2:	783b      	ldrb	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 809c 	beq.w	8002c02 <_svfiprintf_r+0x1b2>
 8002aca:	2300      	movs	r3, #0
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	9307      	str	r3, [sp, #28]
 8002ad4:	9205      	str	r2, [sp, #20]
 8002ad6:	9306      	str	r3, [sp, #24]
 8002ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002adc:	931a      	str	r3, [sp, #104]	; 0x68
 8002ade:	2205      	movs	r2, #5
 8002ae0:	7821      	ldrb	r1, [r4, #0]
 8002ae2:	4850      	ldr	r0, [pc, #320]	; (8002c24 <_svfiprintf_r+0x1d4>)
 8002ae4:	f7fd fb8c 	bl	8000200 <memchr>
 8002ae8:	1c67      	adds	r7, r4, #1
 8002aea:	9b04      	ldr	r3, [sp, #16]
 8002aec:	b9d8      	cbnz	r0, 8002b26 <_svfiprintf_r+0xd6>
 8002aee:	06d9      	lsls	r1, r3, #27
 8002af0:	bf44      	itt	mi
 8002af2:	2220      	movmi	r2, #32
 8002af4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002af8:	071a      	lsls	r2, r3, #28
 8002afa:	bf44      	itt	mi
 8002afc:	222b      	movmi	r2, #43	; 0x2b
 8002afe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b02:	7822      	ldrb	r2, [r4, #0]
 8002b04:	2a2a      	cmp	r2, #42	; 0x2a
 8002b06:	d016      	beq.n	8002b36 <_svfiprintf_r+0xe6>
 8002b08:	9a07      	ldr	r2, [sp, #28]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	4627      	mov	r7, r4
 8002b10:	3401      	adds	r4, #1
 8002b12:	783b      	ldrb	r3, [r7, #0]
 8002b14:	3b30      	subs	r3, #48	; 0x30
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d951      	bls.n	8002bbe <_svfiprintf_r+0x16e>
 8002b1a:	b1c9      	cbz	r1, 8002b50 <_svfiprintf_r+0x100>
 8002b1c:	e011      	b.n	8002b42 <_svfiprintf_r+0xf2>
 8002b1e:	2b25      	cmp	r3, #37	; 0x25
 8002b20:	d0c0      	beq.n	8002aa4 <_svfiprintf_r+0x54>
 8002b22:	4627      	mov	r7, r4
 8002b24:	e7b9      	b.n	8002a9a <_svfiprintf_r+0x4a>
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <_svfiprintf_r+0x1d4>)
 8002b28:	1a80      	subs	r0, r0, r2
 8002b2a:	fa0b f000 	lsl.w	r0, fp, r0
 8002b2e:	4318      	orrs	r0, r3
 8002b30:	9004      	str	r0, [sp, #16]
 8002b32:	463c      	mov	r4, r7
 8002b34:	e7d3      	b.n	8002ade <_svfiprintf_r+0x8e>
 8002b36:	9a03      	ldr	r2, [sp, #12]
 8002b38:	1d11      	adds	r1, r2, #4
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	9103      	str	r1, [sp, #12]
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	db01      	blt.n	8002b46 <_svfiprintf_r+0xf6>
 8002b42:	9207      	str	r2, [sp, #28]
 8002b44:	e004      	b.n	8002b50 <_svfiprintf_r+0x100>
 8002b46:	4252      	negs	r2, r2
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	9207      	str	r2, [sp, #28]
 8002b4e:	9304      	str	r3, [sp, #16]
 8002b50:	783b      	ldrb	r3, [r7, #0]
 8002b52:	2b2e      	cmp	r3, #46	; 0x2e
 8002b54:	d10e      	bne.n	8002b74 <_svfiprintf_r+0x124>
 8002b56:	787b      	ldrb	r3, [r7, #1]
 8002b58:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5a:	f107 0101 	add.w	r1, r7, #1
 8002b5e:	d132      	bne.n	8002bc6 <_svfiprintf_r+0x176>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	9203      	str	r2, [sp, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bfb8      	it	lt
 8002b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b70:	3702      	adds	r7, #2
 8002b72:	9305      	str	r3, [sp, #20]
 8002b74:	4c2c      	ldr	r4, [pc, #176]	; (8002c28 <_svfiprintf_r+0x1d8>)
 8002b76:	7839      	ldrb	r1, [r7, #0]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fd fb40 	bl	8000200 <memchr>
 8002b80:	b138      	cbz	r0, 8002b92 <_svfiprintf_r+0x142>
 8002b82:	2340      	movs	r3, #64	; 0x40
 8002b84:	1b00      	subs	r0, r0, r4
 8002b86:	fa03 f000 	lsl.w	r0, r3, r0
 8002b8a:	9b04      	ldr	r3, [sp, #16]
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	3701      	adds	r7, #1
 8002b92:	7839      	ldrb	r1, [r7, #0]
 8002b94:	4825      	ldr	r0, [pc, #148]	; (8002c2c <_svfiprintf_r+0x1dc>)
 8002b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	1c7e      	adds	r6, r7, #1
 8002b9e:	f7fd fb2f 	bl	8000200 <memchr>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d035      	beq.n	8002c12 <_svfiprintf_r+0x1c2>
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <_svfiprintf_r+0x1e0>)
 8002ba8:	b9fb      	cbnz	r3, 8002bea <_svfiprintf_r+0x19a>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	9303      	str	r3, [sp, #12]
 8002bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb8:	444b      	add	r3, r9
 8002bba:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbc:	e76c      	b.n	8002a98 <_svfiprintf_r+0x48>
 8002bbe:	fb00 3202 	mla	r2, r0, r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	e7a3      	b.n	8002b0e <_svfiprintf_r+0xbe>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9305      	str	r3, [sp, #20]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	240a      	movs	r4, #10
 8002bce:	460f      	mov	r7, r1
 8002bd0:	3101      	adds	r1, #1
 8002bd2:	783a      	ldrb	r2, [r7, #0]
 8002bd4:	3a30      	subs	r2, #48	; 0x30
 8002bd6:	2a09      	cmp	r2, #9
 8002bd8:	d903      	bls.n	8002be2 <_svfiprintf_r+0x192>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ca      	beq.n	8002b74 <_svfiprintf_r+0x124>
 8002bde:	9005      	str	r0, [sp, #20]
 8002be0:	e7c8      	b.n	8002b74 <_svfiprintf_r+0x124>
 8002be2:	fb04 2000 	mla	r0, r4, r0, r2
 8002be6:	2301      	movs	r3, #1
 8002be8:	e7f1      	b.n	8002bce <_svfiprintf_r+0x17e>
 8002bea:	ab03      	add	r3, sp, #12
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	462a      	mov	r2, r5
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_svfiprintf_r+0x1e4>)
 8002bf2:	a904      	add	r1, sp, #16
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	f3af 8000 	nop.w
 8002bfa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bfe:	4681      	mov	r9, r0
 8002c00:	d1d9      	bne.n	8002bb6 <_svfiprintf_r+0x166>
 8002c02:	89ab      	ldrh	r3, [r5, #12]
 8002c04:	065b      	lsls	r3, r3, #25
 8002c06:	f53f af38 	bmi.w	8002a7a <_svfiprintf_r+0x2a>
 8002c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c0c:	b01d      	add	sp, #116	; 0x74
 8002c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c12:	ab03      	add	r3, sp, #12
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	462a      	mov	r2, r5
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <_svfiprintf_r+0x1e4>)
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	f000 f881 	bl	8002d24 <_printf_i>
 8002c22:	e7ea      	b.n	8002bfa <_svfiprintf_r+0x1aa>
 8002c24:	080031f8 	.word	0x080031f8
 8002c28:	080031fe 	.word	0x080031fe
 8002c2c:	08003202 	.word	0x08003202
 8002c30:	00000000 	.word	0x00000000
 8002c34:	08002999 	.word	0x08002999

08002c38 <_printf_common>:
 8002c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	461f      	mov	r7, r3
 8002c40:	688a      	ldr	r2, [r1, #8]
 8002c42:	690b      	ldr	r3, [r1, #16]
 8002c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bfb8      	it	lt
 8002c4c:	4613      	movlt	r3, r2
 8002c4e:	f8c9 3000 	str.w	r3, [r9]
 8002c52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c56:	4606      	mov	r6, r0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	b112      	cbz	r2, 8002c62 <_printf_common+0x2a>
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c9 3000 	str.w	r3, [r9]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	0699      	lsls	r1, r3, #26
 8002c66:	bf42      	ittt	mi
 8002c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c6c:	3302      	addmi	r3, #2
 8002c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c72:	6825      	ldr	r5, [r4, #0]
 8002c74:	f015 0506 	ands.w	r5, r5, #6
 8002c78:	d107      	bne.n	8002c8a <_printf_common+0x52>
 8002c7a:	f104 0a19 	add.w	sl, r4, #25
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	f8d9 2000 	ldr.w	r2, [r9]
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	429d      	cmp	r5, r3
 8002c88:	db29      	blt.n	8002cde <_printf_common+0xa6>
 8002c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	3300      	adds	r3, #0
 8002c92:	bf18      	it	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	0692      	lsls	r2, r2, #26
 8002c98:	d42e      	bmi.n	8002cf8 <_printf_common+0xc0>
 8002c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c9e:	4639      	mov	r1, r7
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	47c0      	blx	r8
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d021      	beq.n	8002cec <_printf_common+0xb4>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	68e5      	ldr	r5, [r4, #12]
 8002cac:	f8d9 2000 	ldr.w	r2, [r9]
 8002cb0:	f003 0306 	and.w	r3, r3, #6
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	bf08      	it	eq
 8002cb8:	1aad      	subeq	r5, r5, r2
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	6922      	ldr	r2, [r4, #16]
 8002cbe:	bf0c      	ite	eq
 8002cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cc4:	2500      	movne	r5, #0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bfc4      	itt	gt
 8002cca:	1a9b      	subgt	r3, r3, r2
 8002ccc:	18ed      	addgt	r5, r5, r3
 8002cce:	f04f 0900 	mov.w	r9, #0
 8002cd2:	341a      	adds	r4, #26
 8002cd4:	454d      	cmp	r5, r9
 8002cd6:	d11b      	bne.n	8002d10 <_printf_common+0xd8>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4652      	mov	r2, sl
 8002ce2:	4639      	mov	r1, r7
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	47c0      	blx	r8
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d103      	bne.n	8002cf4 <_printf_common+0xbc>
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf4:	3501      	adds	r5, #1
 8002cf6:	e7c2      	b.n	8002c7e <_printf_common+0x46>
 8002cf8:	18e1      	adds	r1, r4, r3
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	2030      	movs	r0, #48	; 0x30
 8002cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d02:	4422      	add	r2, r4
 8002d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	e7c4      	b.n	8002c9a <_printf_common+0x62>
 8002d10:	2301      	movs	r3, #1
 8002d12:	4622      	mov	r2, r4
 8002d14:	4639      	mov	r1, r7
 8002d16:	4630      	mov	r0, r6
 8002d18:	47c0      	blx	r8
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d0e6      	beq.n	8002cec <_printf_common+0xb4>
 8002d1e:	f109 0901 	add.w	r9, r9, #1
 8002d22:	e7d7      	b.n	8002cd4 <_printf_common+0x9c>

08002d24 <_printf_i>:
 8002d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d28:	4617      	mov	r7, r2
 8002d2a:	7e0a      	ldrb	r2, [r1, #24]
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	2a6e      	cmp	r2, #110	; 0x6e
 8002d30:	4698      	mov	r8, r3
 8002d32:	4606      	mov	r6, r0
 8002d34:	460c      	mov	r4, r1
 8002d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d38:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002d3c:	f000 80bc 	beq.w	8002eb8 <_printf_i+0x194>
 8002d40:	d81a      	bhi.n	8002d78 <_printf_i+0x54>
 8002d42:	2a63      	cmp	r2, #99	; 0x63
 8002d44:	d02e      	beq.n	8002da4 <_printf_i+0x80>
 8002d46:	d80a      	bhi.n	8002d5e <_printf_i+0x3a>
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	f000 80c8 	beq.w	8002ede <_printf_i+0x1ba>
 8002d4e:	2a58      	cmp	r2, #88	; 0x58
 8002d50:	f000 808a 	beq.w	8002e68 <_printf_i+0x144>
 8002d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d5c:	e02a      	b.n	8002db4 <_printf_i+0x90>
 8002d5e:	2a64      	cmp	r2, #100	; 0x64
 8002d60:	d001      	beq.n	8002d66 <_printf_i+0x42>
 8002d62:	2a69      	cmp	r2, #105	; 0x69
 8002d64:	d1f6      	bne.n	8002d54 <_printf_i+0x30>
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d6e:	d023      	beq.n	8002db8 <_printf_i+0x94>
 8002d70:	1d11      	adds	r1, r2, #4
 8002d72:	6019      	str	r1, [r3, #0]
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	e027      	b.n	8002dc8 <_printf_i+0xa4>
 8002d78:	2a73      	cmp	r2, #115	; 0x73
 8002d7a:	f000 80b4 	beq.w	8002ee6 <_printf_i+0x1c2>
 8002d7e:	d808      	bhi.n	8002d92 <_printf_i+0x6e>
 8002d80:	2a6f      	cmp	r2, #111	; 0x6f
 8002d82:	d02a      	beq.n	8002dda <_printf_i+0xb6>
 8002d84:	2a70      	cmp	r2, #112	; 0x70
 8002d86:	d1e5      	bne.n	8002d54 <_printf_i+0x30>
 8002d88:	680a      	ldr	r2, [r1, #0]
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	600a      	str	r2, [r1, #0]
 8002d90:	e003      	b.n	8002d9a <_printf_i+0x76>
 8002d92:	2a75      	cmp	r2, #117	; 0x75
 8002d94:	d021      	beq.n	8002dda <_printf_i+0xb6>
 8002d96:	2a78      	cmp	r2, #120	; 0x78
 8002d98:	d1dc      	bne.n	8002d54 <_printf_i+0x30>
 8002d9a:	2278      	movs	r2, #120	; 0x78
 8002d9c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002da0:	496e      	ldr	r1, [pc, #440]	; (8002f5c <_printf_i+0x238>)
 8002da2:	e064      	b.n	8002e6e <_printf_i+0x14a>
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002daa:	1d11      	adds	r1, r2, #4
 8002dac:	6019      	str	r1, [r3, #0]
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0a3      	b.n	8002f00 <_printf_i+0x1dc>
 8002db8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002dbc:	f102 0104 	add.w	r1, r2, #4
 8002dc0:	6019      	str	r1, [r3, #0]
 8002dc2:	d0d7      	beq.n	8002d74 <_printf_i+0x50>
 8002dc4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	da03      	bge.n	8002dd4 <_printf_i+0xb0>
 8002dcc:	222d      	movs	r2, #45	; 0x2d
 8002dce:	425b      	negs	r3, r3
 8002dd0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dd4:	4962      	ldr	r1, [pc, #392]	; (8002f60 <_printf_i+0x23c>)
 8002dd6:	220a      	movs	r2, #10
 8002dd8:	e017      	b.n	8002e0a <_printf_i+0xe6>
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002de2:	d003      	beq.n	8002dec <_printf_i+0xc8>
 8002de4:	1d08      	adds	r0, r1, #4
 8002de6:	6018      	str	r0, [r3, #0]
 8002de8:	680b      	ldr	r3, [r1, #0]
 8002dea:	e006      	b.n	8002dfa <_printf_i+0xd6>
 8002dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002df0:	f101 0004 	add.w	r0, r1, #4
 8002df4:	6018      	str	r0, [r3, #0]
 8002df6:	d0f7      	beq.n	8002de8 <_printf_i+0xc4>
 8002df8:	880b      	ldrh	r3, [r1, #0]
 8002dfa:	4959      	ldr	r1, [pc, #356]	; (8002f60 <_printf_i+0x23c>)
 8002dfc:	2a6f      	cmp	r2, #111	; 0x6f
 8002dfe:	bf14      	ite	ne
 8002e00:	220a      	movne	r2, #10
 8002e02:	2208      	moveq	r2, #8
 8002e04:	2000      	movs	r0, #0
 8002e06:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002e0a:	6865      	ldr	r5, [r4, #4]
 8002e0c:	60a5      	str	r5, [r4, #8]
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	f2c0 809c 	blt.w	8002f4c <_printf_i+0x228>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	f020 0004 	bic.w	r0, r0, #4
 8002e1a:	6020      	str	r0, [r4, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d13f      	bne.n	8002ea0 <_printf_i+0x17c>
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	f040 8095 	bne.w	8002f50 <_printf_i+0x22c>
 8002e26:	4675      	mov	r5, lr
 8002e28:	2a08      	cmp	r2, #8
 8002e2a:	d10b      	bne.n	8002e44 <_printf_i+0x120>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	07da      	lsls	r2, r3, #31
 8002e30:	d508      	bpl.n	8002e44 <_printf_i+0x120>
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	6862      	ldr	r2, [r4, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	bfde      	ittt	le
 8002e3a:	2330      	movle	r3, #48	; 0x30
 8002e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e44:	ebae 0305 	sub.w	r3, lr, r5
 8002e48:	6123      	str	r3, [r4, #16]
 8002e4a:	f8cd 8000 	str.w	r8, [sp]
 8002e4e:	463b      	mov	r3, r7
 8002e50:	aa03      	add	r2, sp, #12
 8002e52:	4621      	mov	r1, r4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7ff feef 	bl	8002c38 <_printf_common>
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d155      	bne.n	8002f0a <_printf_i+0x1e6>
 8002e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e62:	b005      	add	sp, #20
 8002e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e68:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e6c:	493c      	ldr	r1, [pc, #240]	; (8002f60 <_printf_i+0x23c>)
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e76:	f100 0504 	add.w	r5, r0, #4
 8002e7a:	601d      	str	r5, [r3, #0]
 8002e7c:	d001      	beq.n	8002e82 <_printf_i+0x15e>
 8002e7e:	6803      	ldr	r3, [r0, #0]
 8002e80:	e002      	b.n	8002e88 <_printf_i+0x164>
 8002e82:	0655      	lsls	r5, r2, #25
 8002e84:	d5fb      	bpl.n	8002e7e <_printf_i+0x15a>
 8002e86:	8803      	ldrh	r3, [r0, #0]
 8002e88:	07d0      	lsls	r0, r2, #31
 8002e8a:	bf44      	itt	mi
 8002e8c:	f042 0220 	orrmi.w	r2, r2, #32
 8002e90:	6022      	strmi	r2, [r4, #0]
 8002e92:	b91b      	cbnz	r3, 8002e9c <_printf_i+0x178>
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	f022 0220 	bic.w	r2, r2, #32
 8002e9a:	6022      	str	r2, [r4, #0]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	e7b1      	b.n	8002e04 <_printf_i+0xe0>
 8002ea0:	4675      	mov	r5, lr
 8002ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1f5      	bne.n	8002ea2 <_printf_i+0x17e>
 8002eb6:	e7b7      	b.n	8002e28 <_printf_i+0x104>
 8002eb8:	6808      	ldr	r0, [r1, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	6949      	ldr	r1, [r1, #20]
 8002ebe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ec2:	d004      	beq.n	8002ece <_printf_i+0x1aa>
 8002ec4:	1d10      	adds	r0, r2, #4
 8002ec6:	6018      	str	r0, [r3, #0]
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	6019      	str	r1, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <_printf_i+0x1ba>
 8002ece:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ed2:	f102 0004 	add.w	r0, r2, #4
 8002ed6:	6018      	str	r0, [r3, #0]
 8002ed8:	6813      	ldr	r3, [r2, #0]
 8002eda:	d0f6      	beq.n	8002eca <_printf_i+0x1a6>
 8002edc:	8019      	strh	r1, [r3, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	4675      	mov	r5, lr
 8002ee4:	e7b1      	b.n	8002e4a <_printf_i+0x126>
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	1d11      	adds	r1, r2, #4
 8002eea:	6019      	str	r1, [r3, #0]
 8002eec:	6815      	ldr	r5, [r2, #0]
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7fd f984 	bl	8000200 <memchr>
 8002ef8:	b108      	cbz	r0, 8002efe <_printf_i+0x1da>
 8002efa:	1b40      	subs	r0, r0, r5
 8002efc:	6060      	str	r0, [r4, #4]
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	6123      	str	r3, [r4, #16]
 8002f02:	2300      	movs	r3, #0
 8002f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f08:	e79f      	b.n	8002e4a <_printf_i+0x126>
 8002f0a:	6923      	ldr	r3, [r4, #16]
 8002f0c:	462a      	mov	r2, r5
 8002f0e:	4639      	mov	r1, r7
 8002f10:	4630      	mov	r0, r6
 8002f12:	47c0      	blx	r8
 8002f14:	3001      	adds	r0, #1
 8002f16:	d0a2      	beq.n	8002e5e <_printf_i+0x13a>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	079b      	lsls	r3, r3, #30
 8002f1c:	d507      	bpl.n	8002f2e <_printf_i+0x20a>
 8002f1e:	2500      	movs	r5, #0
 8002f20:	f104 0919 	add.w	r9, r4, #25
 8002f24:	68e3      	ldr	r3, [r4, #12]
 8002f26:	9a03      	ldr	r2, [sp, #12]
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	429d      	cmp	r5, r3
 8002f2c:	db05      	blt.n	8002f3a <_printf_i+0x216>
 8002f2e:	68e0      	ldr	r0, [r4, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	4298      	cmp	r0, r3
 8002f34:	bfb8      	it	lt
 8002f36:	4618      	movlt	r0, r3
 8002f38:	e793      	b.n	8002e62 <_printf_i+0x13e>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	464a      	mov	r2, r9
 8002f3e:	4639      	mov	r1, r7
 8002f40:	4630      	mov	r0, r6
 8002f42:	47c0      	blx	r8
 8002f44:	3001      	adds	r0, #1
 8002f46:	d08a      	beq.n	8002e5e <_printf_i+0x13a>
 8002f48:	3501      	adds	r5, #1
 8002f4a:	e7eb      	b.n	8002f24 <_printf_i+0x200>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1a7      	bne.n	8002ea0 <_printf_i+0x17c>
 8002f50:	780b      	ldrb	r3, [r1, #0]
 8002f52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f5a:	e765      	b.n	8002e28 <_printf_i+0x104>
 8002f5c:	0800321a 	.word	0x0800321a
 8002f60:	08003209 	.word	0x08003209

08002f64 <memcpy>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	1e43      	subs	r3, r0, #1
 8002f68:	440a      	add	r2, r1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d100      	bne.n	8002f70 <memcpy+0xc>
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f78:	e7f7      	b.n	8002f6a <memcpy+0x6>

08002f7a <memmove>:
 8002f7a:	4288      	cmp	r0, r1
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	eb01 0302 	add.w	r3, r1, r2
 8002f82:	d803      	bhi.n	8002f8c <memmove+0x12>
 8002f84:	1e42      	subs	r2, r0, #1
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d10c      	bne.n	8002fa4 <memmove+0x2a>
 8002f8a:	bd10      	pop	{r4, pc}
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	d2f9      	bcs.n	8002f84 <memmove+0xa>
 8002f90:	1881      	adds	r1, r0, r2
 8002f92:	1ad2      	subs	r2, r2, r3
 8002f94:	42d3      	cmn	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memmove+0x20>
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002fa2:	e7f7      	b.n	8002f94 <memmove+0x1a>
 8002fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fac:	e7eb      	b.n	8002f86 <memmove+0xc>
	...

08002fb0 <_free_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d045      	beq.n	8003044 <_free_r+0x94>
 8002fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fbc:	1f0c      	subs	r4, r1, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfb8      	it	lt
 8002fc2:	18e4      	addlt	r4, r4, r3
 8002fc4:	f000 f8d6 	bl	8003174 <__malloc_lock>
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <_free_r+0x98>)
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	b933      	cbnz	r3, 8002fde <_free_r+0x2e>
 8002fd0:	6063      	str	r3, [r4, #4]
 8002fd2:	6014      	str	r4, [r2, #0]
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fda:	f000 b8cc 	b.w	8003176 <__malloc_unlock>
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	d90c      	bls.n	8002ffc <_free_r+0x4c>
 8002fe2:	6821      	ldr	r1, [r4, #0]
 8002fe4:	1862      	adds	r2, r4, r1
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	bf04      	itt	eq
 8002fea:	681a      	ldreq	r2, [r3, #0]
 8002fec:	685b      	ldreq	r3, [r3, #4]
 8002fee:	6063      	str	r3, [r4, #4]
 8002ff0:	bf04      	itt	eq
 8002ff2:	1852      	addeq	r2, r2, r1
 8002ff4:	6022      	streq	r2, [r4, #0]
 8002ff6:	6004      	str	r4, [r0, #0]
 8002ff8:	e7ec      	b.n	8002fd4 <_free_r+0x24>
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	b10a      	cbz	r2, 8003004 <_free_r+0x54>
 8003000:	42a2      	cmp	r2, r4
 8003002:	d9fa      	bls.n	8002ffa <_free_r+0x4a>
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	1858      	adds	r0, r3, r1
 8003008:	42a0      	cmp	r0, r4
 800300a:	d10b      	bne.n	8003024 <_free_r+0x74>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	4401      	add	r1, r0
 8003010:	1858      	adds	r0, r3, r1
 8003012:	4282      	cmp	r2, r0
 8003014:	6019      	str	r1, [r3, #0]
 8003016:	d1dd      	bne.n	8002fd4 <_free_r+0x24>
 8003018:	6810      	ldr	r0, [r2, #0]
 800301a:	6852      	ldr	r2, [r2, #4]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	4401      	add	r1, r0
 8003020:	6019      	str	r1, [r3, #0]
 8003022:	e7d7      	b.n	8002fd4 <_free_r+0x24>
 8003024:	d902      	bls.n	800302c <_free_r+0x7c>
 8003026:	230c      	movs	r3, #12
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	e7d3      	b.n	8002fd4 <_free_r+0x24>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	1821      	adds	r1, r4, r0
 8003030:	428a      	cmp	r2, r1
 8003032:	bf04      	itt	eq
 8003034:	6811      	ldreq	r1, [r2, #0]
 8003036:	6852      	ldreq	r2, [r2, #4]
 8003038:	6062      	str	r2, [r4, #4]
 800303a:	bf04      	itt	eq
 800303c:	1809      	addeq	r1, r1, r0
 800303e:	6021      	streq	r1, [r4, #0]
 8003040:	605c      	str	r4, [r3, #4]
 8003042:	e7c7      	b.n	8002fd4 <_free_r+0x24>
 8003044:	bd38      	pop	{r3, r4, r5, pc}
 8003046:	bf00      	nop
 8003048:	20000094 	.word	0x20000094

0800304c <_malloc_r>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	1ccd      	adds	r5, r1, #3
 8003050:	f025 0503 	bic.w	r5, r5, #3
 8003054:	3508      	adds	r5, #8
 8003056:	2d0c      	cmp	r5, #12
 8003058:	bf38      	it	cc
 800305a:	250c      	movcc	r5, #12
 800305c:	2d00      	cmp	r5, #0
 800305e:	4606      	mov	r6, r0
 8003060:	db01      	blt.n	8003066 <_malloc_r+0x1a>
 8003062:	42a9      	cmp	r1, r5
 8003064:	d903      	bls.n	800306e <_malloc_r+0x22>
 8003066:	230c      	movs	r3, #12
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	2000      	movs	r0, #0
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	f000 f881 	bl	8003174 <__malloc_lock>
 8003072:	4a23      	ldr	r2, [pc, #140]	; (8003100 <_malloc_r+0xb4>)
 8003074:	6814      	ldr	r4, [r2, #0]
 8003076:	4621      	mov	r1, r4
 8003078:	b991      	cbnz	r1, 80030a0 <_malloc_r+0x54>
 800307a:	4c22      	ldr	r4, [pc, #136]	; (8003104 <_malloc_r+0xb8>)
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	b91b      	cbnz	r3, 8003088 <_malloc_r+0x3c>
 8003080:	4630      	mov	r0, r6
 8003082:	f000 f867 	bl	8003154 <_sbrk_r>
 8003086:	6020      	str	r0, [r4, #0]
 8003088:	4629      	mov	r1, r5
 800308a:	4630      	mov	r0, r6
 800308c:	f000 f862 	bl	8003154 <_sbrk_r>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d126      	bne.n	80030e2 <_malloc_r+0x96>
 8003094:	230c      	movs	r3, #12
 8003096:	6033      	str	r3, [r6, #0]
 8003098:	4630      	mov	r0, r6
 800309a:	f000 f86c 	bl	8003176 <__malloc_unlock>
 800309e:	e7e4      	b.n	800306a <_malloc_r+0x1e>
 80030a0:	680b      	ldr	r3, [r1, #0]
 80030a2:	1b5b      	subs	r3, r3, r5
 80030a4:	d41a      	bmi.n	80030dc <_malloc_r+0x90>
 80030a6:	2b0b      	cmp	r3, #11
 80030a8:	d90f      	bls.n	80030ca <_malloc_r+0x7e>
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	50cd      	str	r5, [r1, r3]
 80030ae:	18cc      	adds	r4, r1, r3
 80030b0:	4630      	mov	r0, r6
 80030b2:	f000 f860 	bl	8003176 <__malloc_unlock>
 80030b6:	f104 000b 	add.w	r0, r4, #11
 80030ba:	1d23      	adds	r3, r4, #4
 80030bc:	f020 0007 	bic.w	r0, r0, #7
 80030c0:	1ac3      	subs	r3, r0, r3
 80030c2:	d01b      	beq.n	80030fc <_malloc_r+0xb0>
 80030c4:	425a      	negs	r2, r3
 80030c6:	50e2      	str	r2, [r4, r3]
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	428c      	cmp	r4, r1
 80030cc:	bf0d      	iteet	eq
 80030ce:	6863      	ldreq	r3, [r4, #4]
 80030d0:	684b      	ldrne	r3, [r1, #4]
 80030d2:	6063      	strne	r3, [r4, #4]
 80030d4:	6013      	streq	r3, [r2, #0]
 80030d6:	bf18      	it	ne
 80030d8:	460c      	movne	r4, r1
 80030da:	e7e9      	b.n	80030b0 <_malloc_r+0x64>
 80030dc:	460c      	mov	r4, r1
 80030de:	6849      	ldr	r1, [r1, #4]
 80030e0:	e7ca      	b.n	8003078 <_malloc_r+0x2c>
 80030e2:	1cc4      	adds	r4, r0, #3
 80030e4:	f024 0403 	bic.w	r4, r4, #3
 80030e8:	42a0      	cmp	r0, r4
 80030ea:	d005      	beq.n	80030f8 <_malloc_r+0xac>
 80030ec:	1a21      	subs	r1, r4, r0
 80030ee:	4630      	mov	r0, r6
 80030f0:	f000 f830 	bl	8003154 <_sbrk_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	d0cd      	beq.n	8003094 <_malloc_r+0x48>
 80030f8:	6025      	str	r5, [r4, #0]
 80030fa:	e7d9      	b.n	80030b0 <_malloc_r+0x64>
 80030fc:	bd70      	pop	{r4, r5, r6, pc}
 80030fe:	bf00      	nop
 8003100:	20000094 	.word	0x20000094
 8003104:	20000098 	.word	0x20000098

08003108 <_realloc_r>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	4607      	mov	r7, r0
 800310c:	4614      	mov	r4, r2
 800310e:	460e      	mov	r6, r1
 8003110:	b921      	cbnz	r1, 800311c <_realloc_r+0x14>
 8003112:	4611      	mov	r1, r2
 8003114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003118:	f7ff bf98 	b.w	800304c <_malloc_r>
 800311c:	b922      	cbnz	r2, 8003128 <_realloc_r+0x20>
 800311e:	f7ff ff47 	bl	8002fb0 <_free_r>
 8003122:	4625      	mov	r5, r4
 8003124:	4628      	mov	r0, r5
 8003126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003128:	f000 f826 	bl	8003178 <_malloc_usable_size_r>
 800312c:	4284      	cmp	r4, r0
 800312e:	d90f      	bls.n	8003150 <_realloc_r+0x48>
 8003130:	4621      	mov	r1, r4
 8003132:	4638      	mov	r0, r7
 8003134:	f7ff ff8a 	bl	800304c <_malloc_r>
 8003138:	4605      	mov	r5, r0
 800313a:	2800      	cmp	r0, #0
 800313c:	d0f2      	beq.n	8003124 <_realloc_r+0x1c>
 800313e:	4631      	mov	r1, r6
 8003140:	4622      	mov	r2, r4
 8003142:	f7ff ff0f 	bl	8002f64 <memcpy>
 8003146:	4631      	mov	r1, r6
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff31 	bl	8002fb0 <_free_r>
 800314e:	e7e9      	b.n	8003124 <_realloc_r+0x1c>
 8003150:	4635      	mov	r5, r6
 8003152:	e7e7      	b.n	8003124 <_realloc_r+0x1c>

08003154 <_sbrk_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4c06      	ldr	r4, [pc, #24]	; (8003170 <_sbrk_r+0x1c>)
 8003158:	2300      	movs	r3, #0
 800315a:	4605      	mov	r5, r0
 800315c:	4608      	mov	r0, r1
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	f000 f814 	bl	800318c <_sbrk>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d102      	bne.n	800316e <_sbrk_r+0x1a>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	b103      	cbz	r3, 800316e <_sbrk_r+0x1a>
 800316c:	602b      	str	r3, [r5, #0]
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	200001a8 	.word	0x200001a8

08003174 <__malloc_lock>:
 8003174:	4770      	bx	lr

08003176 <__malloc_unlock>:
 8003176:	4770      	bx	lr

08003178 <_malloc_usable_size_r>:
 8003178:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800317c:	2800      	cmp	r0, #0
 800317e:	f1a0 0004 	sub.w	r0, r0, #4
 8003182:	bfbc      	itt	lt
 8003184:	580b      	ldrlt	r3, [r1, r0]
 8003186:	18c0      	addlt	r0, r0, r3
 8003188:	4770      	bx	lr
	...

0800318c <_sbrk>:
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <_sbrk+0x14>)
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	4602      	mov	r2, r0
 8003192:	b909      	cbnz	r1, 8003198 <_sbrk+0xc>
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <_sbrk+0x18>)
 8003196:	6019      	str	r1, [r3, #0]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	4402      	add	r2, r0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	4770      	bx	lr
 80031a0:	2000009c 	.word	0x2000009c
 80031a4:	200001ac 	.word	0x200001ac

080031a8 <_init>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr

080031b4 <_fini>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr
