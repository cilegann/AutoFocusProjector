
ultrasonic_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003864  08003864  00013864  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          0000018c  20000078  20000078  00020078  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000204  20000204  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014137  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002639  00000000  00000000  000341db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006a69  00000000  00000000  00036814  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000053ec  00000000  00000000  0003e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003db8  00000000  00000000  00043c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000479fc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002124  00000000  00000000  00047a78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800384c 	.word	0x0800384c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800384c 	.word	0x0800384c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b97a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	468c      	mov	ip, r1
 8000bca:	460d      	mov	r5, r1
 8000bcc:	4604      	mov	r4, r0
 8000bce:	9e08      	ldr	r6, [sp, #32]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d151      	bne.n	8000c78 <__udivmoddi4+0xb4>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d96d      	bls.n	8000cb6 <__udivmoddi4+0xf2>
 8000bda:	fab2 fe82 	clz	lr, r2
 8000bde:	f1be 0f00 	cmp.w	lr, #0
 8000be2:	d00b      	beq.n	8000bfc <__udivmoddi4+0x38>
 8000be4:	f1ce 0c20 	rsb	ip, lr, #32
 8000be8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bec:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bf0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bf4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bf8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bfc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c00:	0c25      	lsrs	r5, r4, #16
 8000c02:	fbbc f8fa 	udiv	r8, ip, sl
 8000c06:	fa1f f987 	uxth.w	r9, r7
 8000c0a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c0e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c12:	fb08 f309 	mul.w	r3, r8, r9
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x6c>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c20:	f080 8123 	bcs.w	8000e6a <__udivmoddi4+0x2a6>
 8000c24:	42ab      	cmp	r3, r5
 8000c26:	f240 8120 	bls.w	8000e6a <__udivmoddi4+0x2a6>
 8000c2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2e:	443d      	add	r5, r7
 8000c30:	1aed      	subs	r5, r5, r3
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c38:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c40:	fb00 f909 	mul.w	r9, r0, r9
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x98>
 8000c48:	19e4      	adds	r4, r4, r7
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 810a 	bcs.w	8000e66 <__udivmoddi4+0x2a2>
 8000c52:	45a1      	cmp	r9, r4
 8000c54:	f240 8107 	bls.w	8000e66 <__udivmoddi4+0x2a2>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	eba4 0409 	sub.w	r4, r4, r9
 8000c60:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c64:	2100      	movs	r1, #0
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d061      	beq.n	8000d2e <__udivmoddi4+0x16a>
 8000c6a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c6e:	2300      	movs	r3, #0
 8000c70:	6034      	str	r4, [r6, #0]
 8000c72:	6073      	str	r3, [r6, #4]
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0xc8>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d054      	beq.n	8000d2a <__udivmoddi4+0x166>
 8000c80:	2100      	movs	r1, #0
 8000c82:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c86:	4608      	mov	r0, r1
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	fab3 f183 	clz	r1, r3
 8000c90:	2900      	cmp	r1, #0
 8000c92:	f040 808e 	bne.w	8000db2 <__udivmoddi4+0x1ee>
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xdc>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2d0>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	46ac      	mov	ip, r5
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d03f      	beq.n	8000d2e <__udivmoddi4+0x16a>
 8000cae:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	b912      	cbnz	r2, 8000cbe <__udivmoddi4+0xfa>
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cbe:	fab7 fe87 	clz	lr, r7
 8000cc2:	f1be 0f00 	cmp.w	lr, #0
 8000cc6:	d134      	bne.n	8000d32 <__udivmoddi4+0x16e>
 8000cc8:	1beb      	subs	r3, r5, r7
 8000cca:	0c3a      	lsrs	r2, r7, #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cd6:	0c25      	lsrs	r5, r4, #16
 8000cd8:	fb02 3318 	mls	r3, r2, r8, r3
 8000cdc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ce0:	fb0c f308 	mul.w	r3, ip, r8
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x134>
 8000ce8:	19ed      	adds	r5, r5, r7
 8000cea:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x132>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	f200 80d1 	bhi.w	8000e98 <__udivmoddi4+0x2d4>
 8000cf6:	4680      	mov	r8, r0
 8000cf8:	1aed      	subs	r5, r5, r3
 8000cfa:	b2a3      	uxth	r3, r4
 8000cfc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d00:	fb02 5510 	mls	r5, r2, r0, r5
 8000d04:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d08:	fb0c fc00 	mul.w	ip, ip, r0
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x15c>
 8000d10:	19e4      	adds	r4, r4, r7
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x15a>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	f200 80b8 	bhi.w	8000e8e <__udivmoddi4+0x2ca>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	eba4 040c 	sub.w	r4, r4, ip
 8000d24:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d28:	e79d      	b.n	8000c66 <__udivmoddi4+0xa2>
 8000d2a:	4631      	mov	r1, r6
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	f1ce 0420 	rsb	r4, lr, #32
 8000d36:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d3a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d3e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d42:	0c3a      	lsrs	r2, r7, #16
 8000d44:	fa25 f404 	lsr.w	r4, r5, r4
 8000d48:	ea48 0803 	orr.w	r8, r8, r3
 8000d4c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d50:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d54:	fb02 4411 	mls	r4, r2, r1, r4
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d60:	fb01 f30c 	mul.w	r3, r1, ip
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x1bc>
 8000d6c:	19ed      	adds	r5, r5, r7
 8000d6e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d72:	f080 808a 	bcs.w	8000e8a <__udivmoddi4+0x2c6>
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	f240 8087 	bls.w	8000e8a <__udivmoddi4+0x2c6>
 8000d7c:	3902      	subs	r1, #2
 8000d7e:	443d      	add	r5, r7
 8000d80:	1aeb      	subs	r3, r5, r3
 8000d82:	fa1f f588 	uxth.w	r5, r8
 8000d86:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d8a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d8e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d92:	fb00 f30c 	mul.w	r3, r0, ip
 8000d96:	42ab      	cmp	r3, r5
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1e6>
 8000d9a:	19ed      	adds	r5, r5, r7
 8000d9c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da0:	d26f      	bcs.n	8000e82 <__udivmoddi4+0x2be>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d96d      	bls.n	8000e82 <__udivmoddi4+0x2be>
 8000da6:	3802      	subs	r0, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	1aeb      	subs	r3, r5, r3
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	e78f      	b.n	8000cd2 <__udivmoddi4+0x10e>
 8000db2:	f1c1 0720 	rsb	r7, r1, #32
 8000db6:	fa22 f807 	lsr.w	r8, r2, r7
 8000dba:	408b      	lsls	r3, r1
 8000dbc:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc0:	ea48 0303 	orr.w	r3, r8, r3
 8000dc4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dcc:	40fd      	lsrs	r5, r7
 8000dce:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dd2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dd6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dda:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dde:	fa1f f883 	uxth.w	r8, r3
 8000de2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000de6:	fb09 f408 	mul.w	r4, r9, r8
 8000dea:	42ac      	cmp	r4, r5
 8000dec:	fa02 f201 	lsl.w	r2, r2, r1
 8000df0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x244>
 8000df6:	18ed      	adds	r5, r5, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d243      	bcs.n	8000e86 <__udivmoddi4+0x2c2>
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	d941      	bls.n	8000e86 <__udivmoddi4+0x2c2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	441d      	add	r5, r3
 8000e08:	1b2d      	subs	r5, r5, r4
 8000e0a:	fa1f fe8e 	uxth.w	lr, lr
 8000e0e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e12:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e16:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45a0      	cmp	r8, r4
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x26e>
 8000e22:	18e4      	adds	r4, r4, r3
 8000e24:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e28:	d229      	bcs.n	8000e7e <__udivmoddi4+0x2ba>
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d927      	bls.n	8000e7e <__udivmoddi4+0x2ba>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	441c      	add	r4, r3
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba4 0408 	sub.w	r4, r4, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	464d      	mov	r5, r9
 8000e44:	d315      	bcc.n	8000e72 <__udivmoddi4+0x2ae>
 8000e46:	d012      	beq.n	8000e6e <__udivmoddi4+0x2aa>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x29c>
 8000e4a:	ebba 030e 	subs.w	r3, sl, lr
 8000e4e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40cb      	lsrs	r3, r1
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	40cc      	lsrs	r4, r1
 8000e5c:	6037      	str	r7, [r6, #0]
 8000e5e:	6074      	str	r4, [r6, #4]
 8000e60:	2100      	movs	r1, #0
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	4618      	mov	r0, r3
 8000e68:	e6f8      	b.n	8000c5c <__udivmoddi4+0x98>
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	e6e0      	b.n	8000c30 <__udivmoddi4+0x6c>
 8000e6e:	45c2      	cmp	sl, r8
 8000e70:	d2ea      	bcs.n	8000e48 <__udivmoddi4+0x284>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb69 0503 	sbc.w	r5, r9, r3
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7e4      	b.n	8000e48 <__udivmoddi4+0x284>
 8000e7e:	4628      	mov	r0, r5
 8000e80:	e7d7      	b.n	8000e32 <__udivmoddi4+0x26e>
 8000e82:	4640      	mov	r0, r8
 8000e84:	e791      	b.n	8000daa <__udivmoddi4+0x1e6>
 8000e86:	4681      	mov	r9, r0
 8000e88:	e7be      	b.n	8000e08 <__udivmoddi4+0x244>
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	e778      	b.n	8000d80 <__udivmoddi4+0x1bc>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	e745      	b.n	8000d20 <__udivmoddi4+0x15c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xe6>
 8000e98:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9c:	443d      	add	r5, r7
 8000e9e:	e72b      	b.n	8000cf8 <__udivmoddi4+0x134>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_InitTick+0x3c>)
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_InitTick+0x40>)
{
 8000eaa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	7818      	ldrb	r0, [r3, #0]
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eb6:	6810      	ldr	r0, [r2, #0]
 8000eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ebc:	f000 f8a8 	bl	8001010 <HAL_SYSTICK_Config>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	b958      	cbnz	r0, 8000edc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec4:	2d0f      	cmp	r5, #15
 8000ec6:	d809      	bhi.n	8000edc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f85e 	bl	8000f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_InitTick+0x44>)
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	601d      	str	r5, [r3, #0]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_Init>:
{
 8000eec:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x30>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f82f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ffc8 	bl	8000ea4 <HAL_InitTick>
  HAL_MspInit();
 8000f14:	f001 febc 	bl	8002c90 <HAL_MspInit>
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x10>)
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_IncTick+0x14>)
 8000f24:	6811      	ldr	r1, [r2, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	440b      	add	r3, r1
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200000bc 	.word	0x200000bc
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <HAL_GetTick+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200000bc 	.word	0x200000bc

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fff6 	bl	8000f38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	bf1c      	itt	ne
 8000f50:	4b05      	ldrne	r3, [pc, #20]	; (8000f68 <HAL_Delay+0x24>)
 8000f52:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f56:	bf18      	it	ne
 8000f58:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	f7ff ffed 	bl	8000f38 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	4284      	cmp	r4, r0
 8000f62:	d8fa      	bhi.n	8000f5a <HAL_Delay+0x16>
  {
  }
}
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000

08000f6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f74:	041b      	lsls	r3, r3, #16
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f7c:	0200      	lsls	r0, r0, #8
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f86:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f88:	60d3      	str	r3, [r2, #12]
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b530      	push	{r4, r5, lr}
 8000f94:	68dc      	ldr	r4, [r3, #12]
 8000f96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	bf28      	it	cs
 8000fa4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 0501 	mov.w	r5, #1
 8000fac:	fa05 f303 	lsl.w	r3, r5, r3
 8000fb0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb4:	bf8c      	ite	hi
 8000fb6:	3c03      	subhi	r4, #3
 8000fb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fba:	4019      	ands	r1, r3
 8000fbc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbe:	fa05 f404 	lsl.w	r4, r5, r4
 8000fc2:	3c01      	subs	r4, #1
 8000fc4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fc6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	ea42 0201 	orr.w	r2, r2, r1
 8000fcc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	bfaf      	iteee	ge
 8000fd2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	f000 000f 	andlt.w	r0, r0, #15
 8000fda:	4b06      	ldrlt	r3, [pc, #24]	; (8000ff4 <HAL_NVIC_SetPriority+0x64>)
 8000fdc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	bfa5      	ittet	ge
 8000fe0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fe4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fec:	bd30      	pop	{r4, r5, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	e000ed14 	.word	0xe000ed14

08000ff8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ff8:	0942      	lsrs	r2, r0, #5
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f000 001f 	and.w	r0, r0, #31
 8001000:	fa03 f000 	lsl.w	r0, r3, r0
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <HAL_NVIC_EnableIRQ+0x14>)
 8001006:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	3801      	subs	r0, #1
 8001012:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001016:	d20a      	bcs.n	800102e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	21f0      	movs	r1, #240	; 0xf0
 8001020:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800103e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001040:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001042:	bf0c      	ite	eq
 8001044:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001048:	f022 0204 	bicne.w	r2, r2, #4
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	4770      	bx	lr
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001054:	4770      	bx	lr

08001056 <HAL_SYSTICK_IRQHandler>:
{
 8001056:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001058:	f7ff fffc 	bl	8001054 <HAL_SYSTICK_Callback>
 800105c:	bd08      	pop	{r3, pc}

0800105e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001070:	2305      	movs	r3, #5
 8001072:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800107e:	2000      	movs	r0, #0
}
 8001080:	4770      	bx	lr
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001088:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001254 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001258 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001098:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800109a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010a0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010a8:	45b6      	cmp	lr, r6
 80010aa:	f040 80b6 	bne.w	800121a <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ae:	684c      	ldr	r4, [r1, #4]
 80010b0:	f024 0710 	bic.w	r7, r4, #16
 80010b4:	2f02      	cmp	r7, #2
 80010b6:	d116      	bne.n	80010e6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80010bc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010c4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010cc:	f04f 0c0f 	mov.w	ip, #15
 80010d0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80010d4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	690d      	ldr	r5, [r1, #16]
 80010da:	fa05 f50b 	lsl.w	r5, r5, fp
 80010de:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	f8ca 5020 	str.w	r5, [sl, #32]
 80010e6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010ec:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f0:	fa05 f50a 	lsl.w	r5, r5, sl
 80010f4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fe:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001108:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800110a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	d811      	bhi.n	8001134 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001110:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001112:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	68cf      	ldr	r7, [r1, #12]
 8001118:	fa07 fc0a 	lsl.w	ip, r7, sl
 800111c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001120:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001122:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001128:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800112c:	409f      	lsls	r7, r3
 800112e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001132:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001134:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001136:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	688f      	ldr	r7, [r1, #8]
 800113a:	fa07 f70a 	lsl.w	r7, r7, sl
 800113e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001140:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	00e5      	lsls	r5, r4, #3
 8001144:	d569      	bpl.n	800121a <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	f04f 0b00 	mov.w	fp, #0
 800114a:	f8cd b00c 	str.w	fp, [sp, #12]
 800114e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	4d3f      	ldr	r5, [pc, #252]	; (8001250 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001158:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800115c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001160:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001164:	9703      	str	r7, [sp, #12]
 8001166:	9f03      	ldr	r7, [sp, #12]
 8001168:	f023 0703 	bic.w	r7, r3, #3
 800116c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001170:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001178:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001180:	f04f 0e0f 	mov.w	lr, #15
 8001184:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001188:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	d04b      	beq.n	8001228 <HAL_GPIO_Init+0x1a4>
 8001190:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001194:	42a8      	cmp	r0, r5
 8001196:	d049      	beq.n	800122c <HAL_GPIO_Init+0x1a8>
 8001198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800119c:	42a8      	cmp	r0, r5
 800119e:	d047      	beq.n	8001230 <HAL_GPIO_Init+0x1ac>
 80011a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a4:	42a8      	cmp	r0, r5
 80011a6:	d045      	beq.n	8001234 <HAL_GPIO_Init+0x1b0>
 80011a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ac:	42a8      	cmp	r0, r5
 80011ae:	d043      	beq.n	8001238 <HAL_GPIO_Init+0x1b4>
 80011b0:	4548      	cmp	r0, r9
 80011b2:	d043      	beq.n	800123c <HAL_GPIO_Init+0x1b8>
 80011b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011b8:	42a8      	cmp	r0, r5
 80011ba:	d041      	beq.n	8001240 <HAL_GPIO_Init+0x1bc>
 80011bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011c0:	42a8      	cmp	r0, r5
 80011c2:	d03f      	beq.n	8001244 <HAL_GPIO_Init+0x1c0>
 80011c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011c8:	42a8      	cmp	r0, r5
 80011ca:	d03d      	beq.n	8001248 <HAL_GPIO_Init+0x1c4>
 80011cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011d0:	42a8      	cmp	r0, r5
 80011d2:	bf14      	ite	ne
 80011d4:	250a      	movne	r5, #10
 80011d6:	2509      	moveq	r5, #9
 80011d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80011dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011e2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011ea:	bf0c      	ite	eq
 80011ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ee:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011f0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011f2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011f8:	bf0c      	ite	eq
 80011fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011fc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011fe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001200:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001202:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001206:	bf0c      	ite	eq
 8001208:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800120a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800120c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800120e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001212:	bf54      	ite	pl
 8001214:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001216:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001218:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	3301      	adds	r3, #1
 800121c:	2b10      	cmp	r3, #16
 800121e:	f47f af3c 	bne.w	800109a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001222:	b005      	add	sp, #20
 8001224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001228:	465d      	mov	r5, fp
 800122a:	e7d5      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 800122c:	2501      	movs	r5, #1
 800122e:	e7d3      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001230:	2502      	movs	r5, #2
 8001232:	e7d1      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001234:	2503      	movs	r5, #3
 8001236:	e7cf      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001238:	2504      	movs	r5, #4
 800123a:	e7cd      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 800123c:	2505      	movs	r5, #5
 800123e:	e7cb      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001240:	2506      	movs	r5, #6
 8001242:	e7c9      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001244:	2507      	movs	r5, #7
 8001246:	e7c7      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 8001248:	2508      	movs	r5, #8
 800124a:	e7c5      	b.n	80011d8 <HAL_GPIO_Init+0x154>
 800124c:	40013c00 	.word	0x40013c00
 8001250:	40020000 	.word	0x40020000
 8001254:	40023800 	.word	0x40023800
 8001258:	40021400 	.word	0x40021400

0800125c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800125c:	6903      	ldr	r3, [r0, #16]
 800125e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001260:	bf14      	ite	ne
 8001262:	2001      	movne	r0, #1
 8001264:	2000      	moveq	r0, #0
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	b10a      	cbz	r2, 800126e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	6181      	str	r1, [r0, #24]
 800126c:	4770      	bx	lr
 800126e:	0409      	lsls	r1, r1, #16
 8001270:	e7fb      	b.n	800126a <HAL_GPIO_WritePin+0x2>
	...

08001274 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001274:	4910      	ldr	r1, [pc, #64]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8001276:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001278:	688b      	ldr	r3, [r1, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b08      	cmp	r3, #8
 8001280:	d118      	bne.n	80012b4 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001282:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001284:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001286:	6849      	ldr	r1, [r1, #4]
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800128a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800128e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001292:	bf18      	it	ne
 8001294:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001296:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129a:	fba1 0100 	umull	r0, r1, r1, r0
 800129e:	f7ff fc79 	bl	8000b94 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x44>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012aa:	3301      	adds	r3, #1
 80012ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80012ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80012b2:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012b6:	bd08      	pop	{r3, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	00f42400 	.word	0x00f42400

080012c0 <HAL_RCC_ClockConfig>:
{
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80012c6:	4604      	mov	r4, r0
 80012c8:	b910      	cbnz	r0, 80012d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012ca:	2001      	movs	r0, #1
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <HAL_RCC_ClockConfig+0x124>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	f002 020f 	and.w	r2, r2, #15
 80012d8:	428a      	cmp	r2, r1
 80012da:	d328      	bcc.n	800132e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	6821      	ldr	r1, [r4, #0]
 80012de:	078f      	lsls	r7, r1, #30
 80012e0:	d42d      	bmi.n	800133e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	07c8      	lsls	r0, r1, #31
 80012e4:	d440      	bmi.n	8001368 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_RCC_ClockConfig+0x124>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f002 020f 	and.w	r2, r2, #15
 80012ee:	4295      	cmp	r5, r2
 80012f0:	d366      	bcc.n	80013c0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	0751      	lsls	r1, r2, #29
 80012f6:	d46c      	bmi.n	80013d2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	0713      	lsls	r3, r2, #28
 80012fa:	d507      	bpl.n	800130c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012fc:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
 80012fe:	6921      	ldr	r1, [r4, #16]
 8001300:	6893      	ldr	r3, [r2, #8]
 8001302:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001306:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800130a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130c:	f7ff ffb2 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
 8001312:	4a36      	ldr	r2, [pc, #216]	; (80013ec <HAL_RCC_ClockConfig+0x12c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	40d8      	lsrs	r0, r3
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_RCC_ClockConfig+0x130>)
 8001320:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fdbe 	bl	8000ea4 <HAL_InitTick>
  return HAL_OK;
 8001328:	2000      	movs	r0, #0
 800132a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	4299      	cmp	r1, r3
 800133a:	d1c6      	bne.n	80012ca <HAL_RCC_ClockConfig+0xa>
 800133c:	e7ce      	b.n	80012dc <HAL_RCC_ClockConfig+0x1c>
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001344:	bf1e      	ittt	ne
 8001346:	689a      	ldrne	r2, [r3, #8]
 8001348:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800134c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001350:	bf42      	ittt	mi
 8001352:	689a      	ldrmi	r2, [r3, #8]
 8001354:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001358:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	68a0      	ldr	r0, [r4, #8]
 800135e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001362:	4302      	orrs	r2, r0
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	e7bc      	b.n	80012e2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001368:	6862      	ldr	r2, [r4, #4]
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
 800136c:	2a01      	cmp	r2, #1
 800136e:	d11d      	bne.n	80013ac <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001376:	d0a8      	beq.n	80012ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001378:	4e1b      	ldr	r6, [pc, #108]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
 800137a:	68b3      	ldr	r3, [r6, #8]
 800137c:	f023 0303 	bic.w	r3, r3, #3
 8001380:	4313      	orrs	r3, r2
 8001382:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001384:	f7ff fdd8 	bl	8000f38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800138c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	68b3      	ldr	r3, [r6, #8]
 8001390:	6862      	ldr	r2, [r4, #4]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800139a:	d0a4      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139c:	f7ff fdcc 	bl	8000f38 <HAL_GetTick>
 80013a0:	1bc0      	subs	r0, r0, r7
 80013a2:	4540      	cmp	r0, r8
 80013a4:	d9f3      	bls.n	800138e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
}
 80013a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ac:	1e91      	subs	r1, r2, #2
 80013ae:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013b2:	d802      	bhi.n	80013ba <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013b8:	e7dd      	b.n	8001376 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	f013 0f02 	tst.w	r3, #2
 80013be:	e7da      	b.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c0:	b2ea      	uxtb	r2, r5
 80013c2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	429d      	cmp	r5, r3
 80013cc:	f47f af7d 	bne.w	80012ca <HAL_RCC_ClockConfig+0xa>
 80013d0:	e78f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d2:	4905      	ldr	r1, [pc, #20]	; (80013e8 <HAL_RCC_ClockConfig+0x128>)
 80013d4:	68e0      	ldr	r0, [r4, #12]
 80013d6:	688b      	ldr	r3, [r1, #8]
 80013d8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013dc:	4303      	orrs	r3, r0
 80013de:	608b      	str	r3, [r1, #8]
 80013e0:	e78a      	b.n	80012f8 <HAL_RCC_ClockConfig+0x38>
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08003884 	.word	0x08003884
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_RCC_GetHCLKFreq+0x8>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000000c 	.word	0x2000000c

08001400 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800140e:	6810      	ldr	r0, [r2, #0]
}
 8001410:	40d8      	lsrs	r0, r3
 8001412:	4770      	bx	lr
 8001414:	40023800 	.word	0x40023800
 8001418:	08003894 	.word	0x08003894
 800141c:	2000000c 	.word	0x2000000c

08001420 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800142e:	6810      	ldr	r0, [r2, #0]
}
 8001430:	40d8      	lsrs	r0, r3
 8001432:	4770      	bx	lr
 8001434:	40023800 	.word	0x40023800
 8001438:	08003894 	.word	0x08003894
 800143c:	2000000c 	.word	0x2000000c

08001440 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001440:	6803      	ldr	r3, [r0, #0]
{
 8001442:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	07dd      	lsls	r5, r3, #31
{
 8001448:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	d410      	bmi.n	800146e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	0798      	lsls	r0, r3, #30
 8001450:	d45b      	bmi.n	800150a <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	071a      	lsls	r2, r3, #28
 8001456:	f100 809d 	bmi.w	8001594 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	075b      	lsls	r3, r3, #29
 800145e:	f100 80bb 	bmi.w	80015d8 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	69a2      	ldr	r2, [r4, #24]
 8001464:	2a00      	cmp	r2, #0
 8001466:	f040 811c 	bne.w	80016a2 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800146a:	2000      	movs	r0, #0
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800146e:	4ba7      	ldr	r3, [pc, #668]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	f002 020c 	and.w	r2, r2, #12
 8001476:	2a04      	cmp	r2, #4
 8001478:	d007      	beq.n	800148a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001480:	2a08      	cmp	r2, #8
 8001482:	d10d      	bne.n	80014a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0259      	lsls	r1, r3, #9
 8001488:	d50a      	bpl.n	80014a0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	039a      	lsls	r2, r3, #14
 8001490:	d5dc      	bpl.n	800144c <HAL_RCC_OscConfig+0xc>
 8001492:	6863      	ldr	r3, [r4, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1d9      	bne.n	800144c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
}
 800149a:	b002      	add	sp, #8
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	4d9a      	ldr	r5, [pc, #616]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d111      	bne.n	80014ce <HAL_RCC_OscConfig+0x8e>
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014b2:	f7ff fd41 	bl	8000f38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4d95      	ldr	r5, [pc, #596]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80014b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	039b      	lsls	r3, r3, #14
 80014be:	d4c5      	bmi.n	800144c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fd3a 	bl	8000f38 <HAL_GetTick>
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	2864      	cmp	r0, #100	; 0x64
 80014c8:	d9f7      	bls.n	80014ba <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e7e5      	b.n	800149a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d2:	d104      	bne.n	80014de <HAL_RCC_OscConfig+0x9e>
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014da:	602b      	str	r3, [r5, #0]
 80014dc:	e7e5      	b.n	80014aa <HAL_RCC_OscConfig+0x6a>
 80014de:	682a      	ldr	r2, [r5, #0]
 80014e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014e4:	602a      	str	r2, [r5, #0]
 80014e6:	682a      	ldr	r2, [r5, #0]
 80014e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014ec:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1df      	bne.n	80014b2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80014f2:	f7ff fd21 	bl	8000f38 <HAL_GetTick>
 80014f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	039f      	lsls	r7, r3, #14
 80014fc:	d5a6      	bpl.n	800144c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fe:	f7ff fd1b 	bl	8000f38 <HAL_GetTick>
 8001502:	1b80      	subs	r0, r0, r6
 8001504:	2864      	cmp	r0, #100	; 0x64
 8001506:	d9f7      	bls.n	80014f8 <HAL_RCC_OscConfig+0xb8>
 8001508:	e7df      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800150a:	4b80      	ldr	r3, [pc, #512]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	f012 0f0c 	tst.w	r2, #12
 8001512:	d007      	beq.n	8001524 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800151a:	2a08      	cmp	r2, #8
 800151c:	d111      	bne.n	8001542 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	025e      	lsls	r6, r3, #9
 8001522:	d40e      	bmi.n	8001542 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	0795      	lsls	r5, r2, #30
 800152a:	d502      	bpl.n	8001532 <HAL_RCC_OscConfig+0xf2>
 800152c:	68e2      	ldr	r2, [r4, #12]
 800152e:	2a01      	cmp	r2, #1
 8001530:	d1b2      	bne.n	8001498 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	6921      	ldr	r1, [r4, #16]
 8001536:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800153a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800153e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001540:	e787      	b.n	8001452 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001542:	68e2      	ldr	r2, [r4, #12]
 8001544:	4b72      	ldr	r3, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x2d0>)
 8001546:	b1b2      	cbz	r2, 8001576 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800154c:	f7ff fcf4 	bl	8000f38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4d6e      	ldr	r5, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001552:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	0798      	lsls	r0, r3, #30
 8001558:	d507      	bpl.n	800156a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	6922      	ldr	r2, [r4, #16]
 800155e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001562:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001566:	602b      	str	r3, [r5, #0]
 8001568:	e773      	b.n	8001452 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fce5 	bl	8000f38 <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2802      	cmp	r0, #2
 8001572:	d9ef      	bls.n	8001554 <HAL_RCC_OscConfig+0x114>
 8001574:	e7a9      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001576:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001578:	f7ff fcde 	bl	8000f38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157c:	4d63      	ldr	r5, [pc, #396]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800157e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	0799      	lsls	r1, r3, #30
 8001584:	f57f af65 	bpl.w	8001452 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fcd6 	bl	8000f38 <HAL_GetTick>
 800158c:	1b80      	subs	r0, r0, r6
 800158e:	2802      	cmp	r0, #2
 8001590:	d9f6      	bls.n	8001580 <HAL_RCC_OscConfig+0x140>
 8001592:	e79a      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001594:	6962      	ldr	r2, [r4, #20]
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x2d4>)
 8001598:	b17a      	cbz	r2, 80015ba <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800159e:	f7ff fccb 	bl	8000f38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	4d5a      	ldr	r5, [pc, #360]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80015a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015a8:	079f      	lsls	r7, r3, #30
 80015aa:	f53f af56 	bmi.w	800145a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fcc3 	bl	8000f38 <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	2802      	cmp	r0, #2
 80015b6:	d9f6      	bls.n	80015a6 <HAL_RCC_OscConfig+0x166>
 80015b8:	e787      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80015ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015bc:	f7ff fcbc 	bl	8000f38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4d52      	ldr	r5, [pc, #328]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80015c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015c6:	0798      	lsls	r0, r3, #30
 80015c8:	f57f af47 	bpl.w	800145a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fcb4 	bl	8000f38 <HAL_GetTick>
 80015d0:	1b80      	subs	r0, r0, r6
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d9f6      	bls.n	80015c4 <HAL_RCC_OscConfig+0x184>
 80015d6:	e778      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 80015da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015dc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015e0:	d128      	bne.n	8001634 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015f6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4d47      	ldr	r5, [pc, #284]	; (8001718 <HAL_RCC_OscConfig+0x2d8>)
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	05d9      	lsls	r1, r3, #23
 80015fe:	d51b      	bpl.n	8001638 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	68a3      	ldr	r3, [r4, #8]
 8001602:	4d42      	ldr	r5, [pc, #264]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 8001604:	2b01      	cmp	r3, #1
 8001606:	d127      	bne.n	8001658 <HAL_RCC_OscConfig+0x218>
 8001608:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001610:	f7ff fc92 	bl	8000f38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4d3d      	ldr	r5, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001616:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800161e:	079b      	lsls	r3, r3, #30
 8001620:	d539      	bpl.n	8001696 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8001622:	2e00      	cmp	r6, #0
 8001624:	f43f af1d 	beq.w	8001462 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 800162a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	e716      	b.n	8001462 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001634:	2600      	movs	r6, #0
 8001636:	e7df      	b.n	80015f8 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001640:	f7ff fc7a 	bl	8000f38 <HAL_GetTick>
 8001644:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	05da      	lsls	r2, r3, #23
 800164a:	d4d9      	bmi.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164c:	f7ff fc74 	bl	8000f38 <HAL_GetTick>
 8001650:	1bc0      	subs	r0, r0, r7
 8001652:	2802      	cmp	r0, #2
 8001654:	d9f7      	bls.n	8001646 <HAL_RCC_OscConfig+0x206>
 8001656:	e738      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	2b05      	cmp	r3, #5
 800165a:	d104      	bne.n	8001666 <HAL_RCC_OscConfig+0x226>
 800165c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	672b      	str	r3, [r5, #112]	; 0x70
 8001664:	e7d0      	b.n	8001608 <HAL_RCC_OscConfig+0x1c8>
 8001666:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	672a      	str	r2, [r5, #112]	; 0x70
 800166e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001670:	f022 0204 	bic.w	r2, r2, #4
 8001674:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ca      	bne.n	8001610 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 800167a:	f7ff fc5d 	bl	8000f38 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001682:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001686:	0798      	lsls	r0, r3, #30
 8001688:	d5cb      	bpl.n	8001622 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fc55 	bl	8000f38 <HAL_GetTick>
 800168e:	1bc0      	subs	r0, r0, r7
 8001690:	4540      	cmp	r0, r8
 8001692:	d9f7      	bls.n	8001684 <HAL_RCC_OscConfig+0x244>
 8001694:	e719      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fc4f 	bl	8000f38 <HAL_GetTick>
 800169a:	1bc0      	subs	r0, r0, r7
 800169c:	4540      	cmp	r0, r8
 800169e:	d9bd      	bls.n	800161c <HAL_RCC_OscConfig+0x1dc>
 80016a0:	e713      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a2:	4d1a      	ldr	r5, [pc, #104]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
 80016a4:	68ab      	ldr	r3, [r5, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	f43f aef4 	beq.w	8001498 <HAL_RCC_OscConfig+0x58>
 80016b0:	4e1a      	ldr	r6, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x2dc>)
 80016b2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016b6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	d138      	bne.n	800172c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80016ba:	f7ff fc3d 	bl	8000f38 <HAL_GetTick>
 80016be:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	0199      	lsls	r1, r3, #6
 80016c4:	d42c      	bmi.n	8001720 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	6a22      	ldr	r2, [r4, #32]
 80016c8:	69e3      	ldr	r3, [r4, #28]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016da:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e2:	0852      	lsrs	r2, r2, #1
 80016e4:	3a01      	subs	r2, #1
 80016e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016ea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016ec:	2301      	movs	r3, #1
 80016ee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc22 	bl	8000f38 <HAL_GetTick>
 80016f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	019a      	lsls	r2, r3, #6
 80016fa:	f53f aeb6 	bmi.w	800146a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fc1b 	bl	8000f38 <HAL_GetTick>
 8001702:	1b40      	subs	r0, r0, r5
 8001704:	2802      	cmp	r0, #2
 8001706:	d9f6      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
 8001708:	e6df      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fc0a 	bl	8000f38 <HAL_GetTick>
 8001724:	1bc0      	subs	r0, r0, r7
 8001726:	2802      	cmp	r0, #2
 8001728:	d9ca      	bls.n	80016c0 <HAL_RCC_OscConfig+0x280>
 800172a:	e6ce      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800172c:	f7ff fc04 	bl	8000f38 <HAL_GetTick>
 8001730:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	f57f ae98 	bpl.w	800146a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fbfd 	bl	8000f38 <HAL_GetTick>
 800173e:	1b00      	subs	r0, r0, r4
 8001740:	2802      	cmp	r0, #2
 8001742:	d9f6      	bls.n	8001732 <HAL_RCC_OscConfig+0x2f2>
 8001744:	e6c1      	b.n	80014ca <HAL_RCC_OscConfig+0x8a>
 8001746:	bf00      	nop

08001748 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001748:	6a03      	ldr	r3, [r0, #32]
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001750:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001752:	6842      	ldr	r2, [r0, #4]
{
 8001754:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001756:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001758:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800175a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800175e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001760:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001762:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001766:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001768:	4c0c      	ldr	r4, [pc, #48]	; (800179c <TIM_OC1_SetConfig+0x54>)
 800176a:	42a0      	cmp	r0, r4
 800176c:	d009      	beq.n	8001782 <TIM_OC1_SetConfig+0x3a>
 800176e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001772:	42a0      	cmp	r0, r4
 8001774:	d005      	beq.n	8001782 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001776:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001778:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800177a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800177c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800177e:	6203      	str	r3, [r0, #32]
} 
 8001780:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001782:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001784:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001786:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800178a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800178c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800178e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001792:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001794:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001798:	4322      	orrs	r2, r4
 800179a:	e7ec      	b.n	8001776 <TIM_OC1_SetConfig+0x2e>
 800179c:	40010000 	.word	0x40010000

080017a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017a0:	6a03      	ldr	r3, [r0, #32]
 80017a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017a8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80017aa:	6842      	ldr	r2, [r0, #4]
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017ae:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80017b2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017b6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017b8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80017ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017be:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80017c2:	4c0e      	ldr	r4, [pc, #56]	; (80017fc <TIM_OC3_SetConfig+0x5c>)
 80017c4:	42a0      	cmp	r0, r4
 80017c6:	d009      	beq.n	80017dc <TIM_OC3_SetConfig+0x3c>
 80017c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017cc:	42a0      	cmp	r0, r4
 80017ce:	d005      	beq.n	80017dc <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017d0:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017d2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80017d4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80017d6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017d8:	6203      	str	r3, [r0, #32]
}
 80017da:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017dc:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017de:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80017e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017e4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80017e8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017ee:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80017f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017f4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80017f8:	e7ea      	b.n	80017d0 <TIM_OC3_SetConfig+0x30>
 80017fa:	bf00      	nop
 80017fc:	40010000 	.word	0x40010000

08001800 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001800:	6a03      	ldr	r3, [r0, #32]
 8001802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001806:	6203      	str	r3, [r0, #32]
{
 8001808:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800180a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800180c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800180e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001810:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001812:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001816:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800181a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800181c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001820:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001824:	4d09      	ldr	r5, [pc, #36]	; (800184c <TIM_OC4_SetConfig+0x4c>)
 8001826:	42a8      	cmp	r0, r5
 8001828:	d009      	beq.n	800183e <TIM_OC4_SetConfig+0x3e>
 800182a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800182e:	42a8      	cmp	r0, r5
 8001830:	d005      	beq.n	800183e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001832:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001834:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001836:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001838:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800183a:	6204      	str	r4, [r0, #32]
}
 800183c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800183e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001844:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001848:	e7f3      	b.n	8001832 <TIM_OC4_SetConfig+0x32>
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000

08001850 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
}
 8001862:	2000      	movs	r0, #0
 8001864:	4770      	bx	lr

08001866 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001870:	6a19      	ldr	r1, [r3, #32]
 8001872:	f241 1211 	movw	r2, #4369	; 0x1111
 8001876:	4211      	tst	r1, r2
 8001878:	d108      	bne.n	800188c <HAL_TIM_Base_Stop_IT+0x26>
 800187a:	6a19      	ldr	r1, [r3, #32]
 800187c:	f240 4244 	movw	r2, #1092	; 0x444
 8001880:	4211      	tst	r1, r2
 8001882:	bf02      	ittt	eq
 8001884:	681a      	ldreq	r2, [r3, #0]
 8001886:	f022 0201 	biceq.w	r2, r2, #1
 800188a:	601a      	streq	r2, [r3, #0]
}
 800188c:	2000      	movs	r0, #0
 800188e:	4770      	bx	lr

08001890 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001890:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001894:	2b01      	cmp	r3, #1
{
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800189c:	d01c      	beq.n	80018d8 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800189e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80018a2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80018aa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80018b0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018b4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80018b6:	680a      	ldr	r2, [r1, #0]
 80018b8:	2a40      	cmp	r2, #64	; 0x40
 80018ba:	d079      	beq.n	80019b0 <HAL_TIM_ConfigClockSource+0x120>
 80018bc:	d819      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x62>
 80018be:	2a10      	cmp	r2, #16
 80018c0:	f000 8093 	beq.w	80019ea <HAL_TIM_ConfigClockSource+0x15a>
 80018c4:	d80a      	bhi.n	80018dc <HAL_TIM_ConfigClockSource+0x4c>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	f000 8089 	beq.w	80019de <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80018d2:	2300      	movs	r3, #0
 80018d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80018d8:	4618      	mov	r0, r3
}
 80018da:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018dc:	2a20      	cmp	r2, #32
 80018de:	f000 808a 	beq.w	80019f6 <HAL_TIM_ConfigClockSource+0x166>
 80018e2:	2a30      	cmp	r2, #48	; 0x30
 80018e4:	d1f2      	bne.n	80018cc <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80018e6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80018e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018ec:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80018f0:	e036      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80018f2:	2a70      	cmp	r2, #112	; 0x70
 80018f4:	d036      	beq.n	8001964 <HAL_TIM_ConfigClockSource+0xd4>
 80018f6:	d81b      	bhi.n	8001930 <HAL_TIM_ConfigClockSource+0xa0>
 80018f8:	2a50      	cmp	r2, #80	; 0x50
 80018fa:	d042      	beq.n	8001982 <HAL_TIM_ConfigClockSource+0xf2>
 80018fc:	2a60      	cmp	r2, #96	; 0x60
 80018fe:	d1e5      	bne.n	80018cc <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001900:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001902:	684d      	ldr	r5, [r1, #4]
 8001904:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001906:	f024 0410 	bic.w	r4, r4, #16
 800190a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800190c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800190e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001910:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001914:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001918:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800191c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001920:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001922:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001924:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800192a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800192e:	e017      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001930:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001934:	d011      	beq.n	800195a <HAL_TIM_ConfigClockSource+0xca>
 8001936:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800193a:	d1c7      	bne.n	80018cc <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800193c:	688a      	ldr	r2, [r1, #8]
 800193e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001940:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001942:	68c9      	ldr	r1, [r1, #12]
 8001944:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001946:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800194a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800194e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001950:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001958:	e002      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e7b3      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001964:	688a      	ldr	r2, [r1, #8]
 8001966:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001968:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800196a:	68c9      	ldr	r1, [r1, #12]
 800196c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800196e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001972:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001976:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001978:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800197a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800197c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001980:	e7ee      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001982:	684c      	ldr	r4, [r1, #4]
 8001984:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001986:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001988:	6a1d      	ldr	r5, [r3, #32]
 800198a:	f025 0501 	bic.w	r5, r5, #1
 800198e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001990:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001992:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001996:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800199a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800199e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80019a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019a2:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019a4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019aa:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80019ae:	e7d7      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80019b0:	684c      	ldr	r4, [r1, #4]
 80019b2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80019b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019b6:	6a1d      	ldr	r5, [r3, #32]
 80019b8:	f025 0501 	bic.w	r5, r5, #1
 80019bc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80019be:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019c8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80019cc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80019ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019d0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019d8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80019dc:	e7c0      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019de:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019e4:	f042 0207 	orr.w	r2, r2, #7
 80019e8:	e7ba      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019ea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019f0:	f042 0217 	orr.w	r2, r2, #23
 80019f4:	e7b4      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019fc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001a00:	e7ae      	b.n	8001960 <HAL_TIM_ConfigClockSource+0xd0>

08001a02 <HAL_TIM_OC_DelayElapsedCallback>:
 8001a02:	4770      	bx	lr

08001a04 <HAL_TIM_TriggerCallback>:
 8001a04:	4770      	bx	lr

08001a06 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a06:	6803      	ldr	r3, [r0, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	0791      	lsls	r1, r2, #30
{
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a10:	d50e      	bpl.n	8001a30 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	0792      	lsls	r2, r2, #30
 8001a16:	d50b      	bpl.n	8001a30 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a18:	f06f 0202 	mvn.w	r2, #2
 8001a1c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a1e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a20:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a22:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a24:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a26:	d077      	beq.n	8001b18 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001a28:	f000 fe3a 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	0750      	lsls	r0, r2, #29
 8001a36:	d510      	bpl.n	8001a5a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	0751      	lsls	r1, r2, #29
 8001a3c:	d50d      	bpl.n	8001a5a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a3e:	f06f 0204 	mvn.w	r2, #4
 8001a42:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a44:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a46:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a48:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a4c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a50:	d068      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	f000 fe25 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	2300      	movs	r3, #0
 8001a58:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	0712      	lsls	r2, r2, #28
 8001a60:	d50f      	bpl.n	8001a82 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	0710      	lsls	r0, r2, #28
 8001a66:	d50c      	bpl.n	8001a82 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a68:	f06f 0208 	mvn.w	r2, #8
 8001a6c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a6e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a70:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a72:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a74:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a78:	d05a      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	f000 fe11 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	06d2      	lsls	r2, r2, #27
 8001a88:	d510      	bpl.n	8001aac <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	06d0      	lsls	r0, r2, #27
 8001a8e:	d50d      	bpl.n	8001aac <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a90:	f06f 0210 	mvn.w	r2, #16
 8001a94:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a98:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a9a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a9e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa2:	d04b      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa4:	f000 fdfc 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	07d1      	lsls	r1, r2, #31
 8001ab2:	d508      	bpl.n	8001ac6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	07d2      	lsls	r2, r2, #31
 8001ab8:	d505      	bpl.n	8001ac6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aba:	f06f 0201 	mvn.w	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 fe93 	bl	80027ec <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	0610      	lsls	r0, r2, #24
 8001acc:	d508      	bpl.n	8001ae0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	0611      	lsls	r1, r2, #24
 8001ad2:	d505      	bpl.n	8001ae0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ad8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ada:	4620      	mov	r0, r4
 8001adc:	f000 fb1f 	bl	800211e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	0652      	lsls	r2, r2, #25
 8001ae6:	d508      	bpl.n	8001afa <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	0650      	lsls	r0, r2, #25
 8001aec:	d505      	bpl.n	8001afa <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001af2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff ff85 	bl	8001a04 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	0691      	lsls	r1, r2, #26
 8001b00:	d522      	bpl.n	8001b48 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	0692      	lsls	r2, r2, #26
 8001b06:	d51f      	bpl.n	8001b48 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b08:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001b0c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b0e:	611a      	str	r2, [r3, #16]
}
 8001b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001b14:	f000 bb02 	b.w	800211c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b18:	f7ff ff73 	bl	8001a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f000 feaf 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b22:	e783      	b.n	8001a2c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b24:	f7ff ff6d 	bl	8001a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f000 fea9 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b2e:	e792      	b.n	8001a56 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b30:	f7ff ff67 	bl	8001a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b34:	4620      	mov	r0, r4
 8001b36:	f000 fea3 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b3a:	e7a0      	b.n	8001a7e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	f7ff ff61 	bl	8001a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f000 fe9d 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b46:	e7af      	b.n	8001aa8 <HAL_TIM_IRQHandler+0xa2>
 8001b48:	bd10      	pop	{r4, pc}
	...

08001b4c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001b4e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b50:	4290      	cmp	r0, r2
 8001b52:	d012      	beq.n	8001b7a <TIM_Base_SetConfig+0x2e>
 8001b54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b58:	d00f      	beq.n	8001b7a <TIM_Base_SetConfig+0x2e>
 8001b5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b5e:	4290      	cmp	r0, r2
 8001b60:	d00b      	beq.n	8001b7a <TIM_Base_SetConfig+0x2e>
 8001b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b66:	4290      	cmp	r0, r2
 8001b68:	d007      	beq.n	8001b7a <TIM_Base_SetConfig+0x2e>
 8001b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6e:	4290      	cmp	r0, r2
 8001b70:	d003      	beq.n	8001b7a <TIM_Base_SetConfig+0x2e>
 8001b72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b76:	4290      	cmp	r0, r2
 8001b78:	d11d      	bne.n	8001bb6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001b7a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b80:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <TIM_Base_SetConfig+0xbc>)
 8001b84:	4290      	cmp	r0, r2
 8001b86:	d104      	bne.n	8001b92 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b88:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	e028      	b.n	8001be4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b96:	d0f7      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <TIM_Base_SetConfig+0xc0>)
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	d0f4      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	d0f0      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001baa:	4290      	cmp	r0, r2
 8001bac:	d0ec      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bb2:	4290      	cmp	r0, r2
 8001bb4:	d0e8      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <TIM_Base_SetConfig+0xc4>)
 8001bb8:	4290      	cmp	r0, r2
 8001bba:	d0e5      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d0e1      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bc8:	4290      	cmp	r0, r2
 8001bca:	d0dd      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bcc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001bd0:	4290      	cmp	r0, r2
 8001bd2:	d0d9      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bd8:	4290      	cmp	r0, r2
 8001bda:	d0d5      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
 8001bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001be0:	4290      	cmp	r0, r2
 8001be2:	d0d1      	beq.n	8001b88 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001be4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be6:	688b      	ldr	r3, [r1, #8]
 8001be8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bea:	680b      	ldr	r3, [r1, #0]
 8001bec:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <TIM_Base_SetConfig+0xbc>)
 8001bf0:	4298      	cmp	r0, r3
 8001bf2:	d006      	beq.n	8001c02 <TIM_Base_SetConfig+0xb6>
 8001bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	d002      	beq.n	8001c02 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	6143      	str	r3, [r0, #20]
}
 8001c00:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001c02:	690b      	ldr	r3, [r1, #16]
 8001c04:	6303      	str	r3, [r0, #48]	; 0x30
 8001c06:	e7f9      	b.n	8001bfc <TIM_Base_SetConfig+0xb0>
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40014000 	.word	0x40014000

08001c14 <HAL_TIM_Base_Init>:
{ 
 8001c14:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c16:	4604      	mov	r4, r0
 8001c18:	b1a0      	cbz	r0, 8001c44 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c22:	b91b      	cbnz	r3, 8001c2c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001c28:	f001 f862 	bl	8002cf0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	1d21      	adds	r1, r4, #4
 8001c36:	f7ff ff89 	bl	8001b4c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
 8001c42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
}
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <HAL_TIM_PWM_Init>:
{
 8001c48:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b1a0      	cbz	r0, 8001c78 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c56:	b91b      	cbnz	r3, 8001c60 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001c5c:	f001 f8b8 	bl	8002dd0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001c60:	2302      	movs	r3, #2
 8001c62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	1d21      	adds	r1, r4, #4
 8001c6a:	f7ff ff6f 	bl	8001b4c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c74:	2000      	movs	r0, #0
 8001c76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}  
 8001c7a:	bd10      	pop	{r4, pc}

08001c7c <HAL_TIM_IC_Init>:
{
 8001c7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c7e:	4604      	mov	r4, r0
 8001c80:	b1a0      	cbz	r0, 8001cac <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c8a:	b91b      	cbnz	r3, 8001c94 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8001c90:	f001 f872 	bl	8002d78 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001c94:	2302      	movs	r3, #2
 8001c96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	1d21      	adds	r1, r4, #4
 8001c9e:	f7ff ff55 	bl	8001b4c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
 8001caa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cac:	2001      	movs	r0, #1
}
 8001cae:	bd10      	pop	{r4, pc}

08001cb0 <TIM_TI1_SetConfig>:
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb2:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cb4:	4e1a      	ldr	r6, [pc, #104]	; (8001d20 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb6:	f024 0401 	bic.w	r4, r4, #1
 8001cba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cbc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cbe:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cc0:	42b0      	cmp	r0, r6
 8001cc2:	f024 0403 	bic.w	r4, r4, #3
 8001cc6:	d01a      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ccc:	d017      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cce:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001cd2:	42b0      	cmp	r0, r6
 8001cd4:	d013      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cda:	42b0      	cmp	r0, r6
 8001cdc:	d00f      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ce2:	42b0      	cmp	r0, r6
 8001ce4:	d00b      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001ce6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001cea:	42b0      	cmp	r0, r6
 8001cec:	d007      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cee:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001cf2:	42b0      	cmp	r0, r6
 8001cf4:	d003      	beq.n	8001cfe <TIM_TI1_SetConfig+0x4e>
 8001cf6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001cfa:	42b0      	cmp	r0, r6
 8001cfc:	d10d      	bne.n	8001d1a <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8001cfe:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d00:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d06:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d08:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d0c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001d10:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001d12:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001d14:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d16:	6201      	str	r1, [r0, #32]
}
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d1a:	f044 0201 	orr.w	r2, r4, #1
 8001d1e:	e7ef      	b.n	8001d00 <TIM_TI1_SetConfig+0x50>
 8001d20:	40010000 	.word	0x40010000

08001d24 <HAL_TIM_IC_ConfigChannel>:
{
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d26:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d2a:	2b01      	cmp	r3, #1
{
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d34:	d019      	beq.n	8001d6a <HAL_TIM_IC_ConfigChannel+0x46>
 8001d36:	2301      	movs	r3, #1
 8001d38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001d40:	b9a2      	cbnz	r2, 8001d6c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001d42:	68cb      	ldr	r3, [r1, #12]
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	c906      	ldmia	r1, {r1, r2}
 8001d48:	f7ff ffb2 	bl	8001cb0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d4c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d4e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	f022 020c 	bic.w	r2, r2, #12
 8001d56:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d5e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d60:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d66:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d6c:	2a04      	cmp	r2, #4
 8001d6e:	688e      	ldr	r6, [r1, #8]
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	68e8      	ldr	r0, [r5, #12]
 8001d74:	c982      	ldmia	r1, {r1, r7}
 8001d76:	d11f      	bne.n	8001db8 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	f022 0210 	bic.w	r2, r2, #16
 8001d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d80:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d82:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d88:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d8c:	0300      	lsls	r0, r0, #12
 8001d8e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d94:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d96:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d98:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d9c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001da0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001dac:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001db4:	619e      	str	r6, [r3, #24]
 8001db6:	e7d2      	b.n	8001d5e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001db8:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dba:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001dbc:	d11c      	bne.n	8001df8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dc4:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001dc6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001dc8:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001dcc:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dce:	0100      	lsls	r0, r0, #4
 8001dd0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001dd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dd6:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dd8:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dda:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001dde:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001de2:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001de6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	f022 020c 	bic.w	r2, r2, #12
 8001dee:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001df4:	61de      	str	r6, [r3, #28]
 8001df6:	e7b2      	b.n	8001d5e <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dfe:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001e00:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001e02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001e06:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e0a:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001e0c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e10:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e12:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e14:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e16:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001e1a:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e1e:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001e20:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001e22:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e2a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e32:	e7df      	b.n	8001df4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001e34 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e34:	6a03      	ldr	r3, [r0, #32]
 8001e36:	f023 0310 	bic.w	r3, r3, #16
 8001e3a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e3c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001e3e:	6842      	ldr	r2, [r0, #4]
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001e42:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e46:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e4a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e4e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e50:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e54:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e58:	4c0d      	ldr	r4, [pc, #52]	; (8001e90 <TIM_OC2_SetConfig+0x5c>)
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	d009      	beq.n	8001e72 <TIM_OC2_SetConfig+0x3e>
 8001e5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e62:	42a0      	cmp	r0, r4
 8001e64:	d005      	beq.n	8001e72 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001e66:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e68:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e6a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e6c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e6e:	6203      	str	r3, [r0, #32]
}
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e72:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e74:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e7a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e7e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e84:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e8a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001e8e:	e7ea      	b.n	8001e66 <TIM_OC2_SetConfig+0x32>
 8001e90:	40010000 	.word	0x40010000

08001e94 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e94:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e96:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e9a:	2b01      	cmp	r3, #1
{
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ea2:	d025      	beq.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001eaa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001eae:	2a0c      	cmp	r2, #12
 8001eb0:	d818      	bhi.n	8001ee4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001eb2:	e8df f002 	tbb	[pc, r2]
 8001eb6:	1707      	.short	0x1707
 8001eb8:	171e1717 	.word	0x171e1717
 8001ebc:	172f1717 	.word	0x172f1717
 8001ec0:	1717      	.short	0x1717
 8001ec2:	40          	.byte	0x40
 8001ec3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	f7ff fc3f 	bl	8001748 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ecc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	f042 0208 	orr.w	r2, r2, #8
 8001ed4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	f022 0204 	bic.w	r2, r2, #4
 8001edc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ee2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ee4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ee6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001eec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001ef0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	f7ff ff9e 	bl	8001e34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001efa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f12:	e7e6      	b.n	8001ee2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f14:	6820      	ldr	r0, [r4, #0]
 8001f16:	f7ff fc43 	bl	80017a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001f1c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	f042 0208 	orr.w	r2, r2, #8
 8001f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	f022 0204 	bic.w	r2, r2, #4
 8001f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001f32:	61da      	str	r2, [r3, #28]
    break;
 8001f34:	e7d6      	b.n	8001ee4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f36:	6820      	ldr	r0, [r4, #0]
 8001f38:	f7ff fc62 	bl	8001800 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f3c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001f3e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f56:	e7ec      	b.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001f58 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001f58:	6a03      	ldr	r3, [r0, #32]
{
 8001f5a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001f5c:	2401      	movs	r4, #1
 8001f5e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001f60:	ea23 0304 	bic.w	r3, r3, r4
 8001f64:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f66:	6a03      	ldr	r3, [r0, #32]
 8001f68:	408a      	lsls	r2, r1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	6202      	str	r2, [r0, #32]
 8001f6e:	bd10      	pop	{r4, pc}

08001f70 <HAL_TIM_PWM_Start_IT>:
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4604      	mov	r4, r0
  switch (Channel)
 8001f74:	290c      	cmp	r1, #12
 8001f76:	d80d      	bhi.n	8001f94 <HAL_TIM_PWM_Start_IT+0x24>
 8001f78:	e8df f001 	tbb	[pc, r1]
 8001f7c:	0c0c0c07 	.word	0x0c0c0c07
 8001f80:	0c0c0c22 	.word	0x0c0c0c22
 8001f84:	0c0c0c27 	.word	0x0c0c0c27
 8001f88:	2c          	.byte	0x2c
 8001f89:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	68d3      	ldr	r3, [r2, #12]
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f92:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	f7ff ffde 	bl	8001f58 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_PWM_Start_IT+0x70>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_PWM_Start_IT+0x3c>
 8001fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d103      	bne.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
} 
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	68d3      	ldr	r3, [r2, #12]
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	e7e3      	b.n	8001f92 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fca:	6802      	ldr	r2, [r0, #0]
 8001fcc:	68d3      	ldr	r3, [r2, #12]
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	e7de      	b.n	8001f92 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	68d3      	ldr	r3, [r2, #12]
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	e7d9      	b.n	8001f92 <HAL_TIM_PWM_Start_IT+0x22>
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000

08001fe4 <HAL_TIM_PWM_Stop_IT>:
{
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	4604      	mov	r4, r0
  switch (Channel)
 8001fe8:	290c      	cmp	r1, #12
 8001fea:	d80d      	bhi.n	8002008 <HAL_TIM_PWM_Stop_IT+0x24>
 8001fec:	e8df f001 	tbb	[pc, r1]
 8001ff0:	0c0c0c07 	.word	0x0c0c0c07
 8001ff4:	0c0c0c36 	.word	0x0c0c0c36
 8001ff8:	0c0c0c3b 	.word	0x0c0c0c3b
 8001ffc:	40          	.byte	0x40
 8001ffd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001ffe:	6802      	ldr	r2, [r0, #0]
 8002000:	68d3      	ldr	r3, [r2, #12]
 8002002:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002006:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002008:	2200      	movs	r2, #0
 800200a:	6820      	ldr	r0, [r4, #0]
 800200c:	f7ff ffa4 	bl	8001f58 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_TIM_PWM_Stop_IT+0x98>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_TIM_PWM_Stop_IT+0x3c>
 8002018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800201c:	4293      	cmp	r3, r2
 800201e:	d10d      	bne.n	800203c <HAL_TIM_PWM_Stop_IT+0x58>
    __HAL_TIM_MOE_DISABLE(htim);
 8002020:	6a19      	ldr	r1, [r3, #32]
 8002022:	f241 1211 	movw	r2, #4369	; 0x1111
 8002026:	4211      	tst	r1, r2
 8002028:	d108      	bne.n	800203c <HAL_TIM_PWM_Stop_IT+0x58>
 800202a:	6a19      	ldr	r1, [r3, #32]
 800202c:	f240 4244 	movw	r2, #1092	; 0x444
 8002030:	4211      	tst	r1, r2
 8002032:	bf02      	ittt	eq
 8002034:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002036:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800203a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800203c:	6a19      	ldr	r1, [r3, #32]
 800203e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002042:	4211      	tst	r1, r2
 8002044:	d108      	bne.n	8002058 <HAL_TIM_PWM_Stop_IT+0x74>
 8002046:	6a19      	ldr	r1, [r3, #32]
 8002048:	f240 4244 	movw	r2, #1092	; 0x444
 800204c:	4211      	tst	r1, r2
 800204e:	d103      	bne.n	8002058 <HAL_TIM_PWM_Stop_IT+0x74>
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
} 
 8002058:	2000      	movs	r0, #0
 800205a:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800205c:	6802      	ldr	r2, [r0, #0]
 800205e:	68d3      	ldr	r3, [r2, #12]
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	e7cf      	b.n	8002006 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	68d3      	ldr	r3, [r2, #12]
 800206a:	f023 0308 	bic.w	r3, r3, #8
 800206e:	e7ca      	b.n	8002006 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002070:	6802      	ldr	r2, [r0, #0]
 8002072:	68d3      	ldr	r3, [r2, #12]
 8002074:	f023 0310 	bic.w	r3, r3, #16
 8002078:	e7c5      	b.n	8002006 <HAL_TIM_PWM_Stop_IT+0x22>
 800207a:	bf00      	nop
 800207c:	40010000 	.word	0x40010000

08002080 <HAL_TIM_IC_Start_IT>:
{
 8002080:	b510      	push	{r4, lr}
 8002082:	4604      	mov	r4, r0
  switch (Channel)
 8002084:	290c      	cmp	r1, #12
 8002086:	d80d      	bhi.n	80020a4 <HAL_TIM_IC_Start_IT+0x24>
 8002088:	e8df f001 	tbb	[pc, r1]
 800208c:	0c0c0c07 	.word	0x0c0c0c07
 8002090:	0c0c0c17 	.word	0x0c0c0c17
 8002094:	0c0c0c1c 	.word	0x0c0c0c1c
 8002098:	21          	.byte	0x21
 8002099:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800209a:	6802      	ldr	r2, [r0, #0]
 800209c:	68d3      	ldr	r3, [r2, #12]
 800209e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020a2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f7ff ff56 	bl	8001f58 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6013      	str	r3, [r2, #0]
} 
 80020b6:	2000      	movs	r0, #0
 80020b8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	68d3      	ldr	r3, [r2, #12]
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	e7ee      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020c4:	6802      	ldr	r2, [r0, #0]
 80020c6:	68d3      	ldr	r3, [r2, #12]
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	e7e9      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020ce:	6802      	ldr	r2, [r0, #0]
 80020d0:	68d3      	ldr	r3, [r2, #12]
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	e7e4      	b.n	80020a2 <HAL_TIM_IC_Start_IT+0x22>

080020d8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80020d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020dc:	2b01      	cmp	r3, #1
{
 80020de:	b510      	push	{r4, lr}
 80020e0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80020e4:	d018      	beq.n	8002118 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80020e6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80020ea:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80020ec:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80020ee:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80020f0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80020f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020f6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4322      	orrs	r2, r4
 80020fc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800210c:	2301      	movs	r3, #1
 800210e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002112:	2300      	movs	r3, #0
 8002114:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002118:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800211a:	bd10      	pop	{r4, pc}

0800211c <HAL_TIMEx_CommutationCallback>:
 800211c:	4770      	bx	lr

0800211e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800211e:	4770      	bx	lr

08002120 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002120:	6803      	ldr	r3, [r0, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002128:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002132:	2320      	movs	r3, #32
 8002134:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002138:	4770      	bx	lr
	...

0800213c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002140:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002142:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002144:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002146:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800214c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800214e:	6133      	str	r3, [r6, #16]
{
 8002150:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002152:	6883      	ldr	r3, [r0, #8]
 8002154:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002156:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002158:	4303      	orrs	r3, r0
 800215a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800215c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002160:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002162:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002166:	430b      	orrs	r3, r1
 8002168:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800216a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800216c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800216e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002174:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002176:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800217a:	6173      	str	r3, [r6, #20]
 800217c:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217e:	d17c      	bne.n	800227a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002180:	429e      	cmp	r6, r3
 8002182:	d003      	beq.n	800218c <UART_SetConfig+0x50>
 8002184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002188:	429e      	cmp	r6, r3
 800218a:	d144      	bne.n	8002216 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800218c:	f7ff f948 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 8002190:	2519      	movs	r5, #25
 8002192:	fb05 f300 	mul.w	r3, r5, r0
 8002196:	6860      	ldr	r0, [r4, #4]
 8002198:	f04f 0964 	mov.w	r9, #100	; 0x64
 800219c:	0040      	lsls	r0, r0, #1
 800219e:	fbb3 f3f0 	udiv	r3, r3, r0
 80021a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80021a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021aa:	f7ff f939 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	4368      	muls	r0, r5
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fbb0 f7f3 	udiv	r7, r0, r3
 80021b8:	f7ff f932 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	4368      	muls	r0, r5
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80021ca:	fb09 7313 	mls	r3, r9, r3, r7
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	3332      	adds	r3, #50	; 0x32
 80021d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80021dc:	f7ff f920 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80021e0:	6862      	ldr	r2, [r4, #4]
 80021e2:	4368      	muls	r0, r5
 80021e4:	0052      	lsls	r2, r2, #1
 80021e6:	fbb0 faf2 	udiv	sl, r0, r2
 80021ea:	f7ff f919 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021ee:	6863      	ldr	r3, [r4, #4]
 80021f0:	4368      	muls	r0, r5
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80021fc:	fb09 a313 	mls	r3, r9, r3, sl
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	fbb3 f3f9 	udiv	r3, r3, r9
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800220e:	443b      	add	r3, r7
 8002210:	60b3      	str	r3, [r6, #8]
 8002212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002216:	f7ff f8f3 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 800221a:	2519      	movs	r5, #25
 800221c:	fb05 f300 	mul.w	r3, r5, r0
 8002220:	6860      	ldr	r0, [r4, #4]
 8002222:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002226:	0040      	lsls	r0, r0, #1
 8002228:	fbb3 f3f0 	udiv	r3, r3, r0
 800222c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002230:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002234:	f7ff f8e4 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	4368      	muls	r0, r5
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002242:	f7ff f8dd 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	4368      	muls	r0, r5
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002250:	fbb3 f3f9 	udiv	r3, r3, r9
 8002254:	fb09 7313 	mls	r3, r9, r3, r7
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	3332      	adds	r3, #50	; 0x32
 800225c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002266:	f7ff f8cb 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 800226a:	6862      	ldr	r2, [r4, #4]
 800226c:	4368      	muls	r0, r5
 800226e:	0052      	lsls	r2, r2, #1
 8002270:	fbb0 faf2 	udiv	sl, r0, r2
 8002274:	f7ff f8c4 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002278:	e7b9      	b.n	80021ee <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800227a:	429e      	cmp	r6, r3
 800227c:	d002      	beq.n	8002284 <UART_SetConfig+0x148>
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <UART_SetConfig+0x230>)
 8002280:	429e      	cmp	r6, r3
 8002282:	d140      	bne.n	8002306 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002284:	f7ff f8cc 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 8002288:	6867      	ldr	r7, [r4, #4]
 800228a:	2519      	movs	r5, #25
 800228c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002290:	fb05 f300 	mul.w	r3, r5, r0
 8002294:	00bf      	lsls	r7, r7, #2
 8002296:	fbb3 f3f7 	udiv	r3, r3, r7
 800229a:	fbb3 f3f9 	udiv	r3, r3, r9
 800229e:	011f      	lsls	r7, r3, #4
 80022a0:	f7ff f8be 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80022a4:	6863      	ldr	r3, [r4, #4]
 80022a6:	4368      	muls	r0, r5
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fbb0 f8f3 	udiv	r8, r0, r3
 80022ae:	f7ff f8b7 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80022b2:	6863      	ldr	r3, [r4, #4]
 80022b4:	4368      	muls	r0, r5
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80022c0:	fb09 8313 	mls	r3, r9, r3, r8
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022cc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80022d0:	f7ff f8a6 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	4368      	muls	r0, r5
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	fbb0 faf2 	udiv	sl, r0, r2
 80022de:	f7ff f89f 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022e2:	6863      	ldr	r3, [r4, #4]
 80022e4:	4368      	muls	r0, r5
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80022f0:	fb09 a313 	mls	r3, r9, r3, sl
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	3332      	adds	r3, #50	; 0x32
 80022f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	ea43 0308 	orr.w	r3, r3, r8
 8002304:	e783      	b.n	800220e <UART_SetConfig+0xd2>
 8002306:	f7ff f87b 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 800230a:	6867      	ldr	r7, [r4, #4]
 800230c:	2519      	movs	r5, #25
 800230e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002312:	fb05 f300 	mul.w	r3, r5, r0
 8002316:	00bf      	lsls	r7, r7, #2
 8002318:	fbb3 f3f7 	udiv	r3, r3, r7
 800231c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002320:	011f      	lsls	r7, r3, #4
 8002322:	f7ff f86d 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	4368      	muls	r0, r5
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002330:	f7ff f866 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002334:	6863      	ldr	r3, [r4, #4]
 8002336:	4368      	muls	r0, r5
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002342:	fb09 8313 	mls	r3, r9, r3, r8
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	3332      	adds	r3, #50	; 0x32
 800234a:	fbb3 f3f9 	udiv	r3, r3, r9
 800234e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002352:	f7ff f855 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	4368      	muls	r0, r5
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	fbb0 faf2 	udiv	sl, r0, r2
 8002360:	f7ff f84e 	bl	8001400 <HAL_RCC_GetPCLK1Freq>
 8002364:	e7bd      	b.n	80022e2 <UART_SetConfig+0x1a6>
 8002366:	bf00      	nop
 8002368:	40011000 	.word	0x40011000
 800236c:	40011400 	.word	0x40011400

08002370 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	4604      	mov	r4, r0
 8002374:	460e      	mov	r6, r1
 8002376:	4617      	mov	r7, r2
 8002378:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800237a:	6821      	ldr	r1, [r4, #0]
 800237c:	680b      	ldr	r3, [r1, #0]
 800237e:	ea36 0303 	bics.w	r3, r6, r3
 8002382:	d101      	bne.n	8002388 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002384:	2000      	movs	r0, #0
}
 8002386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002388:	1c6b      	adds	r3, r5, #1
 800238a:	d0f7      	beq.n	800237c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800238c:	b995      	cbnz	r5, 80023b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002396:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80023a0:	2320      	movs	r3, #32
 80023a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80023aa:	2300      	movs	r3, #0
 80023ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80023b0:	2003      	movs	r0, #3
 80023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023b4:	f7fe fdc0 	bl	8000f38 <HAL_GetTick>
 80023b8:	1bc0      	subs	r0, r0, r7
 80023ba:	4285      	cmp	r5, r0
 80023bc:	d2dd      	bcs.n	800237a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80023be:	e7e6      	b.n	800238e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023c0 <HAL_UART_Init>:
{
 80023c0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80023c2:	4604      	mov	r4, r0
 80023c4:	b340      	cbz	r0, 8002418 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80023c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ce:	b91b      	cbnz	r3, 80023d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023d4:	f000 fd34 	bl	8002e40 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023da:	2324      	movs	r3, #36	; 0x24
 80023dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023e0:	68d3      	ldr	r3, [r2, #12]
 80023e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fea7 	bl	800213c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023fe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002406:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800240a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800240e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002412:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002416:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
}
 800241a:	bd10      	pop	{r4, pc}

0800241c <HAL_UART_Transmit>:
{
 800241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002420:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002422:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002426:	2b20      	cmp	r3, #32
{
 8002428:	4604      	mov	r4, r0
 800242a:	460d      	mov	r5, r1
 800242c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800242e:	d14f      	bne.n	80024d0 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002430:	2900      	cmp	r1, #0
 8002432:	d04a      	beq.n	80024ca <HAL_UART_Transmit+0xae>
 8002434:	2a00      	cmp	r2, #0
 8002436:	d048      	beq.n	80024ca <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002438:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800243c:	2b01      	cmp	r3, #1
 800243e:	d047      	beq.n	80024d0 <HAL_UART_Transmit+0xb4>
 8002440:	2301      	movs	r3, #1
 8002442:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244a:	2321      	movs	r3, #33	; 0x21
 800244c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002450:	f7fe fd72 	bl	8000f38 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002454:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002458:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800245a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800245e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002460:	b29b      	uxth	r3, r3
 8002462:	b96b      	cbnz	r3, 8002480 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	4632      	mov	r2, r6
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff ff80 	bl	8002370 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002470:	b9b0      	cbnz	r0, 80024a0 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002472:	2320      	movs	r3, #32
 8002474:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002478:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002480:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002482:	3b01      	subs	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002488:	68a3      	ldr	r3, [r4, #8]
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	4632      	mov	r2, r6
 8002490:	463b      	mov	r3, r7
 8002492:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002496:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002498:	d10e      	bne.n	80024b8 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	f7ff ff69 	bl	8002370 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800249e:	b110      	cbz	r0, 80024a6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80024a0:	2003      	movs	r0, #3
 80024a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024a6:	882b      	ldrh	r3, [r5, #0]
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80024b0:	6923      	ldr	r3, [r4, #16]
 80024b2:	b943      	cbnz	r3, 80024c6 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80024b4:	3502      	adds	r5, #2
 80024b6:	e7d2      	b.n	800245e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b8:	f7ff ff5a 	bl	8002370 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1ef      	bne.n	80024a0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	782a      	ldrb	r2, [r5, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	3501      	adds	r5, #1
 80024c8:	e7c9      	b.n	800245e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80024d0:	2002      	movs	r0, #2
}
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024d6 <HAL_UART_TxCpltCallback>:
 80024d6:	4770      	bx	lr

080024d8 <HAL_UART_RxCpltCallback>:
 80024d8:	4770      	bx	lr

080024da <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024da:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024de:	2b22      	cmp	r3, #34	; 0x22
{
 80024e0:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80024e2:	d132      	bne.n	800254a <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e4:	6883      	ldr	r3, [r0, #8]
 80024e6:	6901      	ldr	r1, [r0, #16]
 80024e8:	6802      	ldr	r2, [r0, #0]
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024f0:	d11f      	bne.n	8002532 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024f4:	b9c9      	cbnz	r1, 800252a <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024fa:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80024fe:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002500:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002502:	3c01      	subs	r4, #1
 8002504:	b2a4      	uxth	r4, r4
 8002506:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002508:	b96c      	cbnz	r4, 8002526 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800250a:	6803      	ldr	r3, [r0, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002512:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800251c:	2320      	movs	r3, #32
 800251e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002522:	f7ff ffd9 	bl	80024d8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002526:	2000      	movs	r0, #0
}
 8002528:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f823 2b01 	strh.w	r2, [r3], #1
 8002530:	e7e5      	b.n	80024fe <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002532:	b921      	cbnz	r1, 800253e <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002534:	1c59      	adds	r1, r3, #1
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e7e0      	b.n	8002500 <UART_Receive_IT+0x26>
 800253e:	6852      	ldr	r2, [r2, #4]
 8002540:	1c59      	adds	r1, r3, #1
 8002542:	6281      	str	r1, [r0, #40]	; 0x28
 8002544:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002548:	e7f7      	b.n	800253a <UART_Receive_IT+0x60>
    return HAL_BUSY;
 800254a:	2002      	movs	r0, #2
 800254c:	bd10      	pop	{r4, pc}

0800254e <HAL_UART_ErrorCallback>:
 800254e:	4770      	bx	lr

08002550 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002550:	6803      	ldr	r3, [r0, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002554:	68d9      	ldr	r1, [r3, #12]
{
 8002556:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8002558:	0716      	lsls	r6, r2, #28
{
 800255a:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800255c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800255e:	d107      	bne.n	8002570 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002560:	0696      	lsls	r6, r2, #26
 8002562:	d55a      	bpl.n	800261a <HAL_UART_IRQHandler+0xca>
 8002564:	068d      	lsls	r5, r1, #26
 8002566:	d558      	bpl.n	800261a <HAL_UART_IRQHandler+0xca>
}
 8002568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800256c:	f7ff bfb5 	b.w	80024da <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002570:	f015 0501 	ands.w	r5, r5, #1
 8002574:	d102      	bne.n	800257c <HAL_UART_IRQHandler+0x2c>
 8002576:	f411 7f90 	tst.w	r1, #288	; 0x120
 800257a:	d04e      	beq.n	800261a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800257c:	07d3      	lsls	r3, r2, #31
 800257e:	d505      	bpl.n	800258c <HAL_UART_IRQHandler+0x3c>
 8002580:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002582:	bf42      	ittt	mi
 8002584:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002586:	f043 0301 	orrmi.w	r3, r3, #1
 800258a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258c:	0750      	lsls	r0, r2, #29
 800258e:	d504      	bpl.n	800259a <HAL_UART_IRQHandler+0x4a>
 8002590:	b11d      	cbz	r5, 800259a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259a:	0793      	lsls	r3, r2, #30
 800259c:	d504      	bpl.n	80025a8 <HAL_UART_IRQHandler+0x58>
 800259e:	b11d      	cbz	r5, 80025a8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a8:	0716      	lsls	r6, r2, #28
 80025aa:	d504      	bpl.n	80025b6 <HAL_UART_IRQHandler+0x66>
 80025ac:	b11d      	cbz	r5, 80025b6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d066      	beq.n	800268a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025bc:	0695      	lsls	r5, r2, #26
 80025be:	d504      	bpl.n	80025ca <HAL_UART_IRQHandler+0x7a>
 80025c0:	0688      	lsls	r0, r1, #26
 80025c2:	d502      	bpl.n	80025ca <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff ff88 	bl	80024da <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025d0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80025d2:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025d4:	d402      	bmi.n	80025dc <HAL_UART_IRQHandler+0x8c>
 80025d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025da:	d01a      	beq.n	8002612 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80025dc:	f7ff fda0 	bl	8002120 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	0652      	lsls	r2, r2, #25
 80025e6:	d510      	bpl.n	800260a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e8:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80025ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80025f2:	b150      	cbz	r0, 800260a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025f4:	4b25      	ldr	r3, [pc, #148]	; (800268c <HAL_UART_IRQHandler+0x13c>)
 80025f6:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025f8:	f7fe fd31 	bl	800105e <HAL_DMA_Abort_IT>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d044      	beq.n	800268a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002600:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002606:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002608:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff ff9f 	bl	800254e <HAL_UART_ErrorCallback>
 8002610:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002612:	f7ff ff9c 	bl	800254e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002616:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002618:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800261a:	0616      	lsls	r6, r2, #24
 800261c:	d527      	bpl.n	800266e <HAL_UART_IRQHandler+0x11e>
 800261e:	060d      	lsls	r5, r1, #24
 8002620:	d525      	bpl.n	800266e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002622:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002626:	2a21      	cmp	r2, #33	; 0x21
 8002628:	d12f      	bne.n	800268a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800262a:	68a2      	ldr	r2, [r4, #8]
 800262c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002630:	6a22      	ldr	r2, [r4, #32]
 8002632:	d117      	bne.n	8002664 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002634:	8811      	ldrh	r1, [r2, #0]
 8002636:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800263a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800263c:	6921      	ldr	r1, [r4, #16]
 800263e:	b979      	cbnz	r1, 8002660 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002640:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002642:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002644:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002646:	3a01      	subs	r2, #1
 8002648:	b292      	uxth	r2, r2
 800264a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800264c:	b9ea      	cbnz	r2, 800268a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002660:	3201      	adds	r2, #1
 8002662:	e7ee      	b.n	8002642 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002664:	1c51      	adds	r1, r2, #1
 8002666:	6221      	str	r1, [r4, #32]
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e7ea      	b.n	8002644 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800266e:	0650      	lsls	r0, r2, #25
 8002670:	d50b      	bpl.n	800268a <HAL_UART_IRQHandler+0x13a>
 8002672:	064a      	lsls	r2, r1, #25
 8002674:	d509      	bpl.n	800268a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800267e:	2320      	movs	r3, #32
 8002680:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ff26 	bl	80024d6 <HAL_UART_TxCpltCallback>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	08002691 	.word	0x08002691

08002690 <UART_DMAAbortOnError>:
{
 8002690:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002692:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002698:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800269a:	f7ff ff58 	bl	800254e <HAL_UART_ErrorCallback>
 800269e:	bd08      	pop	{r3, pc}

080026a0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim->Instance==TIM2){
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 80026a8:	b08d      	sub	sp, #52	; 0x34
 80026aa:	4604      	mov	r4, r0
	if(htim->Instance==TIM2){
 80026ac:	d109      	bne.n	80026c2 <HAL_TIM_IC_CaptureCallback+0x22>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==1){
 80026ae:	2120      	movs	r1, #32
 80026b0:	483d      	ldr	r0, [pc, #244]	; (80027a8 <HAL_TIM_IC_CaptureCallback+0x108>)
 80026b2:	f7fe fdd3 	bl	800125c <HAL_GPIO_ReadPin>
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x10c>)
 80026b8:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80026ba:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==1){
 80026bc:	d111      	bne.n	80026e2 <HAL_TIM_IC_CaptureCallback+0x42>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
			floata=(int)((distancea-inta)*100);
			ultrasonic=1;
			HAL_TIM_Base_Start_IT(&htim1);
		}
	}
	if(htim->Instance==TIM3){
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d109      	bne.n	80026de <HAL_TIM_IC_CaptureCallback+0x3e>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)==1){
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	4839      	ldr	r0, [pc, #228]	; (80027b4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80026ce:	f7fe fdc5 	bl	800125c <HAL_GPIO_ReadPin>
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80026d4:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim3,0);
 80026d6:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)==1){
 80026d8:	d12a      	bne.n	8002730 <HAL_TIM_IC_CaptureCallback+0x90>
			__HAL_TIM_SET_COUNTER(&htim3,0);
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
			sprintf(tosend,"%d.%02d , %d.%02d\r\n",inta,floata,intb,floatb);
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
			ultrasonic=2;
		}
	}
}
 80026de:	b00d      	add	sp, #52	; 0x34
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int cnt=__HAL_TIM_GET_COUNTER(&htim2);
 80026e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
			distancea=cnt/(double)58;
 80026e4:	f7fd ff2e 	bl	8000544 <__aeabi_i2d>
 80026e8:	2200      	movs	r2, #0
 80026ea:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x11c>)
 80026ec:	f7fe f8ba 	bl	8000864 <__aeabi_ddiv>
 80026f0:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80026f2:	460f      	mov	r7, r1
 80026f4:	4606      	mov	r6, r0
 80026f6:	e9c3 6700 	strd	r6, r7, [r3]
			inta=(int)distancea;
 80026fa:	f7fe fa23 	bl	8000b44 <__aeabi_d2iz>
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002700:	6018      	str	r0, [r3, #0]
			floata=(int)((distancea-inta)*100);
 8002702:	f7fd ff1f 	bl	8000544 <__aeabi_i2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4630      	mov	r0, r6
 800270c:	4639      	mov	r1, r7
 800270e:	f7fd fdcb 	bl	80002a8 <__aeabi_dsub>
 8002712:	2200      	movs	r2, #0
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002716:	f7fd ff7b 	bl	8000610 <__aeabi_dmul>
 800271a:	f7fe fa13 	bl	8000b44 <__aeabi_d2iz>
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002720:	6018      	str	r0, [r3, #0]
			ultrasonic=1;
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_TIM_IC_CaptureCallback+0x130>)
			HAL_TIM_Base_Start_IT(&htim1);
 8002724:	482b      	ldr	r0, [pc, #172]	; (80027d4 <HAL_TIM_IC_CaptureCallback+0x134>)
			ultrasonic=1;
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 800272a:	f7ff f891 	bl	8001850 <HAL_TIM_Base_Start_IT>
 800272e:	e7c8      	b.n	80026c2 <HAL_TIM_IC_CaptureCallback+0x22>
			int cnt=__HAL_TIM_GET_COUNTER(&htim3);
 8002730:	6a58      	ldr	r0, [r3, #36]	; 0x24
			distanceb=cnt/(double)58;
 8002732:	f7fd ff07 	bl	8000544 <__aeabi_i2d>
 8002736:	2200      	movs	r2, #0
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800273a:	f7fe f893 	bl	8000864 <__aeabi_ddiv>
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002740:	460f      	mov	r7, r1
 8002742:	4606      	mov	r6, r0
 8002744:	e9c3 6700 	strd	r6, r7, [r3]
			intb=(int)distanceb;
 8002748:	f7fe f9fc 	bl	8000b44 <__aeabi_d2iz>
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800274e:	6018      	str	r0, [r3, #0]
 8002750:	4604      	mov	r4, r0
			floatb=(int)((distanceb-intb)*100);
 8002752:	f7fd fef7 	bl	8000544 <__aeabi_i2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4630      	mov	r0, r6
 800275c:	4639      	mov	r1, r7
 800275e:	f7fd fda3 	bl	80002a8 <__aeabi_dsub>
 8002762:	2200      	movs	r2, #0
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002766:	f7fd ff53 	bl	8000610 <__aeabi_dmul>
 800276a:	f7fe f9eb 	bl	8000b44 <__aeabi_d2iz>
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002770:	4605      	mov	r5, r0
 8002772:	6018      	str	r0, [r3, #0]
			char tosend[40]={0};
 8002774:	2228      	movs	r2, #40	; 0x28
 8002776:	2100      	movs	r1, #0
 8002778:	a802      	add	r0, sp, #8
 800277a:	f000 fc33 	bl	8002fe4 <memset>
			sprintf(tosend,"%d.%02d , %d.%02d\r\n",inta,floata,intb,floatb);
 800277e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4916      	ldr	r1, [pc, #88]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800278c:	a802      	add	r0, sp, #8
 800278e:	f000 fc31 	bl	8002ff4 <siprintf>
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
 8002792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002796:	2228      	movs	r2, #40	; 0x28
 8002798:	a902      	add	r1, sp, #8
 800279a:	4813      	ldr	r0, [pc, #76]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x148>)
 800279c:	f7ff fe3e 	bl	800241c <HAL_UART_Transmit>
			ultrasonic=2;
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	e79a      	b.n	80026de <HAL_TIM_IC_CaptureCallback+0x3e>
 80027a8:	40020000 	.word	0x40020000
 80027ac:	200001c4 	.word	0x200001c4
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	20000148 	.word	0x20000148
 80027bc:	404d0000 	.word	0x404d0000
 80027c0:	20000098 	.word	0x20000098
 80027c4:	20000140 	.word	0x20000140
 80027c8:	40590000 	.word	0x40590000
 80027cc:	20000184 	.word	0x20000184
 80027d0:	200000ac 	.word	0x200000ac
 80027d4:	20000188 	.word	0x20000188
 80027d8:	200000a0 	.word	0x200000a0
 80027dc:	200000c0 	.word	0x200000c0
 80027e0:	20000144 	.word	0x20000144
 80027e4:	08003864 	.word	0x08003864
 80027e8:	20000100 	.word	0x20000100

080027ec <HAL_TIM_PeriodElapsedCallback>:

int tim1Count=LRCALI_ULPERIOD;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80027ec:	b538      	push	{r3, r4, r5, lr}
	if(htim->Instance==TIM1){
 80027ee:	6802      	ldr	r2, [r0, #0]
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d139      	bne.n	800286a <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(tim1Count<LRCALI_ULPERIOD){
 80027f6:	4d1e      	ldr	r5, [pc, #120]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	f641 3257 	movw	r2, #6999	; 0x1b57
 80027fe:	4293      	cmp	r3, r2
 8002800:	dc02      	bgt.n	8002808 <HAL_TIM_PeriodElapsedCallback+0x1c>
			tim1Count++;
 8002802:	3301      	adds	r3, #1
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
		}else{
			HAL_TIM_Base_Stop_IT(&htim1);
 8002808:	481a      	ldr	r0, [pc, #104]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800280a:	f7ff f82c 	bl	8001866 <HAL_TIM_Base_Stop_IT>
			if(ultrasonic==0){
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	b9cc      	cbnz	r4, 8002848 <HAL_TIM_PeriodElapsedCallback+0x5c>
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){
 8002814:	2120      	movs	r1, #32
 8002816:	4819      	ldr	r0, [pc, #100]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002818:	f7fe fd20 	bl	800125c <HAL_GPIO_ReadPin>
 800281c:	b960      	cbnz	r0, 8002838 <HAL_TIM_PeriodElapsedCallback+0x4c>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
 800281e:	2201      	movs	r2, #1
 8002820:	2120      	movs	r1, #32
					tim1Count=0;
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
				}
			}else if(ultrasonic==1){
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==0){
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
 8002822:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002826:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 800282a:	f7fe fd1d 	bl	8001268 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Start_IT(&htim1);
 800282e:	4811      	ldr	r0, [pc, #68]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x88>)
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
				}
			}
		}
	}
}
 8002830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					HAL_TIM_Base_Start_IT(&htim1);
 8002834:	f7ff b80c 	b.w	8001850 <HAL_TIM_Base_Start_IT>
					tim1Count=0;
 8002838:	602c      	str	r4, [r5, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 800283a:	4622      	mov	r2, r4
 800283c:	2120      	movs	r1, #32
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 800283e:	480f      	ldr	r0, [pc, #60]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x90>)
}
 8002840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 8002844:	f7fe bd10 	b.w	8001268 <HAL_GPIO_WritePin>
			}else if(ultrasonic==1){
 8002848:	2c01      	cmp	r4, #1
 800284a:	d10e      	bne.n	800286a <HAL_TIM_PeriodElapsedCallback+0x7e>
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==0){
 800284c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002850:	480a      	ldr	r0, [pc, #40]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002852:	f7fe fd03 	bl	800125c <HAL_GPIO_ReadPin>
 8002856:	b918      	cbnz	r0, 8002860 <HAL_TIM_PeriodElapsedCallback+0x74>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
 8002858:	4622      	mov	r2, r4
 800285a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285e:	e7e0      	b.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x36>
					tim1Count=0;
 8002860:	2200      	movs	r2, #0
 8002862:	602a      	str	r2, [r5, #0]
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 8002864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002868:	e7e9      	b.n	800283e <HAL_TIM_PeriodElapsedCallback+0x52>
 800286a:	bd38      	pop	{r3, r4, r5, pc}
 800286c:	40010000 	.word	0x40010000
 8002870:	20000008 	.word	0x20000008
 8002874:	20000188 	.word	0x20000188
 8002878:	200000ac 	.word	0x200000ac
 800287c:	40020400 	.word	0x40020400

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:

int pwmCount=0,pwm4Count=0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance==TIM4){
 8002880:	6802      	ldr	r2, [r0, #0]
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002884:	429a      	cmp	r2, r3
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002886:	b510      	push	{r4, lr}
	if(htim->Instance==TIM4){
 8002888:	d10b      	bne.n	80028a2 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
		if(pwm4Count++>LRCALI_PWMWIDTH){
 800288a:	4c07      	ldr	r4, [pc, #28]	; (80028a8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	2b32      	cmp	r3, #50	; 0x32
 8002892:	6022      	str	r2, [r4, #0]
 8002894:	dd05      	ble.n	80028a2 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
			HAL_TIM_PWM_Stop_IT(&htim4,TIM_CHANNEL_3);
 8002896:	2108      	movs	r1, #8
 8002898:	4804      	ldr	r0, [pc, #16]	; (80028ac <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800289a:	f7ff fba3 	bl	8001fe4 <HAL_TIM_PWM_Stop_IT>
			pwm4Count=0;
 800289e:	2300      	movs	r3, #0
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	bd10      	pop	{r4, pc}
 80028a4:	40000800 	.word	0x40000800
 80028a8:	200000a8 	.word	0x200000a8
 80028ac:	200000c4 	.word	0x200000c4

080028b0 <LRCalibrate>:
		}
	}
}

int LRCalibrate(){
	if(ultrasonic==2){
 80028b0:	4b33      	ldr	r3, [pc, #204]	; (8002980 <LRCalibrate+0xd0>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2a02      	cmp	r2, #2
int LRCalibrate(){
 80028b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ba:	4698      	mov	r8, r3
	if(ultrasonic==2){
 80028bc:	d14c      	bne.n	8002958 <LRCalibrate+0xa8>
		  double dl=distancea,dr=distanceb;
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <LRCalibrate+0xd4>)
 80028c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <LRCalibrate+0xd8>)
		  if(dl*LRCALI_MAXVALUE>dr && dr*LRCALI_MAXVALUE>dl){
 80028c6:	2200      	movs	r2, #0
		  double dl=distancea,dr=distanceb;
 80028c8:	e9d3 6700 	ldrd	r6, r7, [r3]
		  if(dl*LRCALI_MAXVALUE>dr && dr*LRCALI_MAXVALUE>dl){
 80028cc:	4620      	mov	r0, r4
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <LRCalibrate+0xdc>)
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fe9d 	bl	8000610 <__aeabi_dmul>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4630      	mov	r0, r6
 80028dc:	4639      	mov	r1, r7
 80028de:	f7fe f909 	bl	8000af4 <__aeabi_dcmplt>
 80028e2:	b398      	cbz	r0, 800294c <LRCalibrate+0x9c>
 80028e4:	2200      	movs	r2, #0
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <LRCalibrate+0xdc>)
 80028e8:	4630      	mov	r0, r6
 80028ea:	4639      	mov	r1, r7
 80028ec:	f7fd fe90 	bl	8000610 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fe f8fc 	bl	8000af4 <__aeabi_dcmplt>
 80028fc:	b330      	cbz	r0, 800294c <LRCalibrate+0x9c>
			  if( (dr-dl)>LRCALI_MINVALUE ||(dl-dr)>LRCALI_MINVALUE ){
 80028fe:	4622      	mov	r2, r4
 8002900:	462b      	mov	r3, r5
 8002902:	4630      	mov	r0, r6
 8002904:	4639      	mov	r1, r7
 8002906:	f7fd fccf 	bl	80002a8 <__aeabi_dsub>
 800290a:	2200      	movs	r2, #0
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <LRCalibrate+0xe0>)
 800290e:	f7fe f90f 	bl	8000b30 <__aeabi_dcmpgt>
 8002912:	b950      	cbnz	r0, 800292a <LRCalibrate+0x7a>
 8002914:	4632      	mov	r2, r6
 8002916:	463b      	mov	r3, r7
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fcc4 	bl	80002a8 <__aeabi_dsub>
 8002920:	2200      	movs	r2, #0
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <LRCalibrate+0xe0>)
 8002924:	f7fe f904 	bl	8000b30 <__aeabi_dcmpgt>
 8002928:	b330      	cbz	r0, 8002978 <LRCalibrate+0xc8>
				  if(dl>dr){
 800292a:	4632      	mov	r2, r6
 800292c:	463b      	mov	r3, r7
 800292e:	4620      	mov	r0, r4
 8002930:	4629      	mov	r1, r5
 8002932:	f7fe f8fd 	bl	8000b30 <__aeabi_dcmpgt>
 8002936:	b1a8      	cbz	r0, 8002964 <LRCalibrate+0xb4>
					  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,1);
 8002938:	2201      	movs	r2, #1
					  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_3);
				  }else if(dl<dr){
					  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 800293a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800293e:	4815      	ldr	r0, [pc, #84]	; (8002994 <LRCalibrate+0xe4>)
 8002940:	f7fe fc92 	bl	8001268 <HAL_GPIO_WritePin>
					  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_3);
 8002944:	2108      	movs	r1, #8
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <LRCalibrate+0xe8>)
 8002948:	f7ff fb12 	bl	8001f70 <HAL_TIM_PWM_Start_IT>

			  }else{
				  return 1;
			  }
		  }
		  ultrasonic=0;
 800294c:	2300      	movs	r3, #0
		  HAL_TIM_Base_Start_IT(&htim1);
 800294e:	4813      	ldr	r0, [pc, #76]	; (800299c <LRCalibrate+0xec>)
		  ultrasonic=0;
 8002950:	f8c8 3000 	str.w	r3, [r8]
		  HAL_TIM_Base_Start_IT(&htim1);
 8002954:	f7fe ff7c 	bl	8001850 <HAL_TIM_Base_Start_IT>
	  }
	  HAL_Delay(50);
 8002958:	2032      	movs	r0, #50	; 0x32
 800295a:	f7fe faf3 	bl	8000f44 <HAL_Delay>
	  return 0;
 800295e:	2000      	movs	r0, #0
 8002960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				  }else if(dl<dr){
 8002964:	4632      	mov	r2, r6
 8002966:	463b      	mov	r3, r7
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fe f8c2 	bl	8000af4 <__aeabi_dcmplt>
 8002970:	2800      	cmp	r0, #0
 8002972:	d0eb      	beq.n	800294c <LRCalibrate+0x9c>
					  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002974:	2200      	movs	r2, #0
 8002976:	e7e0      	b.n	800293a <LRCalibrate+0x8a>
				  return 1;
 8002978:	2001      	movs	r0, #1
}
 800297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800297e:	bf00      	nop
 8002980:	200000ac 	.word	0x200000ac
 8002984:	20000098 	.word	0x20000098
 8002988:	200000a0 	.word	0x200000a0
 800298c:	40280000 	.word	0x40280000
 8002990:	3ff00000 	.word	0x3ff00000
 8002994:	40020400 	.word	0x40020400
 8002998:	200000c4 	.word	0x200000c4
 800299c:	20000188 	.word	0x20000188

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b510      	push	{r4, lr}
 80029a2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	2200      	movs	r2, #0
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <SystemClock_Config+0x90>)
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029ac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029b0:	6419      	str	r1, [r3, #64]	; 0x40
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029b4:	491f      	ldr	r1, [pc, #124]	; (8002a34 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029be:	9201      	str	r2, [sp, #4]
 80029c0:	680b      	ldr	r3, [r1, #0]
 80029c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	680b      	ldr	r3, [r1, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029ce:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029d8:	2302      	movs	r3, #2
 80029da:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029dc:	2301      	movs	r3, #1
 80029de:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80029e2:	2310      	movs	r3, #16
 80029e4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e6:	f7fe fd2b 	bl	8001440 <HAL_RCC_OscConfig>
 80029ea:	4601      	mov	r1, r0
 80029ec:	b100      	cbz	r0, 80029f0 <SystemClock_Config+0x50>
 80029ee:	e7fe      	b.n	80029ee <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029f2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029f6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f8:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029fa:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fc:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029fe:	f7fe fc5f 	bl	80012c0 <HAL_RCC_ClockConfig>
 8002a02:	4604      	mov	r4, r0
 8002a04:	b100      	cbz	r0, 8002a08 <SystemClock_Config+0x68>
 8002a06:	e7fe      	b.n	8002a06 <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a08:	f7fe fcf4 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8002a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a14:	f7fe fafc 	bl	8001010 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f7fe fb0f 	bl	800103c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a1e:	4622      	mov	r2, r4
 8002a20:	4621      	mov	r1, r4
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295
 8002a26:	f7fe fab3 	bl	8000f90 <HAL_NVIC_SetPriority>
}
 8002a2a:	b014      	add	sp, #80	; 0x50
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40007000 	.word	0x40007000

08002a38 <main>:
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b092      	sub	sp, #72	; 0x48
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	2400      	movs	r4, #0
  HAL_Init();
 8002a3e:	f7fe fa55 	bl	8000eec <HAL_Init>
  SystemClock_Config();
 8002a42:	f7ff ffad 	bl	80029a0 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <main+0x224>)
 8002a48:	9401      	str	r4, [sp, #4]
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a4c:	4884      	ldr	r0, [pc, #528]	; (8002c60 <main+0x228>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	f042 0202 	orr.w	r2, r2, #2
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	f002 0202 	and.w	r2, r2, #2
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a5e:	9402      	str	r4, [sp, #8]
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
 8002a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a6e:	9202      	str	r2, [sp, #8]
 8002a70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a72:	9403      	str	r4, [sp, #12]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	f042 0204 	orr.w	r2, r2, #4
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	f002 0204 	and.w	r2, r2, #4
 8002a82:	9203      	str	r2, [sp, #12]
 8002a84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	9404      	str	r4, [sp, #16]
 8002a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a96:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a98:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a9a:	f242 2120 	movw	r1, #8736	; 0x2220
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pins : PB5 PB9 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8002aa4:	f7fe fbe0 	bl	8001268 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13;
 8002aa8:	f242 2320 	movw	r3, #8736	; 0x2220
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	486c      	ldr	r0, [pc, #432]	; (8002c60 <main+0x228>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13;
 8002aae:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f7fe fae3 	bl	8001084 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8002abe:	4869      	ldr	r0, [pc, #420]	; (8002c64 <main+0x22c>)
  huart3.Init.BaudRate = 115200;
 8002ac0:	4a69      	ldr	r2, [pc, #420]	; (8002c68 <main+0x230>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002ac4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ac8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002acc:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ace:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ad0:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ad2:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad4:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ad8:	f7ff fc72 	bl	80023c0 <HAL_UART_Init>
 8002adc:	b100      	cbz	r0, 8002ae0 <main+0xa8>
 8002ade:	e7fe      	b.n	8002ade <main+0xa6>
  htim3.Instance = TIM3;
 8002ae0:	4c62      	ldr	r4, [pc, #392]	; (8002c6c <main+0x234>)
  htim3.Init.Prescaler = 15;
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <main+0x238>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae4:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 15;
 8002ae6:	270f      	movs	r7, #15
  htim3.Init.Period = 0xffff;
 8002ae8:	f64f 79ff 	movw	r9, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aec:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aee:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 15;
 8002af0:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.Period = 0xffff;
 8002af4:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002af8:	f7ff f88c 	bl	8001c14 <HAL_TIM_Base_Init>
 8002afc:	b100      	cbz	r0, 8002b00 <main+0xc8>
 8002afe:	e7fe      	b.n	8002afe <main+0xc6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b00:	ad12      	add	r5, sp, #72	; 0x48
 8002b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b06:	f845 3d2c 	str.w	r3, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fe febf 	bl	8001890 <HAL_TIM_ConfigClockSource>
 8002b12:	b100      	cbz	r0, 8002b16 <main+0xde>
 8002b14:	e7fe      	b.n	8002b14 <main+0xdc>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff f8b0 	bl	8001c7c <HAL_TIM_IC_Init>
 8002b1c:	b100      	cbz	r0, 8002b20 <main+0xe8>
 8002b1e:	e7fe      	b.n	8002b1e <main+0xe6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b22:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b24:	a905      	add	r1, sp, #20
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7ff fad6 	bl	80020d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2c:	b100      	cbz	r0, 8002b30 <main+0xf8>
 8002b2e:	e7fe      	b.n	8002b2e <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b30:	260a      	movs	r6, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b32:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8002b34:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b36:	2204      	movs	r2, #4
 8002b38:	a90b      	add	r1, sp, #44	; 0x2c
 8002b3a:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b3c:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b3e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b42:	f7ff f8ef 	bl	8001d24 <HAL_TIM_IC_ConfigChannel>
 8002b46:	b100      	cbz	r0, 8002b4a <main+0x112>
 8002b48:	e7fe      	b.n	8002b48 <main+0x110>
  htim2.Instance = TIM2;
 8002b4a:	4c4a      	ldr	r4, [pc, #296]	; (8002c74 <main+0x23c>)
 8002b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002b54:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 15;
 8002b56:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.Period = 0xffff;
 8002b5a:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002b5e:	f7ff f88d 	bl	8001c7c <HAL_TIM_IC_Init>
 8002b62:	b100      	cbz	r0, 8002b66 <main+0x12e>
 8002b64:	e7fe      	b.n	8002b64 <main+0x12c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b68:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fab3 	bl	80020d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b72:	4602      	mov	r2, r0
 8002b74:	b100      	cbz	r0, 8002b78 <main+0x140>
 8002b76:	e7fe      	b.n	8002b76 <main+0x13e>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b78:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8002b7a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b7c:	a90b      	add	r1, sp, #44	; 0x2c
 8002b7e:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b80:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b82:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b86:	f7ff f8cd 	bl	8001d24 <HAL_TIM_IC_ConfigChannel>
 8002b8a:	b100      	cbz	r0, 8002b8e <main+0x156>
 8002b8c:	e7fe      	b.n	8002b8c <main+0x154>
  htim1.Instance = TIM1;
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <main+0x240>)
 8002b90:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <main+0x244>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	6098      	str	r0, [r3, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b94:	6118      	str	r0, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b96:	6158      	str	r0, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b98:	4618      	mov	r0, r3
  htim1.Init.Prescaler = 15;
 8002b9a:	e883 0084 	stmia.w	r3, {r2, r7}
  htim1.Init.Period = 10;
 8002b9e:	60de      	str	r6, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba0:	f7ff f838 	bl	8001c14 <HAL_TIM_Base_Init>
 8002ba4:	b100      	cbz	r0, 8002ba8 <main+0x170>
 8002ba6:	e7fe      	b.n	8002ba6 <main+0x16e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bac:	a90b      	add	r1, sp, #44	; 0x2c
 8002bae:	4832      	ldr	r0, [pc, #200]	; (8002c78 <main+0x240>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bb2:	f7fe fe6d 	bl	8001890 <HAL_TIM_ConfigClockSource>
 8002bb6:	b100      	cbz	r0, 8002bba <main+0x182>
 8002bb8:	e7fe      	b.n	8002bb8 <main+0x180>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bba:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	482d      	ldr	r0, [pc, #180]	; (8002c78 <main+0x240>)
 8002bc2:	f7ff fa89 	bl	80020d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	b100      	cbz	r0, 8002bca <main+0x192>
 8002bc8:	e7fe      	b.n	8002bc8 <main+0x190>
  htim4.Instance = TIM4;
 8002bca:	4c2d      	ldr	r4, [pc, #180]	; (8002c80 <main+0x248>)
 8002bcc:	4e2d      	ldr	r6, [pc, #180]	; (8002c84 <main+0x24c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bce:	60a0      	str	r0, [r4, #8]
  htim4.Init.Prescaler = 15;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	6063      	str	r3, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	6120      	str	r0, [r4, #16]
  htim4.Init.Period = 100;
 8002bd6:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bd8:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8002bda:	6026      	str	r6, [r4, #0]
  htim4.Init.Period = 100;
 8002bdc:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bde:	f7ff f833 	bl	8001c48 <HAL_TIM_PWM_Init>
 8002be2:	b100      	cbz	r0, 8002be6 <main+0x1ae>
 8002be4:	e7fe      	b.n	8002be4 <main+0x1ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be6:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bea:	4629      	mov	r1, r5
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff fa73 	bl	80020d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	b100      	cbz	r0, 8002bf6 <main+0x1be>
 8002bf4:	e7fe      	b.n	8002bf4 <main+0x1bc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf6:	2360      	movs	r3, #96	; 0x60
 8002bf8:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfa:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8002bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c00:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c02:	2208      	movs	r2, #8
 8002c04:	a90b      	add	r1, sp, #44	; 0x2c
 8002c06:	4620      	mov	r0, r4
  sConfigOC.Pulse = 500;
 8002c08:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c0a:	f7ff f943 	bl	8001e94 <HAL_TIM_PWM_ConfigChannel>
 8002c0e:	4605      	mov	r5, r0
 8002c10:	b100      	cbz	r0, 8002c14 <main+0x1dc>
 8002c12:	e7fe      	b.n	8002c12 <main+0x1da>
  HAL_TIM_MspPostInit(&htim4);
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 f8f9 	bl	8002e0c <HAL_TIM_MspPostInit>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4815      	ldr	r0, [pc, #84]	; (8002c74 <main+0x23c>)
 8002c1e:	f7ff fa2f 	bl	8002080 <HAL_TIM_IC_Start_IT>
  HAL_UART_Transmit(&huart3,"Aok\r\n",5,0xffff);
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	2205      	movs	r2, #5
 8002c28:	4917      	ldr	r1, [pc, #92]	; (8002c88 <main+0x250>)
 8002c2a:	480e      	ldr	r0, [pc, #56]	; (8002c64 <main+0x22c>)
 8002c2c:	f7ff fbf6 	bl	800241c <HAL_UART_Transmit>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 8002c30:	2104      	movs	r1, #4
 8002c32:	480e      	ldr	r0, [pc, #56]	; (8002c6c <main+0x234>)
 8002c34:	f7ff fa24 	bl	8002080 <HAL_TIM_IC_Start_IT>
  HAL_UART_Transmit(&huart3,"Bok\r\n",5,0xffff);
 8002c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	4913      	ldr	r1, [pc, #76]	; (8002c8c <main+0x254>)
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <main+0x22c>)
 8002c42:	f7ff fbeb 	bl	800241c <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim1);
 8002c46:	480c      	ldr	r0, [pc, #48]	; (8002c78 <main+0x240>)
 8002c48:	f7fe fe02 	bl	8001850 <HAL_TIM_Base_Start_IT>
  TIM4->CCR3=50;
 8002c4c:	2332      	movs	r3, #50	; 0x32
 8002c4e:	63f3      	str	r3, [r6, #60]	; 0x3c
  while(LRCalibrate()!=1);
 8002c50:	f7ff fe2e 	bl	80028b0 <LRCalibrate>
 8002c54:	2801      	cmp	r0, #1
 8002c56:	d1fb      	bne.n	8002c50 <main+0x218>
 8002c58:	e7fe      	b.n	8002c58 <main+0x220>
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400
 8002c64:	20000100 	.word	0x20000100
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	20000148 	.word	0x20000148
 8002c70:	40000400 	.word	0x40000400
 8002c74:	200001c4 	.word	0x200001c4
 8002c78:	20000188 	.word	0x20000188
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	200000c4 	.word	0x200000c4
 8002c84:	40000800 	.word	0x40000800
 8002c88:	08003878 	.word	0x08003878
 8002c8c:	0800387e 	.word	0x0800387e

08002c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c92:	2003      	movs	r0, #3
 8002c94:	f7fe f96a 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	f06f 000b 	mvn.w	r0, #11
 8002ca0:	f7fe f976 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	f06f 000a 	mvn.w	r0, #10
 8002cac:	f7fe f970 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	f06f 0009 	mvn.w	r0, #9
 8002cb8:	f7fe f96a 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	f06f 0004 	mvn.w	r0, #4
 8002cc4:	f7fe f964 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4611      	mov	r1, r2
 8002ccc:	f06f 0003 	mvn.w	r0, #3
 8002cd0:	f7fe f95e 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	f06f 0001 	mvn.w	r0, #1
 8002cdc:	f7fe f958 	bl	8000f90 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cec:	f7fe b950 	b.w	8000f90 <HAL_NVIC_SetPriority>

08002cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_TIM_Base_MspInit+0x78>)
 8002cf6:	4293      	cmp	r3, r2
{
 8002cf8:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8002cfa:	d114      	bne.n	8002d26 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_TIM_Base_MspInit+0x7c>)
 8002d00:	9201      	str	r2, [sp, #4]
 8002d02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d04:	f041 0101 	orr.w	r1, r1, #1
 8002d08:	6459      	str	r1, [r3, #68]	; 0x44
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	9301      	str	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d12:	2019      	movs	r0, #25
 8002d14:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d16:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d18:	f7fe f93a 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d1c:	2019      	movs	r0, #25
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d1e:	f7fe f96b 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d22:	b006      	add	sp, #24
 8002d24:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_TIM_Base_MspInit+0x80>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d1fa      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2c:	2400      	movs	r4, #0
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_TIM_Base_MspInit+0x7c>)
 8002d30:	9400      	str	r4, [sp, #0]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	480f      	ldr	r0, [pc, #60]	; (8002d74 <HAL_TIM_Base_MspInit+0x84>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d36:	f042 0202 	orr.w	r2, r2, #2
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d54:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f7fe f995 	bl	8001084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002d5a:	201d      	movs	r0, #29
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	2101      	movs	r1, #1
 8002d60:	f7fe f916 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d64:	201d      	movs	r0, #29
 8002d66:	e7da      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x2e>
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40020800 	.word	0x40020800

08002d78 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d78:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM2)
 8002d7a:	6803      	ldr	r3, [r0, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002d80:	b087      	sub	sp, #28
  if(htim_ic->Instance==TIM2)
 8002d82:	d120      	bne.n	8002dc6 <HAL_TIM_IC_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d84:	2400      	movs	r4, #0
 8002d86:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002d8a:	9400      	str	r4, [sp, #0]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	480f      	ldr	r0, [pc, #60]	; (8002dcc <HAL_TIM_IC_MspInit+0x54>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002da4:	2320      	movs	r3, #32
 8002da6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da8:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002db0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f7fe f967 	bl	8001084 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002db6:	201c      	movs	r0, #28
 8002db8:	4622      	mov	r2, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	f7fe f8e8 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dc0:	201c      	movs	r0, #28
 8002dc2:	f7fe f919 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dc6:	b007      	add	sp, #28
 8002dc8:	bd30      	pop	{r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dd0:	b507      	push	{r0, r1, r2, lr}

  if(htim_pwm->Instance==TIM4)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_TIM_PWM_MspInit+0x38>)
 8002dd4:	6802      	ldr	r2, [r0, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d113      	bne.n	8002e02 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002de0:	9201      	str	r2, [sp, #4]
 8002de2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002de4:	f041 0104 	orr.w	r1, r1, #4
 8002de8:	6419      	str	r1, [r3, #64]	; 0x40
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002df2:	201e      	movs	r0, #30
 8002df4:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002df8:	f7fe f8ca 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dfc:	201e      	movs	r0, #30
 8002dfe:	f7fe f8fb 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e02:	b003      	add	sp, #12
 8002e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e08:	40000800 	.word	0x40000800

08002e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8002e0e:	6802      	ldr	r2, [r0, #0]
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_TIM_MspPostInit+0x2c>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10c      	bne.n	8002e30 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e16:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e22:	4806      	ldr	r0, [pc, #24]	; (8002e3c <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e2a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f7fe f92a 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e30:	b007      	add	sp, #28
 8002e32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e36:	bf00      	nop
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40020400 	.word	0x40020400

08002e40 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e40:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8002e42:	6802      	ldr	r2, [r0, #0]
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_UART_MspInit+0x58>)
 8002e46:	429a      	cmp	r2, r3
{
 8002e48:	b086      	sub	sp, #24
  if(huart->Instance==USART3)
 8002e4a:	d123      	bne.n	8002e94 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002e52:	9400      	str	r4, [sp, #0]
 8002e54:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	4811      	ldr	r0, [pc, #68]	; (8002e9c <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e58:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002e5c:	6419      	str	r1, [r3, #64]	; 0x40
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e72:	2301      	movs	r3, #1
 8002e74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e80:	f7fe f900 	bl	8001084 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e84:	2027      	movs	r0, #39	; 0x27
 8002e86:	4622      	mov	r2, r4
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f7fe f881 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e8e:	2027      	movs	r0, #39	; 0x27
 8002e90:	f7fe f8b2 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e94:	b006      	add	sp, #24
 8002e96:	bd10      	pop	{r4, pc}
 8002e98:	40004800 	.word	0x40004800
 8002e9c:	40020400 	.word	0x40020400

08002ea0 <NMI_Handler>:
 8002ea0:	4770      	bx	lr

08002ea2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler>

08002ea4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ea4:	e7fe      	b.n	8002ea4 <MemManage_Handler>

08002ea6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler>

08002ea8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler>

08002eaa <SVC_Handler>:
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002eae:	4770      	bx	lr

08002eb0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb2:	f7fe f835 	bl	8000f20 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002eba:	f7fe b8cc 	b.w	8001056 <HAL_SYSTICK_IRQHandler>
	...

08002ec0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002ec2:	f7fe bda0 	b.w	8001a06 <HAL_TIM_IRQHandler>
 8002ec6:	bf00      	nop
 8002ec8:	20000188 	.word	0x20000188

08002ecc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <TIM2_IRQHandler+0x8>)
 8002ece:	f7fe bd9a 	b.w	8001a06 <HAL_TIM_IRQHandler>
 8002ed2:	bf00      	nop
 8002ed4:	200001c4 	.word	0x200001c4

08002ed8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ed8:	4801      	ldr	r0, [pc, #4]	; (8002ee0 <TIM3_IRQHandler+0x8>)
 8002eda:	f7fe bd94 	b.w	8001a06 <HAL_TIM_IRQHandler>
 8002ede:	bf00      	nop
 8002ee0:	20000148 	.word	0x20000148

08002ee4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ee4:	4801      	ldr	r0, [pc, #4]	; (8002eec <TIM4_IRQHandler+0x8>)
 8002ee6:	f7fe bd8e 	b.w	8001a06 <HAL_TIM_IRQHandler>
 8002eea:	bf00      	nop
 8002eec:	200000c4 	.word	0x200000c4

08002ef0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ef0:	4801      	ldr	r0, [pc, #4]	; (8002ef8 <USART3_IRQHandler+0x8>)
 8002ef2:	f7ff bb2d 	b.w	8002550 <HAL_UART_IRQHandler>
 8002ef6:	bf00      	nop
 8002ef8:	20000100 	.word	0x20000100

08002efc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002efc:	490f      	ldr	r1, [pc, #60]	; (8002f3c <SystemInit+0x40>)
 8002efe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <SystemInit+0x44>)
 8002f0c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002f16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <SystemInit+0x48>)
 8002f26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f30:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f36:	608b      	str	r3, [r1, #8]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	24003010 	.word	0x24003010

08002f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f4e:	e003      	b.n	8002f58 <LoopCopyDataInit>

08002f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f56:	3104      	adds	r1, #4

08002f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f58:	480b      	ldr	r0, [pc, #44]	; (8002f88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f60:	d3f6      	bcc.n	8002f50 <CopyDataInit>
  ldr  r2, =_sbss
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f64:	e002      	b.n	8002f6c <LoopFillZerobss>

08002f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f68:	f842 3b04 	str.w	r3, [r2], #4

08002f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f70:	d3f9      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f72:	f7ff ffc3 	bl	8002efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f76:	f000 f811 	bl	8002f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7a:	f7ff fd5d 	bl	8002a38 <main>
  bx  lr    
 8002f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f80:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002f84:	080038e0 	.word	0x080038e0
  ldr  r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f8c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002f90:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002f94:	20000204 	.word	0x20000204

08002f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <ADC_IRQHandler>
	...

08002f9c <__libc_init_array>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4e0d      	ldr	r6, [pc, #52]	; (8002fd4 <__libc_init_array+0x38>)
 8002fa0:	4c0d      	ldr	r4, [pc, #52]	; (8002fd8 <__libc_init_array+0x3c>)
 8002fa2:	1ba4      	subs	r4, r4, r6
 8002fa4:	10a4      	asrs	r4, r4, #2
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	42a5      	cmp	r5, r4
 8002faa:	d109      	bne.n	8002fc0 <__libc_init_array+0x24>
 8002fac:	4e0b      	ldr	r6, [pc, #44]	; (8002fdc <__libc_init_array+0x40>)
 8002fae:	4c0c      	ldr	r4, [pc, #48]	; (8002fe0 <__libc_init_array+0x44>)
 8002fb0:	f000 fc4c 	bl	800384c <_init>
 8002fb4:	1ba4      	subs	r4, r4, r6
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	2500      	movs	r5, #0
 8002fba:	42a5      	cmp	r5, r4
 8002fbc:	d105      	bne.n	8002fca <__libc_init_array+0x2e>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc4:	4798      	blx	r3
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	e7ee      	b.n	8002fa8 <__libc_init_array+0xc>
 8002fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fce:	4798      	blx	r3
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	e7f2      	b.n	8002fba <__libc_init_array+0x1e>
 8002fd4:	080038d8 	.word	0x080038d8
 8002fd8:	080038d8 	.word	0x080038d8
 8002fdc:	080038d8 	.word	0x080038d8
 8002fe0:	080038dc 	.word	0x080038dc

08002fe4 <memset>:
 8002fe4:	4402      	add	r2, r0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <siprintf>:
 8002ff4:	b40e      	push	{r1, r2, r3}
 8002ff6:	b500      	push	{lr}
 8002ff8:	b09c      	sub	sp, #112	; 0x70
 8002ffa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8003000:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003004:	9002      	str	r0, [sp, #8]
 8003006:	9006      	str	r0, [sp, #24]
 8003008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800300c:	480a      	ldr	r0, [pc, #40]	; (8003038 <siprintf+0x44>)
 800300e:	9104      	str	r1, [sp, #16]
 8003010:	9107      	str	r1, [sp, #28]
 8003012:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003016:	f853 2b04 	ldr.w	r2, [r3], #4
 800301a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800301e:	6800      	ldr	r0, [r0, #0]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	a902      	add	r1, sp, #8
 8003024:	f000 f866 	bl	80030f4 <_svfiprintf_r>
 8003028:	9b02      	ldr	r3, [sp, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	b01c      	add	sp, #112	; 0x70
 8003030:	f85d eb04 	ldr.w	lr, [sp], #4
 8003034:	b003      	add	sp, #12
 8003036:	4770      	bx	lr
 8003038:	20000010 	.word	0x20000010

0800303c <__ssputs_r>:
 800303c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003040:	688e      	ldr	r6, [r1, #8]
 8003042:	429e      	cmp	r6, r3
 8003044:	4682      	mov	sl, r0
 8003046:	460c      	mov	r4, r1
 8003048:	4691      	mov	r9, r2
 800304a:	4698      	mov	r8, r3
 800304c:	d835      	bhi.n	80030ba <__ssputs_r+0x7e>
 800304e:	898a      	ldrh	r2, [r1, #12]
 8003050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003054:	d031      	beq.n	80030ba <__ssputs_r+0x7e>
 8003056:	6825      	ldr	r5, [r4, #0]
 8003058:	6909      	ldr	r1, [r1, #16]
 800305a:	1a6f      	subs	r7, r5, r1
 800305c:	6965      	ldr	r5, [r4, #20]
 800305e:	2302      	movs	r3, #2
 8003060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003064:	fb95 f5f3 	sdiv	r5, r5, r3
 8003068:	f108 0301 	add.w	r3, r8, #1
 800306c:	443b      	add	r3, r7
 800306e:	429d      	cmp	r5, r3
 8003070:	bf38      	it	cc
 8003072:	461d      	movcc	r5, r3
 8003074:	0553      	lsls	r3, r2, #21
 8003076:	d531      	bpl.n	80030dc <__ssputs_r+0xa0>
 8003078:	4629      	mov	r1, r5
 800307a:	f000 fb39 	bl	80036f0 <_malloc_r>
 800307e:	4606      	mov	r6, r0
 8003080:	b950      	cbnz	r0, 8003098 <__ssputs_r+0x5c>
 8003082:	230c      	movs	r3, #12
 8003084:	f8ca 3000 	str.w	r3, [sl]
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	463a      	mov	r2, r7
 800309a:	6921      	ldr	r1, [r4, #16]
 800309c:	f000 fab4 	bl	8003608 <memcpy>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	6126      	str	r6, [r4, #16]
 80030ae:	6165      	str	r5, [r4, #20]
 80030b0:	443e      	add	r6, r7
 80030b2:	1bed      	subs	r5, r5, r7
 80030b4:	6026      	str	r6, [r4, #0]
 80030b6:	60a5      	str	r5, [r4, #8]
 80030b8:	4646      	mov	r6, r8
 80030ba:	4546      	cmp	r6, r8
 80030bc:	bf28      	it	cs
 80030be:	4646      	movcs	r6, r8
 80030c0:	4632      	mov	r2, r6
 80030c2:	4649      	mov	r1, r9
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	f000 faaa 	bl	800361e <memmove>
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	1b9b      	subs	r3, r3, r6
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	441e      	add	r6, r3
 80030d4:	6026      	str	r6, [r4, #0]
 80030d6:	2000      	movs	r0, #0
 80030d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030dc:	462a      	mov	r2, r5
 80030de:	f000 fb65 	bl	80037ac <_realloc_r>
 80030e2:	4606      	mov	r6, r0
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d1e1      	bne.n	80030ac <__ssputs_r+0x70>
 80030e8:	6921      	ldr	r1, [r4, #16]
 80030ea:	4650      	mov	r0, sl
 80030ec:	f000 fab2 	bl	8003654 <_free_r>
 80030f0:	e7c7      	b.n	8003082 <__ssputs_r+0x46>
	...

080030f4 <_svfiprintf_r>:
 80030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	b09d      	sub	sp, #116	; 0x74
 80030fa:	4680      	mov	r8, r0
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	898b      	ldrh	r3, [r1, #12]
 8003100:	061c      	lsls	r4, r3, #24
 8003102:	460d      	mov	r5, r1
 8003104:	4616      	mov	r6, r2
 8003106:	d50f      	bpl.n	8003128 <_svfiprintf_r+0x34>
 8003108:	690b      	ldr	r3, [r1, #16]
 800310a:	b96b      	cbnz	r3, 8003128 <_svfiprintf_r+0x34>
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	f000 faef 	bl	80036f0 <_malloc_r>
 8003112:	6028      	str	r0, [r5, #0]
 8003114:	6128      	str	r0, [r5, #16]
 8003116:	b928      	cbnz	r0, 8003124 <_svfiprintf_r+0x30>
 8003118:	230c      	movs	r3, #12
 800311a:	f8c8 3000 	str.w	r3, [r8]
 800311e:	f04f 30ff 	mov.w	r0, #4294967295
 8003122:	e0c5      	b.n	80032b0 <_svfiprintf_r+0x1bc>
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	616b      	str	r3, [r5, #20]
 8003128:	2300      	movs	r3, #0
 800312a:	9309      	str	r3, [sp, #36]	; 0x24
 800312c:	2320      	movs	r3, #32
 800312e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003132:	2330      	movs	r3, #48	; 0x30
 8003134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003138:	f04f 0b01 	mov.w	fp, #1
 800313c:	4637      	mov	r7, r6
 800313e:	463c      	mov	r4, r7
 8003140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13c      	bne.n	80031c2 <_svfiprintf_r+0xce>
 8003148:	ebb7 0a06 	subs.w	sl, r7, r6
 800314c:	d00b      	beq.n	8003166 <_svfiprintf_r+0x72>
 800314e:	4653      	mov	r3, sl
 8003150:	4632      	mov	r2, r6
 8003152:	4629      	mov	r1, r5
 8003154:	4640      	mov	r0, r8
 8003156:	f7ff ff71 	bl	800303c <__ssputs_r>
 800315a:	3001      	adds	r0, #1
 800315c:	f000 80a3 	beq.w	80032a6 <_svfiprintf_r+0x1b2>
 8003160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003162:	4453      	add	r3, sl
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
 8003166:	783b      	ldrb	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 809c 	beq.w	80032a6 <_svfiprintf_r+0x1b2>
 800316e:	2300      	movs	r3, #0
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	9304      	str	r3, [sp, #16]
 8003176:	9307      	str	r3, [sp, #28]
 8003178:	9205      	str	r2, [sp, #20]
 800317a:	9306      	str	r3, [sp, #24]
 800317c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003180:	931a      	str	r3, [sp, #104]	; 0x68
 8003182:	2205      	movs	r2, #5
 8003184:	7821      	ldrb	r1, [r4, #0]
 8003186:	4850      	ldr	r0, [pc, #320]	; (80032c8 <_svfiprintf_r+0x1d4>)
 8003188:	f7fd f83a 	bl	8000200 <memchr>
 800318c:	1c67      	adds	r7, r4, #1
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	b9d8      	cbnz	r0, 80031ca <_svfiprintf_r+0xd6>
 8003192:	06d9      	lsls	r1, r3, #27
 8003194:	bf44      	itt	mi
 8003196:	2220      	movmi	r2, #32
 8003198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800319c:	071a      	lsls	r2, r3, #28
 800319e:	bf44      	itt	mi
 80031a0:	222b      	movmi	r2, #43	; 0x2b
 80031a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031a6:	7822      	ldrb	r2, [r4, #0]
 80031a8:	2a2a      	cmp	r2, #42	; 0x2a
 80031aa:	d016      	beq.n	80031da <_svfiprintf_r+0xe6>
 80031ac:	9a07      	ldr	r2, [sp, #28]
 80031ae:	2100      	movs	r1, #0
 80031b0:	200a      	movs	r0, #10
 80031b2:	4627      	mov	r7, r4
 80031b4:	3401      	adds	r4, #1
 80031b6:	783b      	ldrb	r3, [r7, #0]
 80031b8:	3b30      	subs	r3, #48	; 0x30
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d951      	bls.n	8003262 <_svfiprintf_r+0x16e>
 80031be:	b1c9      	cbz	r1, 80031f4 <_svfiprintf_r+0x100>
 80031c0:	e011      	b.n	80031e6 <_svfiprintf_r+0xf2>
 80031c2:	2b25      	cmp	r3, #37	; 0x25
 80031c4:	d0c0      	beq.n	8003148 <_svfiprintf_r+0x54>
 80031c6:	4627      	mov	r7, r4
 80031c8:	e7b9      	b.n	800313e <_svfiprintf_r+0x4a>
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <_svfiprintf_r+0x1d4>)
 80031cc:	1a80      	subs	r0, r0, r2
 80031ce:	fa0b f000 	lsl.w	r0, fp, r0
 80031d2:	4318      	orrs	r0, r3
 80031d4:	9004      	str	r0, [sp, #16]
 80031d6:	463c      	mov	r4, r7
 80031d8:	e7d3      	b.n	8003182 <_svfiprintf_r+0x8e>
 80031da:	9a03      	ldr	r2, [sp, #12]
 80031dc:	1d11      	adds	r1, r2, #4
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	9103      	str	r1, [sp, #12]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	db01      	blt.n	80031ea <_svfiprintf_r+0xf6>
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	e004      	b.n	80031f4 <_svfiprintf_r+0x100>
 80031ea:	4252      	negs	r2, r2
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	9207      	str	r2, [sp, #28]
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	783b      	ldrb	r3, [r7, #0]
 80031f6:	2b2e      	cmp	r3, #46	; 0x2e
 80031f8:	d10e      	bne.n	8003218 <_svfiprintf_r+0x124>
 80031fa:	787b      	ldrb	r3, [r7, #1]
 80031fc:	2b2a      	cmp	r3, #42	; 0x2a
 80031fe:	f107 0101 	add.w	r1, r7, #1
 8003202:	d132      	bne.n	800326a <_svfiprintf_r+0x176>
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	1d1a      	adds	r2, r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	9203      	str	r2, [sp, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	bfb8      	it	lt
 8003210:	f04f 33ff 	movlt.w	r3, #4294967295
 8003214:	3702      	adds	r7, #2
 8003216:	9305      	str	r3, [sp, #20]
 8003218:	4c2c      	ldr	r4, [pc, #176]	; (80032cc <_svfiprintf_r+0x1d8>)
 800321a:	7839      	ldrb	r1, [r7, #0]
 800321c:	2203      	movs	r2, #3
 800321e:	4620      	mov	r0, r4
 8003220:	f7fc ffee 	bl	8000200 <memchr>
 8003224:	b138      	cbz	r0, 8003236 <_svfiprintf_r+0x142>
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	1b00      	subs	r0, r0, r4
 800322a:	fa03 f000 	lsl.w	r0, r3, r0
 800322e:	9b04      	ldr	r3, [sp, #16]
 8003230:	4303      	orrs	r3, r0
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	3701      	adds	r7, #1
 8003236:	7839      	ldrb	r1, [r7, #0]
 8003238:	4825      	ldr	r0, [pc, #148]	; (80032d0 <_svfiprintf_r+0x1dc>)
 800323a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800323e:	2206      	movs	r2, #6
 8003240:	1c7e      	adds	r6, r7, #1
 8003242:	f7fc ffdd 	bl	8000200 <memchr>
 8003246:	2800      	cmp	r0, #0
 8003248:	d035      	beq.n	80032b6 <_svfiprintf_r+0x1c2>
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <_svfiprintf_r+0x1e0>)
 800324c:	b9fb      	cbnz	r3, 800328e <_svfiprintf_r+0x19a>
 800324e:	9b03      	ldr	r3, [sp, #12]
 8003250:	3307      	adds	r3, #7
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	3308      	adds	r3, #8
 8003258:	9303      	str	r3, [sp, #12]
 800325a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800325c:	444b      	add	r3, r9
 800325e:	9309      	str	r3, [sp, #36]	; 0x24
 8003260:	e76c      	b.n	800313c <_svfiprintf_r+0x48>
 8003262:	fb00 3202 	mla	r2, r0, r2, r3
 8003266:	2101      	movs	r1, #1
 8003268:	e7a3      	b.n	80031b2 <_svfiprintf_r+0xbe>
 800326a:	2300      	movs	r3, #0
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	4618      	mov	r0, r3
 8003270:	240a      	movs	r4, #10
 8003272:	460f      	mov	r7, r1
 8003274:	3101      	adds	r1, #1
 8003276:	783a      	ldrb	r2, [r7, #0]
 8003278:	3a30      	subs	r2, #48	; 0x30
 800327a:	2a09      	cmp	r2, #9
 800327c:	d903      	bls.n	8003286 <_svfiprintf_r+0x192>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ca      	beq.n	8003218 <_svfiprintf_r+0x124>
 8003282:	9005      	str	r0, [sp, #20]
 8003284:	e7c8      	b.n	8003218 <_svfiprintf_r+0x124>
 8003286:	fb04 2000 	mla	r0, r4, r0, r2
 800328a:	2301      	movs	r3, #1
 800328c:	e7f1      	b.n	8003272 <_svfiprintf_r+0x17e>
 800328e:	ab03      	add	r3, sp, #12
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	462a      	mov	r2, r5
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <_svfiprintf_r+0x1e4>)
 8003296:	a904      	add	r1, sp, #16
 8003298:	4640      	mov	r0, r8
 800329a:	f3af 8000 	nop.w
 800329e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032a2:	4681      	mov	r9, r0
 80032a4:	d1d9      	bne.n	800325a <_svfiprintf_r+0x166>
 80032a6:	89ab      	ldrh	r3, [r5, #12]
 80032a8:	065b      	lsls	r3, r3, #25
 80032aa:	f53f af38 	bmi.w	800311e <_svfiprintf_r+0x2a>
 80032ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b0:	b01d      	add	sp, #116	; 0x74
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	ab03      	add	r3, sp, #12
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	462a      	mov	r2, r5
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <_svfiprintf_r+0x1e4>)
 80032be:	a904      	add	r1, sp, #16
 80032c0:	4640      	mov	r0, r8
 80032c2:	f000 f881 	bl	80033c8 <_printf_i>
 80032c6:	e7ea      	b.n	800329e <_svfiprintf_r+0x1aa>
 80032c8:	0800389c 	.word	0x0800389c
 80032cc:	080038a2 	.word	0x080038a2
 80032d0:	080038a6 	.word	0x080038a6
 80032d4:	00000000 	.word	0x00000000
 80032d8:	0800303d 	.word	0x0800303d

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4691      	mov	r9, r2
 80032e2:	461f      	mov	r7, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bfb8      	it	lt
 80032f0:	4613      	movlt	r3, r2
 80032f2:	f8c9 3000 	str.w	r3, [r9]
 80032f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	b112      	cbz	r2, 8003306 <_printf_common+0x2a>
 8003300:	3301      	adds	r3, #1
 8003302:	f8c9 3000 	str.w	r3, [r9]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	0699      	lsls	r1, r3, #26
 800330a:	bf42      	ittt	mi
 800330c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003310:	3302      	addmi	r3, #2
 8003312:	f8c9 3000 	strmi.w	r3, [r9]
 8003316:	6825      	ldr	r5, [r4, #0]
 8003318:	f015 0506 	ands.w	r5, r5, #6
 800331c:	d107      	bne.n	800332e <_printf_common+0x52>
 800331e:	f104 0a19 	add.w	sl, r4, #25
 8003322:	68e3      	ldr	r3, [r4, #12]
 8003324:	f8d9 2000 	ldr.w	r2, [r9]
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	429d      	cmp	r5, r3
 800332c:	db29      	blt.n	8003382 <_printf_common+0xa6>
 800332e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	3300      	adds	r3, #0
 8003336:	bf18      	it	ne
 8003338:	2301      	movne	r3, #1
 800333a:	0692      	lsls	r2, r2, #26
 800333c:	d42e      	bmi.n	800339c <_printf_common+0xc0>
 800333e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003342:	4639      	mov	r1, r7
 8003344:	4630      	mov	r0, r6
 8003346:	47c0      	blx	r8
 8003348:	3001      	adds	r0, #1
 800334a:	d021      	beq.n	8003390 <_printf_common+0xb4>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	68e5      	ldr	r5, [r4, #12]
 8003350:	f8d9 2000 	ldr.w	r2, [r9]
 8003354:	f003 0306 	and.w	r3, r3, #6
 8003358:	2b04      	cmp	r3, #4
 800335a:	bf08      	it	eq
 800335c:	1aad      	subeq	r5, r5, r2
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	6922      	ldr	r2, [r4, #16]
 8003362:	bf0c      	ite	eq
 8003364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003368:	2500      	movne	r5, #0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfc4      	itt	gt
 800336e:	1a9b      	subgt	r3, r3, r2
 8003370:	18ed      	addgt	r5, r5, r3
 8003372:	f04f 0900 	mov.w	r9, #0
 8003376:	341a      	adds	r4, #26
 8003378:	454d      	cmp	r5, r9
 800337a:	d11b      	bne.n	80033b4 <_printf_common+0xd8>
 800337c:	2000      	movs	r0, #0
 800337e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003382:	2301      	movs	r3, #1
 8003384:	4652      	mov	r2, sl
 8003386:	4639      	mov	r1, r7
 8003388:	4630      	mov	r0, r6
 800338a:	47c0      	blx	r8
 800338c:	3001      	adds	r0, #1
 800338e:	d103      	bne.n	8003398 <_printf_common+0xbc>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003398:	3501      	adds	r5, #1
 800339a:	e7c2      	b.n	8003322 <_printf_common+0x46>
 800339c:	18e1      	adds	r1, r4, r3
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	2030      	movs	r0, #48	; 0x30
 80033a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033a6:	4422      	add	r2, r4
 80033a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033b0:	3302      	adds	r3, #2
 80033b2:	e7c4      	b.n	800333e <_printf_common+0x62>
 80033b4:	2301      	movs	r3, #1
 80033b6:	4622      	mov	r2, r4
 80033b8:	4639      	mov	r1, r7
 80033ba:	4630      	mov	r0, r6
 80033bc:	47c0      	blx	r8
 80033be:	3001      	adds	r0, #1
 80033c0:	d0e6      	beq.n	8003390 <_printf_common+0xb4>
 80033c2:	f109 0901 	add.w	r9, r9, #1
 80033c6:	e7d7      	b.n	8003378 <_printf_common+0x9c>

080033c8 <_printf_i>:
 80033c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033cc:	4617      	mov	r7, r2
 80033ce:	7e0a      	ldrb	r2, [r1, #24]
 80033d0:	b085      	sub	sp, #20
 80033d2:	2a6e      	cmp	r2, #110	; 0x6e
 80033d4:	4698      	mov	r8, r3
 80033d6:	4606      	mov	r6, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033e0:	f000 80bc 	beq.w	800355c <_printf_i+0x194>
 80033e4:	d81a      	bhi.n	800341c <_printf_i+0x54>
 80033e6:	2a63      	cmp	r2, #99	; 0x63
 80033e8:	d02e      	beq.n	8003448 <_printf_i+0x80>
 80033ea:	d80a      	bhi.n	8003402 <_printf_i+0x3a>
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	f000 80c8 	beq.w	8003582 <_printf_i+0x1ba>
 80033f2:	2a58      	cmp	r2, #88	; 0x58
 80033f4:	f000 808a 	beq.w	800350c <_printf_i+0x144>
 80033f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003400:	e02a      	b.n	8003458 <_printf_i+0x90>
 8003402:	2a64      	cmp	r2, #100	; 0x64
 8003404:	d001      	beq.n	800340a <_printf_i+0x42>
 8003406:	2a69      	cmp	r2, #105	; 0x69
 8003408:	d1f6      	bne.n	80033f8 <_printf_i+0x30>
 800340a:	6821      	ldr	r1, [r4, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003412:	d023      	beq.n	800345c <_printf_i+0x94>
 8003414:	1d11      	adds	r1, r2, #4
 8003416:	6019      	str	r1, [r3, #0]
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	e027      	b.n	800346c <_printf_i+0xa4>
 800341c:	2a73      	cmp	r2, #115	; 0x73
 800341e:	f000 80b4 	beq.w	800358a <_printf_i+0x1c2>
 8003422:	d808      	bhi.n	8003436 <_printf_i+0x6e>
 8003424:	2a6f      	cmp	r2, #111	; 0x6f
 8003426:	d02a      	beq.n	800347e <_printf_i+0xb6>
 8003428:	2a70      	cmp	r2, #112	; 0x70
 800342a:	d1e5      	bne.n	80033f8 <_printf_i+0x30>
 800342c:	680a      	ldr	r2, [r1, #0]
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	600a      	str	r2, [r1, #0]
 8003434:	e003      	b.n	800343e <_printf_i+0x76>
 8003436:	2a75      	cmp	r2, #117	; 0x75
 8003438:	d021      	beq.n	800347e <_printf_i+0xb6>
 800343a:	2a78      	cmp	r2, #120	; 0x78
 800343c:	d1dc      	bne.n	80033f8 <_printf_i+0x30>
 800343e:	2278      	movs	r2, #120	; 0x78
 8003440:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003444:	496e      	ldr	r1, [pc, #440]	; (8003600 <_printf_i+0x238>)
 8003446:	e064      	b.n	8003512 <_printf_i+0x14a>
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800344e:	1d11      	adds	r1, r2, #4
 8003450:	6019      	str	r1, [r3, #0]
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003458:	2301      	movs	r3, #1
 800345a:	e0a3      	b.n	80035a4 <_printf_i+0x1dc>
 800345c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003460:	f102 0104 	add.w	r1, r2, #4
 8003464:	6019      	str	r1, [r3, #0]
 8003466:	d0d7      	beq.n	8003418 <_printf_i+0x50>
 8003468:	f9b2 3000 	ldrsh.w	r3, [r2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da03      	bge.n	8003478 <_printf_i+0xb0>
 8003470:	222d      	movs	r2, #45	; 0x2d
 8003472:	425b      	negs	r3, r3
 8003474:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003478:	4962      	ldr	r1, [pc, #392]	; (8003604 <_printf_i+0x23c>)
 800347a:	220a      	movs	r2, #10
 800347c:	e017      	b.n	80034ae <_printf_i+0xe6>
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003486:	d003      	beq.n	8003490 <_printf_i+0xc8>
 8003488:	1d08      	adds	r0, r1, #4
 800348a:	6018      	str	r0, [r3, #0]
 800348c:	680b      	ldr	r3, [r1, #0]
 800348e:	e006      	b.n	800349e <_printf_i+0xd6>
 8003490:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003494:	f101 0004 	add.w	r0, r1, #4
 8003498:	6018      	str	r0, [r3, #0]
 800349a:	d0f7      	beq.n	800348c <_printf_i+0xc4>
 800349c:	880b      	ldrh	r3, [r1, #0]
 800349e:	4959      	ldr	r1, [pc, #356]	; (8003604 <_printf_i+0x23c>)
 80034a0:	2a6f      	cmp	r2, #111	; 0x6f
 80034a2:	bf14      	ite	ne
 80034a4:	220a      	movne	r2, #10
 80034a6:	2208      	moveq	r2, #8
 80034a8:	2000      	movs	r0, #0
 80034aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034ae:	6865      	ldr	r5, [r4, #4]
 80034b0:	60a5      	str	r5, [r4, #8]
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	f2c0 809c 	blt.w	80035f0 <_printf_i+0x228>
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f020 0004 	bic.w	r0, r0, #4
 80034be:	6020      	str	r0, [r4, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d13f      	bne.n	8003544 <_printf_i+0x17c>
 80034c4:	2d00      	cmp	r5, #0
 80034c6:	f040 8095 	bne.w	80035f4 <_printf_i+0x22c>
 80034ca:	4675      	mov	r5, lr
 80034cc:	2a08      	cmp	r2, #8
 80034ce:	d10b      	bne.n	80034e8 <_printf_i+0x120>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	07da      	lsls	r2, r3, #31
 80034d4:	d508      	bpl.n	80034e8 <_printf_i+0x120>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	6862      	ldr	r2, [r4, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	bfde      	ittt	le
 80034de:	2330      	movle	r3, #48	; 0x30
 80034e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034e8:	ebae 0305 	sub.w	r3, lr, r5
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	f8cd 8000 	str.w	r8, [sp]
 80034f2:	463b      	mov	r3, r7
 80034f4:	aa03      	add	r2, sp, #12
 80034f6:	4621      	mov	r1, r4
 80034f8:	4630      	mov	r0, r6
 80034fa:	f7ff feef 	bl	80032dc <_printf_common>
 80034fe:	3001      	adds	r0, #1
 8003500:	d155      	bne.n	80035ae <_printf_i+0x1e6>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	b005      	add	sp, #20
 8003508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800350c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003510:	493c      	ldr	r1, [pc, #240]	; (8003604 <_printf_i+0x23c>)
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f012 0f80 	tst.w	r2, #128	; 0x80
 800351a:	f100 0504 	add.w	r5, r0, #4
 800351e:	601d      	str	r5, [r3, #0]
 8003520:	d001      	beq.n	8003526 <_printf_i+0x15e>
 8003522:	6803      	ldr	r3, [r0, #0]
 8003524:	e002      	b.n	800352c <_printf_i+0x164>
 8003526:	0655      	lsls	r5, r2, #25
 8003528:	d5fb      	bpl.n	8003522 <_printf_i+0x15a>
 800352a:	8803      	ldrh	r3, [r0, #0]
 800352c:	07d0      	lsls	r0, r2, #31
 800352e:	bf44      	itt	mi
 8003530:	f042 0220 	orrmi.w	r2, r2, #32
 8003534:	6022      	strmi	r2, [r4, #0]
 8003536:	b91b      	cbnz	r3, 8003540 <_printf_i+0x178>
 8003538:	6822      	ldr	r2, [r4, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	6022      	str	r2, [r4, #0]
 8003540:	2210      	movs	r2, #16
 8003542:	e7b1      	b.n	80034a8 <_printf_i+0xe0>
 8003544:	4675      	mov	r5, lr
 8003546:	fbb3 f0f2 	udiv	r0, r3, r2
 800354a:	fb02 3310 	mls	r3, r2, r0, r3
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003554:	4603      	mov	r3, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	d1f5      	bne.n	8003546 <_printf_i+0x17e>
 800355a:	e7b7      	b.n	80034cc <_printf_i+0x104>
 800355c:	6808      	ldr	r0, [r1, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	6949      	ldr	r1, [r1, #20]
 8003562:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003566:	d004      	beq.n	8003572 <_printf_i+0x1aa>
 8003568:	1d10      	adds	r0, r2, #4
 800356a:	6018      	str	r0, [r3, #0]
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	6019      	str	r1, [r3, #0]
 8003570:	e007      	b.n	8003582 <_printf_i+0x1ba>
 8003572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003576:	f102 0004 	add.w	r0, r2, #4
 800357a:	6018      	str	r0, [r3, #0]
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	d0f6      	beq.n	800356e <_printf_i+0x1a6>
 8003580:	8019      	strh	r1, [r3, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	4675      	mov	r5, lr
 8003588:	e7b1      	b.n	80034ee <_printf_i+0x126>
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	1d11      	adds	r1, r2, #4
 800358e:	6019      	str	r1, [r3, #0]
 8003590:	6815      	ldr	r5, [r2, #0]
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	2100      	movs	r1, #0
 8003596:	4628      	mov	r0, r5
 8003598:	f7fc fe32 	bl	8000200 <memchr>
 800359c:	b108      	cbz	r0, 80035a2 <_printf_i+0x1da>
 800359e:	1b40      	subs	r0, r0, r5
 80035a0:	6060      	str	r0, [r4, #4]
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	2300      	movs	r3, #0
 80035a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ac:	e79f      	b.n	80034ee <_printf_i+0x126>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	462a      	mov	r2, r5
 80035b2:	4639      	mov	r1, r7
 80035b4:	4630      	mov	r0, r6
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d0a2      	beq.n	8003502 <_printf_i+0x13a>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	079b      	lsls	r3, r3, #30
 80035c0:	d507      	bpl.n	80035d2 <_printf_i+0x20a>
 80035c2:	2500      	movs	r5, #0
 80035c4:	f104 0919 	add.w	r9, r4, #25
 80035c8:	68e3      	ldr	r3, [r4, #12]
 80035ca:	9a03      	ldr	r2, [sp, #12]
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	429d      	cmp	r5, r3
 80035d0:	db05      	blt.n	80035de <_printf_i+0x216>
 80035d2:	68e0      	ldr	r0, [r4, #12]
 80035d4:	9b03      	ldr	r3, [sp, #12]
 80035d6:	4298      	cmp	r0, r3
 80035d8:	bfb8      	it	lt
 80035da:	4618      	movlt	r0, r3
 80035dc:	e793      	b.n	8003506 <_printf_i+0x13e>
 80035de:	2301      	movs	r3, #1
 80035e0:	464a      	mov	r2, r9
 80035e2:	4639      	mov	r1, r7
 80035e4:	4630      	mov	r0, r6
 80035e6:	47c0      	blx	r8
 80035e8:	3001      	adds	r0, #1
 80035ea:	d08a      	beq.n	8003502 <_printf_i+0x13a>
 80035ec:	3501      	adds	r5, #1
 80035ee:	e7eb      	b.n	80035c8 <_printf_i+0x200>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1a7      	bne.n	8003544 <_printf_i+0x17c>
 80035f4:	780b      	ldrb	r3, [r1, #0]
 80035f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fe:	e765      	b.n	80034cc <_printf_i+0x104>
 8003600:	080038be 	.word	0x080038be
 8003604:	080038ad 	.word	0x080038ad

08003608 <memcpy>:
 8003608:	b510      	push	{r4, lr}
 800360a:	1e43      	subs	r3, r0, #1
 800360c:	440a      	add	r2, r1
 800360e:	4291      	cmp	r1, r2
 8003610:	d100      	bne.n	8003614 <memcpy+0xc>
 8003612:	bd10      	pop	{r4, pc}
 8003614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800361c:	e7f7      	b.n	800360e <memcpy+0x6>

0800361e <memmove>:
 800361e:	4288      	cmp	r0, r1
 8003620:	b510      	push	{r4, lr}
 8003622:	eb01 0302 	add.w	r3, r1, r2
 8003626:	d803      	bhi.n	8003630 <memmove+0x12>
 8003628:	1e42      	subs	r2, r0, #1
 800362a:	4299      	cmp	r1, r3
 800362c:	d10c      	bne.n	8003648 <memmove+0x2a>
 800362e:	bd10      	pop	{r4, pc}
 8003630:	4298      	cmp	r0, r3
 8003632:	d2f9      	bcs.n	8003628 <memmove+0xa>
 8003634:	1881      	adds	r1, r0, r2
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	42d3      	cmn	r3, r2
 800363a:	d100      	bne.n	800363e <memmove+0x20>
 800363c:	bd10      	pop	{r4, pc}
 800363e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003642:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003646:	e7f7      	b.n	8003638 <memmove+0x1a>
 8003648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800364c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003650:	e7eb      	b.n	800362a <memmove+0xc>
	...

08003654 <_free_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4605      	mov	r5, r0
 8003658:	2900      	cmp	r1, #0
 800365a:	d045      	beq.n	80036e8 <_free_r+0x94>
 800365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003660:	1f0c      	subs	r4, r1, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bfb8      	it	lt
 8003666:	18e4      	addlt	r4, r4, r3
 8003668:	f000 f8d6 	bl	8003818 <__malloc_lock>
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <_free_r+0x98>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	4610      	mov	r0, r2
 8003672:	b933      	cbnz	r3, 8003682 <_free_r+0x2e>
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	6014      	str	r4, [r2, #0]
 8003678:	4628      	mov	r0, r5
 800367a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800367e:	f000 b8cc 	b.w	800381a <__malloc_unlock>
 8003682:	42a3      	cmp	r3, r4
 8003684:	d90c      	bls.n	80036a0 <_free_r+0x4c>
 8003686:	6821      	ldr	r1, [r4, #0]
 8003688:	1862      	adds	r2, r4, r1
 800368a:	4293      	cmp	r3, r2
 800368c:	bf04      	itt	eq
 800368e:	681a      	ldreq	r2, [r3, #0]
 8003690:	685b      	ldreq	r3, [r3, #4]
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	bf04      	itt	eq
 8003696:	1852      	addeq	r2, r2, r1
 8003698:	6022      	streq	r2, [r4, #0]
 800369a:	6004      	str	r4, [r0, #0]
 800369c:	e7ec      	b.n	8003678 <_free_r+0x24>
 800369e:	4613      	mov	r3, r2
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	b10a      	cbz	r2, 80036a8 <_free_r+0x54>
 80036a4:	42a2      	cmp	r2, r4
 80036a6:	d9fa      	bls.n	800369e <_free_r+0x4a>
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	1858      	adds	r0, r3, r1
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d10b      	bne.n	80036c8 <_free_r+0x74>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	4401      	add	r1, r0
 80036b4:	1858      	adds	r0, r3, r1
 80036b6:	4282      	cmp	r2, r0
 80036b8:	6019      	str	r1, [r3, #0]
 80036ba:	d1dd      	bne.n	8003678 <_free_r+0x24>
 80036bc:	6810      	ldr	r0, [r2, #0]
 80036be:	6852      	ldr	r2, [r2, #4]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	4401      	add	r1, r0
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	e7d7      	b.n	8003678 <_free_r+0x24>
 80036c8:	d902      	bls.n	80036d0 <_free_r+0x7c>
 80036ca:	230c      	movs	r3, #12
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	e7d3      	b.n	8003678 <_free_r+0x24>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	1821      	adds	r1, r4, r0
 80036d4:	428a      	cmp	r2, r1
 80036d6:	bf04      	itt	eq
 80036d8:	6811      	ldreq	r1, [r2, #0]
 80036da:	6852      	ldreq	r2, [r2, #4]
 80036dc:	6062      	str	r2, [r4, #4]
 80036de:	bf04      	itt	eq
 80036e0:	1809      	addeq	r1, r1, r0
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	605c      	str	r4, [r3, #4]
 80036e6:	e7c7      	b.n	8003678 <_free_r+0x24>
 80036e8:	bd38      	pop	{r3, r4, r5, pc}
 80036ea:	bf00      	nop
 80036ec:	200000b0 	.word	0x200000b0

080036f0 <_malloc_r>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	1ccd      	adds	r5, r1, #3
 80036f4:	f025 0503 	bic.w	r5, r5, #3
 80036f8:	3508      	adds	r5, #8
 80036fa:	2d0c      	cmp	r5, #12
 80036fc:	bf38      	it	cc
 80036fe:	250c      	movcc	r5, #12
 8003700:	2d00      	cmp	r5, #0
 8003702:	4606      	mov	r6, r0
 8003704:	db01      	blt.n	800370a <_malloc_r+0x1a>
 8003706:	42a9      	cmp	r1, r5
 8003708:	d903      	bls.n	8003712 <_malloc_r+0x22>
 800370a:	230c      	movs	r3, #12
 800370c:	6033      	str	r3, [r6, #0]
 800370e:	2000      	movs	r0, #0
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	f000 f881 	bl	8003818 <__malloc_lock>
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <_malloc_r+0xb4>)
 8003718:	6814      	ldr	r4, [r2, #0]
 800371a:	4621      	mov	r1, r4
 800371c:	b991      	cbnz	r1, 8003744 <_malloc_r+0x54>
 800371e:	4c22      	ldr	r4, [pc, #136]	; (80037a8 <_malloc_r+0xb8>)
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	b91b      	cbnz	r3, 800372c <_malloc_r+0x3c>
 8003724:	4630      	mov	r0, r6
 8003726:	f000 f867 	bl	80037f8 <_sbrk_r>
 800372a:	6020      	str	r0, [r4, #0]
 800372c:	4629      	mov	r1, r5
 800372e:	4630      	mov	r0, r6
 8003730:	f000 f862 	bl	80037f8 <_sbrk_r>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d126      	bne.n	8003786 <_malloc_r+0x96>
 8003738:	230c      	movs	r3, #12
 800373a:	6033      	str	r3, [r6, #0]
 800373c:	4630      	mov	r0, r6
 800373e:	f000 f86c 	bl	800381a <__malloc_unlock>
 8003742:	e7e4      	b.n	800370e <_malloc_r+0x1e>
 8003744:	680b      	ldr	r3, [r1, #0]
 8003746:	1b5b      	subs	r3, r3, r5
 8003748:	d41a      	bmi.n	8003780 <_malloc_r+0x90>
 800374a:	2b0b      	cmp	r3, #11
 800374c:	d90f      	bls.n	800376e <_malloc_r+0x7e>
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	50cd      	str	r5, [r1, r3]
 8003752:	18cc      	adds	r4, r1, r3
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f860 	bl	800381a <__malloc_unlock>
 800375a:	f104 000b 	add.w	r0, r4, #11
 800375e:	1d23      	adds	r3, r4, #4
 8003760:	f020 0007 	bic.w	r0, r0, #7
 8003764:	1ac3      	subs	r3, r0, r3
 8003766:	d01b      	beq.n	80037a0 <_malloc_r+0xb0>
 8003768:	425a      	negs	r2, r3
 800376a:	50e2      	str	r2, [r4, r3]
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	428c      	cmp	r4, r1
 8003770:	bf0d      	iteet	eq
 8003772:	6863      	ldreq	r3, [r4, #4]
 8003774:	684b      	ldrne	r3, [r1, #4]
 8003776:	6063      	strne	r3, [r4, #4]
 8003778:	6013      	streq	r3, [r2, #0]
 800377a:	bf18      	it	ne
 800377c:	460c      	movne	r4, r1
 800377e:	e7e9      	b.n	8003754 <_malloc_r+0x64>
 8003780:	460c      	mov	r4, r1
 8003782:	6849      	ldr	r1, [r1, #4]
 8003784:	e7ca      	b.n	800371c <_malloc_r+0x2c>
 8003786:	1cc4      	adds	r4, r0, #3
 8003788:	f024 0403 	bic.w	r4, r4, #3
 800378c:	42a0      	cmp	r0, r4
 800378e:	d005      	beq.n	800379c <_malloc_r+0xac>
 8003790:	1a21      	subs	r1, r4, r0
 8003792:	4630      	mov	r0, r6
 8003794:	f000 f830 	bl	80037f8 <_sbrk_r>
 8003798:	3001      	adds	r0, #1
 800379a:	d0cd      	beq.n	8003738 <_malloc_r+0x48>
 800379c:	6025      	str	r5, [r4, #0]
 800379e:	e7d9      	b.n	8003754 <_malloc_r+0x64>
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	bf00      	nop
 80037a4:	200000b0 	.word	0x200000b0
 80037a8:	200000b4 	.word	0x200000b4

080037ac <_realloc_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	4607      	mov	r7, r0
 80037b0:	4614      	mov	r4, r2
 80037b2:	460e      	mov	r6, r1
 80037b4:	b921      	cbnz	r1, 80037c0 <_realloc_r+0x14>
 80037b6:	4611      	mov	r1, r2
 80037b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037bc:	f7ff bf98 	b.w	80036f0 <_malloc_r>
 80037c0:	b922      	cbnz	r2, 80037cc <_realloc_r+0x20>
 80037c2:	f7ff ff47 	bl	8003654 <_free_r>
 80037c6:	4625      	mov	r5, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037cc:	f000 f826 	bl	800381c <_malloc_usable_size_r>
 80037d0:	4284      	cmp	r4, r0
 80037d2:	d90f      	bls.n	80037f4 <_realloc_r+0x48>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff ff8a 	bl	80036f0 <_malloc_r>
 80037dc:	4605      	mov	r5, r0
 80037de:	2800      	cmp	r0, #0
 80037e0:	d0f2      	beq.n	80037c8 <_realloc_r+0x1c>
 80037e2:	4631      	mov	r1, r6
 80037e4:	4622      	mov	r2, r4
 80037e6:	f7ff ff0f 	bl	8003608 <memcpy>
 80037ea:	4631      	mov	r1, r6
 80037ec:	4638      	mov	r0, r7
 80037ee:	f7ff ff31 	bl	8003654 <_free_r>
 80037f2:	e7e9      	b.n	80037c8 <_realloc_r+0x1c>
 80037f4:	4635      	mov	r5, r6
 80037f6:	e7e7      	b.n	80037c8 <_realloc_r+0x1c>

080037f8 <_sbrk_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4c06      	ldr	r4, [pc, #24]	; (8003814 <_sbrk_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4605      	mov	r5, r0
 8003800:	4608      	mov	r0, r1
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	f000 f814 	bl	8003830 <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_sbrk_r+0x1a>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	b103      	cbz	r3, 8003812 <_sbrk_r+0x1a>
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	20000200 	.word	0x20000200

08003818 <__malloc_lock>:
 8003818:	4770      	bx	lr

0800381a <__malloc_unlock>:
 800381a:	4770      	bx	lr

0800381c <_malloc_usable_size_r>:
 800381c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003820:	2800      	cmp	r0, #0
 8003822:	f1a0 0004 	sub.w	r0, r0, #4
 8003826:	bfbc      	itt	lt
 8003828:	580b      	ldrlt	r3, [r1, r0]
 800382a:	18c0      	addlt	r0, r0, r3
 800382c:	4770      	bx	lr
	...

08003830 <_sbrk>:
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <_sbrk+0x14>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	4602      	mov	r2, r0
 8003836:	b909      	cbnz	r1, 800383c <_sbrk+0xc>
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <_sbrk+0x18>)
 800383a:	6019      	str	r1, [r3, #0]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	4402      	add	r2, r0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4770      	bx	lr
 8003844:	200000b8 	.word	0x200000b8
 8003848:	20000204 	.word	0x20000204

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
