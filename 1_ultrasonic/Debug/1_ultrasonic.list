
1_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003024  08003024  00013024  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080030a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          00000160  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001d8  200001d8  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012a3d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000022fa  00000000  00000000  00032ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000063f7  00000000  00000000  00034ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0003bab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004d4b  00000000  00000000  0003c610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003a60  00000000  00000000  0004135b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00044dbb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001e5c  00000000  00000000  00044e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800300c 	.word	0x0800300c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800300c 	.word	0x0800300c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b97a 	b.w	8000d90 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	468c      	mov	ip, r1
 8000aba:	460d      	mov	r5, r1
 8000abc:	4604      	mov	r4, r0
 8000abe:	9e08      	ldr	r6, [sp, #32]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d151      	bne.n	8000b68 <__udivmoddi4+0xb4>
 8000ac4:	428a      	cmp	r2, r1
 8000ac6:	4617      	mov	r7, r2
 8000ac8:	d96d      	bls.n	8000ba6 <__udivmoddi4+0xf2>
 8000aca:	fab2 fe82 	clz	lr, r2
 8000ace:	f1be 0f00 	cmp.w	lr, #0
 8000ad2:	d00b      	beq.n	8000aec <__udivmoddi4+0x38>
 8000ad4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000adc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ae0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ae8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000af0:	0c25      	lsrs	r5, r4, #16
 8000af2:	fbbc f8fa 	udiv	r8, ip, sl
 8000af6:	fa1f f987 	uxth.w	r9, r7
 8000afa:	fb0a cc18 	mls	ip, sl, r8, ip
 8000afe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b02:	fb08 f309 	mul.w	r3, r8, r9
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x6c>
 8000b0a:	19ed      	adds	r5, r5, r7
 8000b0c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b10:	f080 8123 	bcs.w	8000d5a <__udivmoddi4+0x2a6>
 8000b14:	42ab      	cmp	r3, r5
 8000b16:	f240 8120 	bls.w	8000d5a <__udivmoddi4+0x2a6>
 8000b1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b1e:	443d      	add	r5, r7
 8000b20:	1aed      	subs	r5, r5, r3
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b28:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b30:	fb00 f909 	mul.w	r9, r0, r9
 8000b34:	45a1      	cmp	r9, r4
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x98>
 8000b38:	19e4      	adds	r4, r4, r7
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 810a 	bcs.w	8000d56 <__udivmoddi4+0x2a2>
 8000b42:	45a1      	cmp	r9, r4
 8000b44:	f240 8107 	bls.w	8000d56 <__udivmoddi4+0x2a2>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	443c      	add	r4, r7
 8000b4c:	eba4 0409 	sub.w	r4, r4, r9
 8000b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b54:	2100      	movs	r1, #0
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d061      	beq.n	8000c1e <__udivmoddi4+0x16a>
 8000b5a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6034      	str	r4, [r6, #0]
 8000b62:	6073      	str	r3, [r6, #4]
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d907      	bls.n	8000b7c <__udivmoddi4+0xc8>
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d054      	beq.n	8000c1a <__udivmoddi4+0x166>
 8000b70:	2100      	movs	r1, #0
 8000b72:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b76:	4608      	mov	r0, r1
 8000b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7c:	fab3 f183 	clz	r1, r3
 8000b80:	2900      	cmp	r1, #0
 8000b82:	f040 808e 	bne.w	8000ca2 <__udivmoddi4+0x1ee>
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xdc>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80fa 	bhi.w	8000d84 <__udivmoddi4+0x2d0>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb65 0503 	sbc.w	r5, r5, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	46ac      	mov	ip, r5
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d03f      	beq.n	8000c1e <__udivmoddi4+0x16a>
 8000b9e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	b912      	cbnz	r2, 8000bae <__udivmoddi4+0xfa>
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bae:	fab7 fe87 	clz	lr, r7
 8000bb2:	f1be 0f00 	cmp.w	lr, #0
 8000bb6:	d134      	bne.n	8000c22 <__udivmoddi4+0x16e>
 8000bb8:	1beb      	subs	r3, r5, r7
 8000bba:	0c3a      	lsrs	r2, r7, #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bc6:	0c25      	lsrs	r5, r4, #16
 8000bc8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bd0:	fb0c f308 	mul.w	r3, ip, r8
 8000bd4:	42ab      	cmp	r3, r5
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x134>
 8000bd8:	19ed      	adds	r5, r5, r7
 8000bda:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x132>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	f200 80d1 	bhi.w	8000d88 <__udivmoddi4+0x2d4>
 8000be6:	4680      	mov	r8, r0
 8000be8:	1aed      	subs	r5, r5, r3
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bf0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bf4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bf8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x15c>
 8000c00:	19e4      	adds	r4, r4, r7
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x15a>
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	f200 80b8 	bhi.w	8000d7e <__udivmoddi4+0x2ca>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 040c 	sub.w	r4, r4, ip
 8000c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c18:	e79d      	b.n	8000b56 <__udivmoddi4+0xa2>
 8000c1a:	4631      	mov	r1, r6
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	f1ce 0420 	rsb	r4, lr, #32
 8000c26:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c2a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c2e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c32:	0c3a      	lsrs	r2, r7, #16
 8000c34:	fa25 f404 	lsr.w	r4, r5, r4
 8000c38:	ea48 0803 	orr.w	r8, r8, r3
 8000c3c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c40:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c44:	fb02 4411 	mls	r4, r2, r1, r4
 8000c48:	fa1f fc87 	uxth.w	ip, r7
 8000c4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c50:	fb01 f30c 	mul.w	r3, r1, ip
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x1bc>
 8000c5c:	19ed      	adds	r5, r5, r7
 8000c5e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c62:	f080 808a 	bcs.w	8000d7a <__udivmoddi4+0x2c6>
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	f240 8087 	bls.w	8000d7a <__udivmoddi4+0x2c6>
 8000c6c:	3902      	subs	r1, #2
 8000c6e:	443d      	add	r5, r7
 8000c70:	1aeb      	subs	r3, r5, r3
 8000c72:	fa1f f588 	uxth.w	r5, r8
 8000c76:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c7a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c82:	fb00 f30c 	mul.w	r3, r0, ip
 8000c86:	42ab      	cmp	r3, r5
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1e6>
 8000c8a:	19ed      	adds	r5, r5, r7
 8000c8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c90:	d26f      	bcs.n	8000d72 <__udivmoddi4+0x2be>
 8000c92:	42ab      	cmp	r3, r5
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0x2be>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443d      	add	r5, r7
 8000c9a:	1aeb      	subs	r3, r5, r3
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	e78f      	b.n	8000bc2 <__udivmoddi4+0x10e>
 8000ca2:	f1c1 0720 	rsb	r7, r1, #32
 8000ca6:	fa22 f807 	lsr.w	r8, r2, r7
 8000caa:	408b      	lsls	r3, r1
 8000cac:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb0:	ea48 0303 	orr.w	r3, r8, r3
 8000cb4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000cb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cc2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cca:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cce:	fa1f f883 	uxth.w	r8, r3
 8000cd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cd6:	fb09 f408 	mul.w	r4, r9, r8
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x244>
 8000ce6:	18ed      	adds	r5, r5, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	d243      	bcs.n	8000d76 <__udivmoddi4+0x2c2>
 8000cee:	42ac      	cmp	r4, r5
 8000cf0:	d941      	bls.n	8000d76 <__udivmoddi4+0x2c2>
 8000cf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf6:	441d      	add	r5, r3
 8000cf8:	1b2d      	subs	r5, r5, r4
 8000cfa:	fa1f fe8e 	uxth.w	lr, lr
 8000cfe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d02:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d0a:	fb00 f808 	mul.w	r8, r0, r8
 8000d0e:	45a0      	cmp	r8, r4
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x26e>
 8000d12:	18e4      	adds	r4, r4, r3
 8000d14:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d18:	d229      	bcs.n	8000d6e <__udivmoddi4+0x2ba>
 8000d1a:	45a0      	cmp	r8, r4
 8000d1c:	d927      	bls.n	8000d6e <__udivmoddi4+0x2ba>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	441c      	add	r4, r3
 8000d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d26:	eba4 0408 	sub.w	r4, r4, r8
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	454c      	cmp	r4, r9
 8000d30:	46c6      	mov	lr, r8
 8000d32:	464d      	mov	r5, r9
 8000d34:	d315      	bcc.n	8000d62 <__udivmoddi4+0x2ae>
 8000d36:	d012      	beq.n	8000d5e <__udivmoddi4+0x2aa>
 8000d38:	b156      	cbz	r6, 8000d50 <__udivmoddi4+0x29c>
 8000d3a:	ebba 030e 	subs.w	r3, sl, lr
 8000d3e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d42:	fa04 f707 	lsl.w	r7, r4, r7
 8000d46:	40cb      	lsrs	r3, r1
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	40cc      	lsrs	r4, r1
 8000d4c:	6037      	str	r7, [r6, #0]
 8000d4e:	6074      	str	r4, [r6, #4]
 8000d50:	2100      	movs	r1, #0
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	4618      	mov	r0, r3
 8000d58:	e6f8      	b.n	8000b4c <__udivmoddi4+0x98>
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	e6e0      	b.n	8000b20 <__udivmoddi4+0x6c>
 8000d5e:	45c2      	cmp	sl, r8
 8000d60:	d2ea      	bcs.n	8000d38 <__udivmoddi4+0x284>
 8000d62:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d66:	eb69 0503 	sbc.w	r5, r9, r3
 8000d6a:	3801      	subs	r0, #1
 8000d6c:	e7e4      	b.n	8000d38 <__udivmoddi4+0x284>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	e7d7      	b.n	8000d22 <__udivmoddi4+0x26e>
 8000d72:	4640      	mov	r0, r8
 8000d74:	e791      	b.n	8000c9a <__udivmoddi4+0x1e6>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e7be      	b.n	8000cf8 <__udivmoddi4+0x244>
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	e778      	b.n	8000c70 <__udivmoddi4+0x1bc>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	e745      	b.n	8000c10 <__udivmoddi4+0x15c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e708      	b.n	8000b9a <__udivmoddi4+0xe6>
 8000d88:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8c:	443d      	add	r5, r7
 8000d8e:	e72b      	b.n	8000be8 <__udivmoddi4+0x134>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_InitTick+0x3c>)
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_InitTick+0x40>)
{
 8000d9a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	7818      	ldrb	r0, [r3, #0]
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000da6:	6810      	ldr	r0, [r2, #0]
 8000da8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dac:	f000 f894 	bl	8000ed8 <HAL_SYSTICK_Config>
 8000db0:	4604      	mov	r4, r0
 8000db2:	b958      	cbnz	r0, 8000dcc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	2d0f      	cmp	r5, #15
 8000db6:	d809      	bhi.n	8000dcc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	4602      	mov	r2, r0
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f84a 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_InitTick+0x44>)
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	601d      	str	r5, [r3, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_Init>:
{
 8000ddc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x30>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f81b 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ffc8 	bl	8000d94 <HAL_InitTick>
  HAL_MspInit();
 8000e04:	f001 fb52 	bl	80024ac <HAL_MspInit>
}
 8000e08:	2000      	movs	r0, #0
 8000e0a:	bd08      	pop	{r3, pc}
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_IncTick+0x10>)
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_IncTick+0x14>)
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	440b      	add	r3, r1
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	20000000 	.word	0x20000000

08000e28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <HAL_GetTick+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200000a0 	.word	0x200000a0

08000e34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e44:	0200      	lsls	r0, r0, #8
 8000e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e50:	60d3      	str	r3, [r2, #12]
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b530      	push	{r4, r5, lr}
 8000e5c:	68dc      	ldr	r4, [r3, #12]
 8000e5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	bf28      	it	cs
 8000e6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 0501 	mov.w	r5, #1
 8000e74:	fa05 f303 	lsl.w	r3, r5, r3
 8000e78:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7c:	bf8c      	ite	hi
 8000e7e:	3c03      	subhi	r4, #3
 8000e80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e82:	4019      	ands	r1, r3
 8000e84:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e86:	fa05 f404 	lsl.w	r4, r5, r4
 8000e8a:	3c01      	subs	r4, #1
 8000e8c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	ea42 0201 	orr.w	r2, r2, r1
 8000e94:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	bfaf      	iteee	ge
 8000e9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	f000 000f 	andlt.w	r0, r0, #15
 8000ea2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ebc <HAL_NVIC_SetPriority+0x64>)
 8000ea4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	bfa5      	ittet	ge
 8000ea8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000eac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000eb4:	bd30      	pop	{r4, r5, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	e000ed14 	.word	0xe000ed14

08000ec0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec0:	0942      	lsrs	r2, r0, #5
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f000 001f 	and.w	r0, r0, #31
 8000ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	3801      	subs	r0, #1
 8000eda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ede:	d20a      	bcs.n	8000ef6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	21f0      	movs	r1, #240	; 0xf0
 8000ee8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f06:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f08:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f0a:	bf0c      	ite	eq
 8000f0c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f10:	f022 0204 	bicne.w	r2, r2, #4
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4770      	bx	lr
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f1c:	4770      	bx	lr

08000f1e <HAL_SYSTICK_IRQHandler>:
{
 8000f1e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f20:	f7ff fffc 	bl	8000f1c <HAL_SYSTICK_Callback>
 8000f24:	bd08      	pop	{r3, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80010f8 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80010fc <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000f3e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f44:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f48:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000f4c:	45b6      	cmp	lr, r6
 8000f4e:	f040 80b6 	bne.w	80010be <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	684c      	ldr	r4, [r1, #4]
 8000f54:	f024 0710 	bic.w	r7, r4, #16
 8000f58:	2f02      	cmp	r7, #2
 8000f5a:	d116      	bne.n	8000f8a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f60:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f64:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f70:	f04f 0c0f 	mov.w	ip, #15
 8000f74:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f78:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7c:	690d      	ldr	r5, [r1, #16]
 8000f7e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f82:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f86:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f8a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f90:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f94:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f98:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000fae:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	d811      	bhi.n	8000fd8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000fb4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	68cf      	ldr	r7, [r1, #12]
 8000fbc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000fc0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000fc4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fc6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fcc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000fd0:	409f      	lsls	r7, r3
 8000fd2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000fd6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fd8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	688f      	ldr	r7, [r1, #8]
 8000fde:	fa07 f70a 	lsl.w	r7, r7, sl
 8000fe2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000fe4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe6:	00e5      	lsls	r5, r4, #3
 8000fe8:	d569      	bpl.n	80010be <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	f04f 0b00 	mov.w	fp, #0
 8000fee:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ff2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	4d3f      	ldr	r5, [pc, #252]	; (80010f4 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ffc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001000:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001004:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001008:	9703      	str	r7, [sp, #12]
 800100a:	9f03      	ldr	r7, [sp, #12]
 800100c:	f023 0703 	bic.w	r7, r3, #3
 8001010:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001014:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800101c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001024:	f04f 0e0f 	mov.w	lr, #15
 8001028:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	d04b      	beq.n	80010cc <HAL_GPIO_Init+0x1a4>
 8001034:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001038:	42a8      	cmp	r0, r5
 800103a:	d049      	beq.n	80010d0 <HAL_GPIO_Init+0x1a8>
 800103c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001040:	42a8      	cmp	r0, r5
 8001042:	d047      	beq.n	80010d4 <HAL_GPIO_Init+0x1ac>
 8001044:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001048:	42a8      	cmp	r0, r5
 800104a:	d045      	beq.n	80010d8 <HAL_GPIO_Init+0x1b0>
 800104c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001050:	42a8      	cmp	r0, r5
 8001052:	d043      	beq.n	80010dc <HAL_GPIO_Init+0x1b4>
 8001054:	4548      	cmp	r0, r9
 8001056:	d043      	beq.n	80010e0 <HAL_GPIO_Init+0x1b8>
 8001058:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800105c:	42a8      	cmp	r0, r5
 800105e:	d041      	beq.n	80010e4 <HAL_GPIO_Init+0x1bc>
 8001060:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001064:	42a8      	cmp	r0, r5
 8001066:	d03f      	beq.n	80010e8 <HAL_GPIO_Init+0x1c0>
 8001068:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800106c:	42a8      	cmp	r0, r5
 800106e:	d03d      	beq.n	80010ec <HAL_GPIO_Init+0x1c4>
 8001070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001074:	42a8      	cmp	r0, r5
 8001076:	bf14      	ite	ne
 8001078:	250a      	movne	r5, #10
 800107a:	2509      	moveq	r5, #9
 800107c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001080:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001086:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001088:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800108e:	bf0c      	ite	eq
 8001090:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001092:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001094:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001096:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800109c:	bf0c      	ite	eq
 800109e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010a0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80010a2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80010aa:	bf0c      	ite	eq
 80010ac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010ae:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80010b0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80010b2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80010b6:	bf54      	ite	pl
 80010b8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010ba:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010bc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	3301      	adds	r3, #1
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	f47f af3c 	bne.w	8000f3e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80010c6:	b005      	add	sp, #20
 80010c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010cc:	465d      	mov	r5, fp
 80010ce:	e7d5      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010d0:	2501      	movs	r5, #1
 80010d2:	e7d3      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010d4:	2502      	movs	r5, #2
 80010d6:	e7d1      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010d8:	2503      	movs	r5, #3
 80010da:	e7cf      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010dc:	2504      	movs	r5, #4
 80010de:	e7cd      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010e0:	2505      	movs	r5, #5
 80010e2:	e7cb      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010e4:	2506      	movs	r5, #6
 80010e6:	e7c9      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010e8:	2507      	movs	r5, #7
 80010ea:	e7c7      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010ec:	2508      	movs	r5, #8
 80010ee:	e7c5      	b.n	800107c <HAL_GPIO_Init+0x154>
 80010f0:	40013c00 	.word	0x40013c00
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40021400 	.word	0x40021400

08001100 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	6903      	ldr	r3, [r0, #16]
 8001102:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001104:	bf14      	ite	ne
 8001106:	2001      	movne	r0, #1
 8001108:	2000      	moveq	r0, #0
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	b10a      	cbz	r2, 8001112 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	6181      	str	r1, [r0, #24]
 8001110:	4770      	bx	lr
 8001112:	0409      	lsls	r1, r1, #16
 8001114:	e7fb      	b.n	800110e <HAL_GPIO_WritePin+0x2>
	...

08001118 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001118:	4913      	ldr	r1, [pc, #76]	; (8001168 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800111a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800111c:	688b      	ldr	r3, [r1, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d003      	beq.n	800112e <HAL_RCC_GetSysClockFreq+0x16>
 8001126:	2b08      	cmp	r3, #8
 8001128:	d003      	beq.n	8001132 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800112c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <HAL_RCC_GetSysClockFreq+0x58>)
 8001130:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001132:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001134:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001136:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001138:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800113c:	bf14      	ite	ne
 800113e:	480c      	ldrne	r0, [pc, #48]	; (8001170 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001140:	480a      	ldreq	r0, [pc, #40]	; (800116c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001142:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001146:	bf18      	it	ne
 8001148:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800114a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114e:	fba1 0100 	umull	r0, r1, r1, r0
 8001152:	f7ff fc97 	bl	8000a84 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_RCC_GetSysClockFreq+0x50>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800115e:	3301      	adds	r3, #1
 8001160:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001162:	fbb0 f0f3 	udiv	r0, r0, r3
 8001166:	bd08      	pop	{r3, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	00f42400 	.word	0x00f42400
 8001170:	017d7840 	.word	0x017d7840

08001174 <HAL_RCC_ClockConfig>:
{
 8001174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001178:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800117a:	4604      	mov	r4, r0
 800117c:	b910      	cbnz	r0, 8001184 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_RCC_ClockConfig+0x124>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f002 020f 	and.w	r2, r2, #15
 800118c:	428a      	cmp	r2, r1
 800118e:	d328      	bcc.n	80011e2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	6821      	ldr	r1, [r4, #0]
 8001192:	078f      	lsls	r7, r1, #30
 8001194:	d42d      	bmi.n	80011f2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001196:	07c8      	lsls	r0, r1, #31
 8001198:	d440      	bmi.n	800121c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_RCC_ClockConfig+0x124>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f002 020f 	and.w	r2, r2, #15
 80011a2:	4295      	cmp	r5, r2
 80011a4:	d366      	bcc.n	8001274 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	0751      	lsls	r1, r2, #29
 80011aa:	d46c      	bmi.n	8001286 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	0713      	lsls	r3, r2, #28
 80011ae:	d507      	bpl.n	80011c0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b0:	4a3a      	ldr	r2, [pc, #232]	; (800129c <HAL_RCC_ClockConfig+0x128>)
 80011b2:	6921      	ldr	r1, [r4, #16]
 80011b4:	6893      	ldr	r3, [r2, #8]
 80011b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011c0:	f7ff ffaa 	bl	8001118 <HAL_RCC_GetSysClockFreq>
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_RCC_ClockConfig+0x128>)
 80011c6:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <HAL_RCC_ClockConfig+0x12c>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	40d8      	lsrs	r0, r3
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_ClockConfig+0x130>)
 80011d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fddc 	bl	8000d94 <HAL_InitTick>
  return HAL_OK;
 80011dc:	2000      	movs	r0, #0
 80011de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	4299      	cmp	r1, r3
 80011ee:	d1c6      	bne.n	800117e <HAL_RCC_ClockConfig+0xa>
 80011f0:	e7ce      	b.n	8001190 <HAL_RCC_ClockConfig+0x1c>
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f8:	bf1e      	ittt	ne
 80011fa:	689a      	ldrne	r2, [r3, #8]
 80011fc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001200:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001202:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001204:	bf42      	ittt	mi
 8001206:	689a      	ldrmi	r2, [r3, #8]
 8001208:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800120c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	68a0      	ldr	r0, [r4, #8]
 8001212:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001216:	4302      	orrs	r2, r0
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	e7bc      	b.n	8001196 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121c:	6862      	ldr	r2, [r4, #4]
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_RCC_ClockConfig+0x128>)
 8001220:	2a01      	cmp	r2, #1
 8001222:	d11d      	bne.n	8001260 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	d0a8      	beq.n	800117e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122c:	4e1b      	ldr	r6, [pc, #108]	; (800129c <HAL_RCC_ClockConfig+0x128>)
 800122e:	68b3      	ldr	r3, [r6, #8]
 8001230:	f023 0303 	bic.w	r3, r3, #3
 8001234:	4313      	orrs	r3, r2
 8001236:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001238:	f7ff fdf6 	bl	8000e28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001240:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	68b3      	ldr	r3, [r6, #8]
 8001244:	6862      	ldr	r2, [r4, #4]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800124e:	d0a4      	beq.n	800119a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fdea 	bl	8000e28 <HAL_GetTick>
 8001254:	1bc0      	subs	r0, r0, r7
 8001256:	4540      	cmp	r0, r8
 8001258:	d9f3      	bls.n	8001242 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800125a:	2003      	movs	r0, #3
}
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001260:	1e91      	subs	r1, r2, #2
 8001262:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001264:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001266:	d802      	bhi.n	800126e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001268:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800126c:	e7dd      	b.n	800122a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	f013 0f02 	tst.w	r3, #2
 8001272:	e7da      	b.n	800122a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001274:	b2ea      	uxtb	r2, r5
 8001276:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	429d      	cmp	r5, r3
 8001280:	f47f af7d 	bne.w	800117e <HAL_RCC_ClockConfig+0xa>
 8001284:	e78f      	b.n	80011a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001286:	4905      	ldr	r1, [pc, #20]	; (800129c <HAL_RCC_ClockConfig+0x128>)
 8001288:	68e0      	ldr	r0, [r4, #12]
 800128a:	688b      	ldr	r3, [r1, #8]
 800128c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001290:	4303      	orrs	r3, r0
 8001292:	608b      	str	r3, [r1, #8]
 8001294:	e78a      	b.n	80011ac <HAL_RCC_ClockConfig+0x38>
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00
 800129c:	40023800 	.word	0x40023800
 80012a0:	08003048 	.word	0x08003048
 80012a4:	20000010 	.word	0x20000010

080012a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000010 	.word	0x20000010

080012b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012c2:	6810      	ldr	r0, [r2, #0]
}
 80012c4:	40d8      	lsrs	r0, r3
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800
 80012cc:	08003058 	.word	0x08003058
 80012d0:	20000010 	.word	0x20000010

080012d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012e2:	6810      	ldr	r0, [r2, #0]
}
 80012e4:	40d8      	lsrs	r0, r3
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800
 80012ec:	08003058 	.word	0x08003058
 80012f0:	20000010 	.word	0x20000010

080012f4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f4:	6803      	ldr	r3, [r0, #0]
{
 80012f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	07dd      	lsls	r5, r3, #31
{
 80012fc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	d410      	bmi.n	8001322 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	0798      	lsls	r0, r3, #30
 8001304:	d45b      	bmi.n	80013be <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	071a      	lsls	r2, r3, #28
 800130a:	f100 809d 	bmi.w	8001448 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	075b      	lsls	r3, r3, #29
 8001312:	f100 80bb 	bmi.w	800148c <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001316:	69a2      	ldr	r2, [r4, #24]
 8001318:	2a00      	cmp	r2, #0
 800131a:	f040 811c 	bne.w	8001556 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800131e:	2000      	movs	r0, #0
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001322:	4ba7      	ldr	r3, [pc, #668]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	f002 020c 	and.w	r2, r2, #12
 800132a:	2a04      	cmp	r2, #4
 800132c:	d007      	beq.n	800133e <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001334:	2a08      	cmp	r2, #8
 8001336:	d10d      	bne.n	8001354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0259      	lsls	r1, r3, #9
 800133c:	d50a      	bpl.n	8001354 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	4ba0      	ldr	r3, [pc, #640]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	039a      	lsls	r2, r3, #14
 8001344:	d5dc      	bpl.n	8001300 <HAL_RCC_OscConfig+0xc>
 8001346:	6863      	ldr	r3, [r4, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1d9      	bne.n	8001300 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
}
 800134e:	b002      	add	sp, #8
 8001350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	4d9a      	ldr	r5, [pc, #616]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d111      	bne.n	8001382 <HAL_RCC_OscConfig+0x8e>
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001366:	f7ff fd5f 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4d95      	ldr	r5, [pc, #596]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800136c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	039b      	lsls	r3, r3, #14
 8001372:	d4c5      	bmi.n	8001300 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fd58 	bl	8000e28 <HAL_GetTick>
 8001378:	1b80      	subs	r0, r0, r6
 800137a:	2864      	cmp	r0, #100	; 0x64
 800137c:	d9f7      	bls.n	800136e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800137e:	2003      	movs	r0, #3
 8001380:	e7e5      	b.n	800134e <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001386:	d104      	bne.n	8001392 <HAL_RCC_OscConfig+0x9e>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	e7e5      	b.n	800135e <HAL_RCC_OscConfig+0x6a>
 8001392:	682a      	ldr	r2, [r5, #0]
 8001394:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001398:	602a      	str	r2, [r5, #0]
 800139a:	682a      	ldr	r2, [r5, #0]
 800139c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1df      	bne.n	8001366 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80013a6:	f7ff fd3f 	bl	8000e28 <HAL_GetTick>
 80013aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	039f      	lsls	r7, r3, #14
 80013b0:	d5a6      	bpl.n	8001300 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fd39 	bl	8000e28 <HAL_GetTick>
 80013b6:	1b80      	subs	r0, r0, r6
 80013b8:	2864      	cmp	r0, #100	; 0x64
 80013ba:	d9f7      	bls.n	80013ac <HAL_RCC_OscConfig+0xb8>
 80013bc:	e7df      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013be:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	f012 0f0c 	tst.w	r2, #12
 80013c6:	d007      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013ce:	2a08      	cmp	r2, #8
 80013d0:	d111      	bne.n	80013f6 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	025e      	lsls	r6, r3, #9
 80013d6:	d40e      	bmi.n	80013f6 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d8:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	0795      	lsls	r5, r2, #30
 80013de:	d502      	bpl.n	80013e6 <HAL_RCC_OscConfig+0xf2>
 80013e0:	68e2      	ldr	r2, [r4, #12]
 80013e2:	2a01      	cmp	r2, #1
 80013e4:	d1b2      	bne.n	800134c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6921      	ldr	r1, [r4, #16]
 80013ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f4:	e787      	b.n	8001306 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f6:	68e2      	ldr	r2, [r4, #12]
 80013f8:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <HAL_RCC_OscConfig+0x2d0>)
 80013fa:	b1b2      	cbz	r2, 800142a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001400:	f7ff fd12 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4d6e      	ldr	r5, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001406:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	0798      	lsls	r0, r3, #30
 800140c:	d507      	bpl.n	800141e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	6922      	ldr	r2, [r4, #16]
 8001412:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001416:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800141a:	602b      	str	r3, [r5, #0]
 800141c:	e773      	b.n	8001306 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fd03 	bl	8000e28 <HAL_GetTick>
 8001422:	1b80      	subs	r0, r0, r6
 8001424:	2802      	cmp	r0, #2
 8001426:	d9ef      	bls.n	8001408 <HAL_RCC_OscConfig+0x114>
 8001428:	e7a9      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800142a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800142c:	f7ff fcfc 	bl	8000e28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	4d63      	ldr	r5, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001432:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	0799      	lsls	r1, r3, #30
 8001438:	f57f af65 	bpl.w	8001306 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fcf4 	bl	8000e28 <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2802      	cmp	r0, #2
 8001444:	d9f6      	bls.n	8001434 <HAL_RCC_OscConfig+0x140>
 8001446:	e79a      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001448:	6962      	ldr	r2, [r4, #20]
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x2d4>)
 800144c:	b17a      	cbz	r2, 800146e <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001452:	f7ff fce9 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4d5a      	ldr	r5, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001458:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800145c:	079f      	lsls	r7, r3, #30
 800145e:	f53f af56 	bmi.w	800130e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fce1 	bl	8000e28 <HAL_GetTick>
 8001466:	1b80      	subs	r0, r0, r6
 8001468:	2802      	cmp	r0, #2
 800146a:	d9f6      	bls.n	800145a <HAL_RCC_OscConfig+0x166>
 800146c:	e787      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800146e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001470:	f7ff fcda 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4d52      	ldr	r5, [pc, #328]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001476:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800147a:	0798      	lsls	r0, r3, #30
 800147c:	f57f af47 	bpl.w	800130e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fcd2 	bl	8000e28 <HAL_GetTick>
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	2802      	cmp	r0, #2
 8001488:	d9f6      	bls.n	8001478 <HAL_RCC_OscConfig+0x184>
 800148a:	e778      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 800148e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001490:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001494:	d128      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	9201      	str	r2, [sp, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014aa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4d47      	ldr	r5, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x2d8>)
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	05d9      	lsls	r1, r3, #23
 80014b2:	d51b      	bpl.n	80014ec <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	68a3      	ldr	r3, [r4, #8]
 80014b6:	4d42      	ldr	r5, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d127      	bne.n	800150c <HAL_RCC_OscConfig+0x218>
 80014bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014c4:	f7ff fcb0 	bl	8000e28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4d3d      	ldr	r5, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80014ca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d2:	079b      	lsls	r3, r3, #30
 80014d4:	d539      	bpl.n	800154a <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	f43f af1d 	beq.w	8001316 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 80014de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	e716      	b.n	8001316 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	2600      	movs	r6, #0
 80014ea:	e7df      	b.n	80014ac <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014f4:	f7ff fc98 	bl	8000e28 <HAL_GetTick>
 80014f8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	05da      	lsls	r2, r3, #23
 80014fe:	d4d9      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff fc92 	bl	8000e28 <HAL_GetTick>
 8001504:	1bc0      	subs	r0, r0, r7
 8001506:	2802      	cmp	r0, #2
 8001508:	d9f7      	bls.n	80014fa <HAL_RCC_OscConfig+0x206>
 800150a:	e738      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	2b05      	cmp	r3, #5
 800150e:	d104      	bne.n	800151a <HAL_RCC_OscConfig+0x226>
 8001510:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	672b      	str	r3, [r5, #112]	; 0x70
 8001518:	e7d0      	b.n	80014bc <HAL_RCC_OscConfig+0x1c8>
 800151a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	672a      	str	r2, [r5, #112]	; 0x70
 8001522:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001524:	f022 0204 	bic.w	r2, r2, #4
 8001528:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ca      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 800152e:	f7ff fc7b 	bl	8000e28 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001536:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800153a:	0798      	lsls	r0, r3, #30
 800153c:	d5cb      	bpl.n	80014d6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fc73 	bl	8000e28 <HAL_GetTick>
 8001542:	1bc0      	subs	r0, r0, r7
 8001544:	4540      	cmp	r0, r8
 8001546:	d9f7      	bls.n	8001538 <HAL_RCC_OscConfig+0x244>
 8001548:	e719      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fc6d 	bl	8000e28 <HAL_GetTick>
 800154e:	1bc0      	subs	r0, r0, r7
 8001550:	4540      	cmp	r0, r8
 8001552:	d9bd      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1dc>
 8001554:	e713      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4d1a      	ldr	r5, [pc, #104]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
 8001558:	68ab      	ldr	r3, [r5, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	f43f aef4 	beq.w	800134c <HAL_RCC_OscConfig+0x58>
 8001564:	4e1a      	ldr	r6, [pc, #104]	; (80015d0 <HAL_RCC_OscConfig+0x2dc>)
 8001566:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800156a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	d138      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800156e:	f7ff fc5b 	bl	8000e28 <HAL_GetTick>
 8001572:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	0199      	lsls	r1, r3, #6
 8001578:	d42c      	bmi.n	80015d4 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	6a22      	ldr	r2, [r4, #32]
 800157c:	69e3      	ldr	r3, [r4, #28]
 800157e:	4313      	orrs	r3, r2
 8001580:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001582:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001586:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800158c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800158e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001592:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001596:	0852      	lsrs	r2, r2, #1
 8001598:	3a01      	subs	r2, #1
 800159a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800159e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015a0:	2301      	movs	r3, #1
 80015a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc40 	bl	8000e28 <HAL_GetTick>
 80015a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	019a      	lsls	r2, r3, #6
 80015ae:	f53f aeb6 	bmi.w	800131e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fc39 	bl	8000e28 <HAL_GetTick>
 80015b6:	1b40      	subs	r0, r0, r5
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d9f6      	bls.n	80015aa <HAL_RCC_OscConfig+0x2b6>
 80015bc:	e6df      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470000 	.word	0x42470000
 80015c8:	42470e80 	.word	0x42470e80
 80015cc:	40007000 	.word	0x40007000
 80015d0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fc28 	bl	8000e28 <HAL_GetTick>
 80015d8:	1bc0      	subs	r0, r0, r7
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9ca      	bls.n	8001574 <HAL_RCC_OscConfig+0x280>
 80015de:	e6ce      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc22 	bl	8000e28 <HAL_GetTick>
 80015e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	f57f ae98 	bpl.w	800131e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fc1b 	bl	8000e28 <HAL_GetTick>
 80015f2:	1b00      	subs	r0, r0, r4
 80015f4:	2802      	cmp	r0, #2
 80015f6:	d9f6      	bls.n	80015e6 <HAL_RCC_OscConfig+0x2f2>
 80015f8:	e6c1      	b.n	800137e <HAL_RCC_OscConfig+0x8a>
 80015fa:	bf00      	nop

080015fc <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015fc:	6803      	ldr	r3, [r0, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800160e:	2000      	movs	r0, #0
 8001610:	4770      	bx	lr

08001612 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001612:	6803      	ldr	r3, [r0, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800161c:	6a19      	ldr	r1, [r3, #32]
 800161e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001622:	4211      	tst	r1, r2
 8001624:	d108      	bne.n	8001638 <HAL_TIM_Base_Stop_IT+0x26>
 8001626:	6a19      	ldr	r1, [r3, #32]
 8001628:	f240 4244 	movw	r2, #1092	; 0x444
 800162c:	4211      	tst	r1, r2
 800162e:	bf02      	ittt	eq
 8001630:	681a      	ldreq	r2, [r3, #0]
 8001632:	f022 0201 	biceq.w	r2, r2, #1
 8001636:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8001638:	2000      	movs	r0, #0
 800163a:	4770      	bx	lr

0800163c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800163c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001640:	2b01      	cmp	r3, #1
{
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001648:	d01c      	beq.n	8001684 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800164a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800164e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001650:	2201      	movs	r2, #1
 8001652:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001656:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001658:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800165c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001660:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001662:	680a      	ldr	r2, [r1, #0]
 8001664:	2a40      	cmp	r2, #64	; 0x40
 8001666:	d079      	beq.n	800175c <HAL_TIM_ConfigClockSource+0x120>
 8001668:	d819      	bhi.n	800169e <HAL_TIM_ConfigClockSource+0x62>
 800166a:	2a10      	cmp	r2, #16
 800166c:	f000 8093 	beq.w	8001796 <HAL_TIM_ConfigClockSource+0x15a>
 8001670:	d80a      	bhi.n	8001688 <HAL_TIM_ConfigClockSource+0x4c>
 8001672:	2a00      	cmp	r2, #0
 8001674:	f000 8089 	beq.w	800178a <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001678:	2301      	movs	r3, #1
 800167a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800167e:	2300      	movs	r3, #0
 8001680:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001684:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8001686:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001688:	2a20      	cmp	r2, #32
 800168a:	f000 808a 	beq.w	80017a2 <HAL_TIM_ConfigClockSource+0x166>
 800168e:	2a30      	cmp	r2, #48	; 0x30
 8001690:	d1f2      	bne.n	8001678 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001692:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001694:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001698:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800169c:	e036      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800169e:	2a70      	cmp	r2, #112	; 0x70
 80016a0:	d036      	beq.n	8001710 <HAL_TIM_ConfigClockSource+0xd4>
 80016a2:	d81b      	bhi.n	80016dc <HAL_TIM_ConfigClockSource+0xa0>
 80016a4:	2a50      	cmp	r2, #80	; 0x50
 80016a6:	d042      	beq.n	800172e <HAL_TIM_ConfigClockSource+0xf2>
 80016a8:	2a60      	cmp	r2, #96	; 0x60
 80016aa:	d1e5      	bne.n	8001678 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016ac:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80016ae:	684d      	ldr	r5, [r1, #4]
 80016b0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016b2:	f024 0410 	bic.w	r4, r4, #16
 80016b6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016b8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80016ba:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016c8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80016cc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80016ce:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80016d6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80016da:	e017      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016e0:	d011      	beq.n	8001706 <HAL_TIM_ConfigClockSource+0xca>
 80016e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016e6:	d1c7      	bne.n	8001678 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016e8:	688a      	ldr	r2, [r1, #8]
 80016ea:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80016ec:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016ee:	68c9      	ldr	r1, [r1, #12]
 80016f0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016f2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80016f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016fa:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016fc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001704:	e002      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	e7b3      	b.n	8001678 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001710:	688a      	ldr	r2, [r1, #8]
 8001712:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001714:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001716:	68c9      	ldr	r1, [r1, #12]
 8001718:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800171a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800171e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001722:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001724:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001726:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001728:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800172c:	e7ee      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800172e:	684c      	ldr	r4, [r1, #4]
 8001730:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001732:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001734:	6a1d      	ldr	r5, [r3, #32]
 8001736:	f025 0501 	bic.w	r5, r5, #1
 800173a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800173c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800173e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001742:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001746:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800174a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800174c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800174e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001750:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001752:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001756:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800175a:	e7d7      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800175c:	684c      	ldr	r4, [r1, #4]
 800175e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001760:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001762:	6a1d      	ldr	r5, [r3, #32]
 8001764:	f025 0501 	bic.w	r5, r5, #1
 8001768:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800176a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800176c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001770:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001774:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001778:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800177a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800177c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800177e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001780:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001784:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001788:	e7c0      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800178a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800178c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001790:	f042 0207 	orr.w	r2, r2, #7
 8001794:	e7ba      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001796:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001798:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800179c:	f042 0217 	orr.w	r2, r2, #23
 80017a0:	e7b4      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80017a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017a8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80017ac:	e7ae      	b.n	800170c <HAL_TIM_ConfigClockSource+0xd0>

080017ae <HAL_TIM_OC_DelayElapsedCallback>:
 80017ae:	4770      	bx	lr

080017b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017b0:	4770      	bx	lr

080017b2 <HAL_TIM_TriggerCallback>:
 80017b2:	4770      	bx	lr

080017b4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017b4:	6803      	ldr	r3, [r0, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	0791      	lsls	r1, r2, #30
{
 80017ba:	b510      	push	{r4, lr}
 80017bc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017be:	d50e      	bpl.n	80017de <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	0792      	lsls	r2, r2, #30
 80017c4:	d50b      	bpl.n	80017de <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017c6:	f06f 0202 	mvn.w	r2, #2
 80017ca:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017cc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ce:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d2:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d4:	d077      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	f000 fc13 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	2300      	movs	r3, #0
 80017dc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	0750      	lsls	r0, r2, #29
 80017e4:	d510      	bpl.n	8001808 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	0751      	lsls	r1, r2, #29
 80017ea:	d50d      	bpl.n	8001808 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017ec:	f06f 0204 	mvn.w	r2, #4
 80017f0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017fa:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80017fc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fe:	d068      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001800:	f000 fbfe 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001804:	2300      	movs	r3, #0
 8001806:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	0712      	lsls	r2, r2, #28
 800180e:	d50f      	bpl.n	8001830 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	0710      	lsls	r0, r2, #28
 8001814:	d50c      	bpl.n	8001830 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001816:	f06f 0208 	mvn.w	r2, #8
 800181a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800181c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800181e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001820:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001822:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001824:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001826:	d05a      	beq.n	80018de <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001828:	f000 fbea 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182c:	2300      	movs	r3, #0
 800182e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	06d2      	lsls	r2, r2, #27
 8001836:	d510      	bpl.n	800185a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	06d0      	lsls	r0, r2, #27
 800183c:	d50d      	bpl.n	800185a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800183e:	f06f 0210 	mvn.w	r2, #16
 8001842:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001844:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001846:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001848:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800184e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001850:	d04b      	beq.n	80018ea <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	f000 fbd5 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001856:	2300      	movs	r3, #0
 8001858:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	07d1      	lsls	r1, r2, #31
 8001860:	d508      	bpl.n	8001874 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	07d2      	lsls	r2, r2, #31
 8001866:	d505      	bpl.n	8001874 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001868:	f06f 0201 	mvn.w	r2, #1
 800186c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800186e:	4620      	mov	r0, r4
 8001870:	f000 fc60 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	0610      	lsls	r0, r2, #24
 800187a:	d508      	bpl.n	800188e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	0611      	lsls	r1, r2, #24
 8001880:	d505      	bpl.n	800188e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001882:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001886:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001888:	4620      	mov	r0, r4
 800188a:	f000 f9ea 	bl	8001c62 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	0652      	lsls	r2, r2, #25
 8001894:	d508      	bpl.n	80018a8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	0650      	lsls	r0, r2, #25
 800189a:	d505      	bpl.n	80018a8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800189c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ff85 	bl	80017b2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	0691      	lsls	r1, r2, #26
 80018ae:	d522      	bpl.n	80018f6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	0692      	lsls	r2, r2, #26
 80018b4:	d51f      	bpl.n	80018f6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018bc:	611a      	str	r2, [r3, #16]
}
 80018be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018c2:	f000 b9cd 	b.w	8001c60 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	f7ff ff72 	bl	80017ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ff70 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80018d0:	e783      	b.n	80017da <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	f7ff ff6c 	bl	80017ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff6a 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80018dc:	e792      	b.n	8001804 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018de:	f7ff ff66 	bl	80017ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff ff64 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80018e8:	e7a0      	b.n	800182c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ea:	f7ff ff60 	bl	80017ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff ff5e 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80018f4:	e7af      	b.n	8001856 <HAL_TIM_IRQHandler+0xa2>
 80018f6:	bd10      	pop	{r4, pc}

080018f8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80018f8:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80018fa:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80018fc:	4290      	cmp	r0, r2
 80018fe:	d012      	beq.n	8001926 <TIM_Base_SetConfig+0x2e>
 8001900:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001904:	d00f      	beq.n	8001926 <TIM_Base_SetConfig+0x2e>
 8001906:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800190a:	4290      	cmp	r0, r2
 800190c:	d00b      	beq.n	8001926 <TIM_Base_SetConfig+0x2e>
 800190e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001912:	4290      	cmp	r0, r2
 8001914:	d007      	beq.n	8001926 <TIM_Base_SetConfig+0x2e>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d003      	beq.n	8001926 <TIM_Base_SetConfig+0x2e>
 800191e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001922:	4290      	cmp	r0, r2
 8001924:	d11d      	bne.n	8001962 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001926:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800192c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <TIM_Base_SetConfig+0xbc>)
 8001930:	4290      	cmp	r0, r2
 8001932:	d104      	bne.n	800193e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001934:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193a:	4313      	orrs	r3, r2
 800193c:	e028      	b.n	8001990 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800193e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001942:	d0f7      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001944:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <TIM_Base_SetConfig+0xc0>)
 8001946:	4290      	cmp	r0, r2
 8001948:	d0f4      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 800194a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194e:	4290      	cmp	r0, r2
 8001950:	d0f0      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001956:	4290      	cmp	r0, r2
 8001958:	d0ec      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 800195a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800195e:	4290      	cmp	r0, r2
 8001960:	d0e8      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <TIM_Base_SetConfig+0xc4>)
 8001964:	4290      	cmp	r0, r2
 8001966:	d0e5      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196c:	4290      	cmp	r0, r2
 800196e:	d0e1      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001974:	4290      	cmp	r0, r2
 8001976:	d0dd      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001978:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800197c:	4290      	cmp	r0, r2
 800197e:	d0d9      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001984:	4290      	cmp	r0, r2
 8001986:	d0d5      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
 8001988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198c:	4290      	cmp	r0, r2
 800198e:	d0d1      	beq.n	8001934 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001990:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001992:	688b      	ldr	r3, [r1, #8]
 8001994:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001996:	680b      	ldr	r3, [r1, #0]
 8001998:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <TIM_Base_SetConfig+0xbc>)
 800199c:	4298      	cmp	r0, r3
 800199e:	d006      	beq.n	80019ae <TIM_Base_SetConfig+0xb6>
 80019a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d002      	beq.n	80019ae <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80019a8:	2301      	movs	r3, #1
 80019aa:	6143      	str	r3, [r0, #20]
}
 80019ac:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80019ae:	690b      	ldr	r3, [r1, #16]
 80019b0:	6303      	str	r3, [r0, #48]	; 0x30
 80019b2:	e7f9      	b.n	80019a8 <TIM_Base_SetConfig+0xb0>
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40014000 	.word	0x40014000

080019c0 <HAL_TIM_Base_Init>:
{ 
 80019c0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019c2:	4604      	mov	r4, r0
 80019c4:	b1a0      	cbz	r0, 80019f0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ce:	b91b      	cbnz	r3, 80019d8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80019d4:	f000 fd9a 	bl	800250c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019de:	6820      	ldr	r0, [r4, #0]
 80019e0:	1d21      	adds	r1, r4, #4
 80019e2:	f7ff ff89 	bl	80018f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80019ec:	2000      	movs	r0, #0
 80019ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
}
 80019f2:	bd10      	pop	{r4, pc}

080019f4 <HAL_TIM_IC_Init>:
{
 80019f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019f6:	4604      	mov	r4, r0
 80019f8:	b1a0      	cbz	r0, 8001a24 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a02:	b91b      	cbnz	r3, 8001a0c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8001a08:	f000 fdb6 	bl	8002578 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	1d21      	adds	r1, r4, #4
 8001a16:	f7ff ff6f 	bl	80018f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <TIM_TI1_SetConfig>:
{
 8001a28:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a2a:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a2c:	4e1a      	ldr	r6, [pc, #104]	; (8001a98 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a2e:	f024 0401 	bic.w	r4, r4, #1
 8001a32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a34:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001a36:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001a38:	42b0      	cmp	r0, r6
 8001a3a:	f024 0403 	bic.w	r4, r4, #3
 8001a3e:	d01a      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a44:	d017      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a46:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001a4a:	42b0      	cmp	r0, r6
 8001a4c:	d013      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a52:	42b0      	cmp	r0, r6
 8001a54:	d00f      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a5a:	42b0      	cmp	r0, r6
 8001a5c:	d00b      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a5e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001a62:	42b0      	cmp	r0, r6
 8001a64:	d007      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a66:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001a6a:	42b0      	cmp	r0, r6
 8001a6c:	d003      	beq.n	8001a76 <TIM_TI1_SetConfig+0x4e>
 8001a6e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001a72:	42b0      	cmp	r0, r6
 8001a74:	d10d      	bne.n	8001a92 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8001a76:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a78:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a7e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a80:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a84:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001a88:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001a8a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001a8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a8e:	6201      	str	r1, [r0, #32]
}
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001a92:	f044 0201 	orr.w	r2, r4, #1
 8001a96:	e7ef      	b.n	8001a78 <TIM_TI1_SetConfig+0x50>
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_TIM_IC_ConfigChannel>:
{
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001a9e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001aa2:	2b01      	cmp	r3, #1
{
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	460d      	mov	r5, r1
 8001aa8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001aac:	d019      	beq.n	8001ae2 <HAL_TIM_IC_ConfigChannel+0x46>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001ab8:	b9a2      	cbnz	r2, 8001ae4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001aba:	68cb      	ldr	r3, [r1, #12]
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	c906      	ldmia	r1, {r1, r2}
 8001ac0:	f7ff ffb2 	bl	8001a28 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ac4:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ac6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	f022 020c 	bic.w	r2, r2, #12
 8001ace:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ad6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ad8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ada:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001ade:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001ae4:	2a04      	cmp	r2, #4
 8001ae6:	688e      	ldr	r6, [r1, #8]
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	68e8      	ldr	r0, [r5, #12]
 8001aec:	c982      	ldmia	r1, {r1, r7}
 8001aee:	d11f      	bne.n	8001b30 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	f022 0210 	bic.w	r2, r2, #16
 8001af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001af8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001afa:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001afc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001b00:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b04:	0300      	lsls	r0, r0, #12
 8001b06:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b08:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b0c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001b0e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b10:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b14:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001b18:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b1c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b24:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001b2c:	619e      	str	r6, [r3, #24]
 8001b2e:	e7d2      	b.n	8001ad6 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001b30:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b32:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001b34:	d11c      	bne.n	8001b70 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001b3c:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001b3e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001b40:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001b44:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b46:	0100      	lsls	r0, r0, #4
 8001b48:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001b4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b4e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001b50:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b52:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001b56:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001b5a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001b5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001b5e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	f022 020c 	bic.w	r2, r2, #12
 8001b66:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b6c:	61de      	str	r6, [r3, #28]
 8001b6e:	e7b2      	b.n	8001ad6 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001b76:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001b78:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001b7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001b7e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b82:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001b84:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b88:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b8a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001b8c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b8e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001b92:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001b96:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001b98:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001b9a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ba2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001baa:	e7df      	b.n	8001b6c <HAL_TIM_IC_ConfigChannel+0xd0>

08001bac <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001bac:	6a03      	ldr	r3, [r0, #32]
{
 8001bae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001bb0:	2401      	movs	r4, #1
 8001bb2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001bb4:	ea23 0304 	bic.w	r3, r3, r4
 8001bb8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001bba:	6a03      	ldr	r3, [r0, #32]
 8001bbc:	408a      	lsls	r2, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	6202      	str	r2, [r0, #32]
 8001bc2:	bd10      	pop	{r4, pc}

08001bc4 <HAL_TIM_IC_Start_IT>:
{
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	4604      	mov	r4, r0
  switch (Channel)
 8001bc8:	290c      	cmp	r1, #12
 8001bca:	d80d      	bhi.n	8001be8 <HAL_TIM_IC_Start_IT+0x24>
 8001bcc:	e8df f001 	tbb	[pc, r1]
 8001bd0:	0c0c0c07 	.word	0x0c0c0c07
 8001bd4:	0c0c0c17 	.word	0x0c0c0c17
 8001bd8:	0c0c0c1c 	.word	0x0c0c0c1c
 8001bdc:	21          	.byte	0x21
 8001bdd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bde:	6802      	ldr	r2, [r0, #0]
 8001be0:	68d3      	ldr	r3, [r2, #12]
 8001be2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001be6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f7ff ffde 	bl	8001bac <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001bf0:	6822      	ldr	r2, [r4, #0]
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]
} 
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bfe:	6802      	ldr	r2, [r0, #0]
 8001c00:	68d3      	ldr	r3, [r2, #12]
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	e7ee      	b.n	8001be6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c08:	6802      	ldr	r2, [r0, #0]
 8001c0a:	68d3      	ldr	r3, [r2, #12]
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	e7e9      	b.n	8001be6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	68d3      	ldr	r3, [r2, #12]
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	e7e4      	b.n	8001be6 <HAL_TIM_IC_Start_IT+0x22>

08001c1c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001c1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c20:	2b01      	cmp	r3, #1
{
 8001c22:	b510      	push	{r4, lr}
 8001c24:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001c28:	d018      	beq.n	8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c2e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c30:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c32:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c34:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c3a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4322      	orrs	r2, r4
 8001c40:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c48:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001c56:	2300      	movs	r3, #0
 8001c58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001c5c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001c5e:	bd10      	pop	{r4, pc}

08001c60 <HAL_TIMEx_CommutationCallback>:
 8001c60:	4770      	bx	lr

08001c62 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c62:	4770      	bx	lr

08001c64 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c68:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c6a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001c6c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c6e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c74:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001c76:	6133      	str	r3, [r6, #16]
{
 8001c78:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c7a:	6883      	ldr	r3, [r0, #8]
 8001c7c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001c7e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c80:	4303      	orrs	r3, r0
 8001c82:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c84:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c88:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c8a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001c92:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001c94:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c96:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001c9c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c9e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ca2:	6173      	str	r3, [r6, #20]
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ca6:	d17c      	bne.n	8001da2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ca8:	429e      	cmp	r6, r3
 8001caa:	d003      	beq.n	8001cb4 <UART_SetConfig+0x50>
 8001cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb0:	429e      	cmp	r6, r3
 8001cb2:	d144      	bne.n	8001d3e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cb4:	f7ff fb0e 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001cb8:	2519      	movs	r5, #25
 8001cba:	fb05 f300 	mul.w	r3, r5, r0
 8001cbe:	6860      	ldr	r0, [r4, #4]
 8001cc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cc4:	0040      	lsls	r0, r0, #1
 8001cc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001cd2:	f7ff faff 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	4368      	muls	r0, r5
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ce0:	f7ff faf8 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	4368      	muls	r0, r5
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cf2:	fb09 7313 	mls	r3, r9, r3, r7
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	3332      	adds	r3, #50	; 0x32
 8001cfa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001d04:	f7ff fae6 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001d08:	6862      	ldr	r2, [r4, #4]
 8001d0a:	4368      	muls	r0, r5
 8001d0c:	0052      	lsls	r2, r2, #1
 8001d0e:	fbb0 faf2 	udiv	sl, r0, r2
 8001d12:	f7ff fadf 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d16:	6863      	ldr	r3, [r4, #4]
 8001d18:	4368      	muls	r0, r5
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d20:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d24:	fb09 a313 	mls	r3, r9, r3, sl
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	3332      	adds	r3, #50	; 0x32
 8001d2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d36:	443b      	add	r3, r7
 8001d38:	60b3      	str	r3, [r6, #8]
 8001d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d3e:	f7ff fab9 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001d42:	2519      	movs	r5, #25
 8001d44:	fb05 f300 	mul.w	r3, r5, r0
 8001d48:	6860      	ldr	r0, [r4, #4]
 8001d4a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d4e:	0040      	lsls	r0, r0, #1
 8001d50:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d5c:	f7ff faaa 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001d60:	6863      	ldr	r3, [r4, #4]
 8001d62:	4368      	muls	r0, r5
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d6a:	f7ff faa3 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001d6e:	6863      	ldr	r3, [r4, #4]
 8001d70:	4368      	muls	r0, r5
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d7c:	fb09 7313 	mls	r3, r9, r3, r7
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	3332      	adds	r3, #50	; 0x32
 8001d84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001d8e:	f7ff fa91 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001d92:	6862      	ldr	r2, [r4, #4]
 8001d94:	4368      	muls	r0, r5
 8001d96:	0052      	lsls	r2, r2, #1
 8001d98:	fbb0 faf2 	udiv	sl, r0, r2
 8001d9c:	f7ff fa8a 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001da0:	e7b9      	b.n	8001d16 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001da2:	429e      	cmp	r6, r3
 8001da4:	d002      	beq.n	8001dac <UART_SetConfig+0x148>
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <UART_SetConfig+0x230>)
 8001da8:	429e      	cmp	r6, r3
 8001daa:	d140      	bne.n	8001e2e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001dac:	f7ff fa92 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001db0:	6867      	ldr	r7, [r4, #4]
 8001db2:	2519      	movs	r5, #25
 8001db4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001db8:	fb05 f300 	mul.w	r3, r5, r0
 8001dbc:	00bf      	lsls	r7, r7, #2
 8001dbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001dc2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dc6:	011f      	lsls	r7, r3, #4
 8001dc8:	f7ff fa84 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	6863      	ldr	r3, [r4, #4]
 8001dce:	4368      	muls	r0, r5
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	fbb0 f8f3 	udiv	r8, r0, r3
 8001dd6:	f7ff fa7d 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001dda:	6863      	ldr	r3, [r4, #4]
 8001ddc:	4368      	muls	r0, r5
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001de8:	fb09 8313 	mls	r3, r9, r3, r8
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	3332      	adds	r3, #50	; 0x32
 8001df0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001df4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001df8:	f7ff fa6c 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8001dfc:	6862      	ldr	r2, [r4, #4]
 8001dfe:	4368      	muls	r0, r5
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	fbb0 faf2 	udiv	sl, r0, r2
 8001e06:	f7ff fa65 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e0a:	6863      	ldr	r3, [r4, #4]
 8001e0c:	4368      	muls	r0, r5
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e14:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e18:	fb09 a313 	mls	r3, r9, r3, sl
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	3332      	adds	r3, #50	; 0x32
 8001e20:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	ea43 0308 	orr.w	r3, r3, r8
 8001e2c:	e783      	b.n	8001d36 <UART_SetConfig+0xd2>
 8001e2e:	f7ff fa41 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e32:	6867      	ldr	r7, [r4, #4]
 8001e34:	2519      	movs	r5, #25
 8001e36:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e3a:	fb05 f300 	mul.w	r3, r5, r0
 8001e3e:	00bf      	lsls	r7, r7, #2
 8001e40:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e44:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e48:	011f      	lsls	r7, r3, #4
 8001e4a:	f7ff fa33 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e4e:	6863      	ldr	r3, [r4, #4]
 8001e50:	4368      	muls	r0, r5
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fbb0 f8f3 	udiv	r8, r0, r3
 8001e58:	f7ff fa2c 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	4368      	muls	r0, r5
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e6a:	fb09 8313 	mls	r3, r9, r3, r8
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	3332      	adds	r3, #50	; 0x32
 8001e72:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e76:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001e7a:	f7ff fa1b 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6862      	ldr	r2, [r4, #4]
 8001e80:	4368      	muls	r0, r5
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	fbb0 faf2 	udiv	sl, r0, r2
 8001e88:	f7ff fa14 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e8c:	e7bd      	b.n	8001e0a <UART_SetConfig+0x1a6>
 8001e8e:	bf00      	nop
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400

08001e98 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	460e      	mov	r6, r1
 8001e9e:	4617      	mov	r7, r2
 8001ea0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001ea2:	6821      	ldr	r1, [r4, #0]
 8001ea4:	680b      	ldr	r3, [r1, #0]
 8001ea6:	ea36 0303 	bics.w	r3, r6, r3
 8001eaa:	d101      	bne.n	8001eb0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
}
 8001eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001eb0:	1c6b      	adds	r3, r5, #1
 8001eb2:	d0f7      	beq.n	8001ea4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001eb4:	b995      	cbnz	r5, 8001edc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ebe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ece:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001ed8:	2003      	movs	r0, #3
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001edc:	f7fe ffa4 	bl	8000e28 <HAL_GetTick>
 8001ee0:	1bc0      	subs	r0, r0, r7
 8001ee2:	4285      	cmp	r5, r0
 8001ee4:	d2dd      	bcs.n	8001ea2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001ee6:	e7e6      	b.n	8001eb6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001ee8 <HAL_UART_Init>:
{
 8001ee8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001eea:	4604      	mov	r4, r0
 8001eec:	b340      	cbz	r0, 8001f40 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001eee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ef2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ef6:	b91b      	cbnz	r3, 8001f00 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ef8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001efc:	f000 fb8c 	bl	8002618 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f00:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f02:	2324      	movs	r3, #36	; 0x24
 8001f04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f08:	68d3      	ldr	r3, [r2, #12]
 8001f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f0e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff fea7 	bl	8001c64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f26:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001f32:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f34:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
}
 8001f42:	bd10      	pop	{r4, pc}

08001f44 <HAL_UART_Transmit>:
{
 8001f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f48:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001f4a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f4e:	2b20      	cmp	r3, #32
{
 8001f50:	4604      	mov	r4, r0
 8001f52:	460d      	mov	r5, r1
 8001f54:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001f56:	d14f      	bne.n	8001ff8 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	d04a      	beq.n	8001ff2 <HAL_UART_Transmit+0xae>
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d048      	beq.n	8001ff2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001f60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d047      	beq.n	8001ff8 <HAL_UART_Transmit+0xb4>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f72:	2321      	movs	r3, #33	; 0x21
 8001f74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001f78:	f7fe ff56 	bl	8000e28 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001f7c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001f80:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001f82:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001f86:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	b96b      	cbnz	r3, 8001fa8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4632      	mov	r2, r6
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ff80 	bl	8001e98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f98:	b9b0      	cbnz	r0, 8001fc8 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001fa0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001fa8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fb0:	68a3      	ldr	r3, [r4, #8]
 8001fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb6:	4632      	mov	r2, r6
 8001fb8:	463b      	mov	r3, r7
 8001fba:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001fbe:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc2:	f7ff ff69 	bl	8001e98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001fc6:	b110      	cbz	r0, 8001fce <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001fc8:	2003      	movs	r0, #3
 8001fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fce:	882b      	ldrh	r3, [r5, #0]
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001fd8:	6923      	ldr	r3, [r4, #16]
 8001fda:	b943      	cbnz	r3, 8001fee <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001fdc:	3502      	adds	r5, #2
 8001fde:	e7d2      	b.n	8001f86 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe0:	f7ff ff5a 	bl	8001e98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d1ef      	bne.n	8001fc8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	782a      	ldrb	r2, [r5, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	3501      	adds	r5, #1
 8001ff0:	e7c9      	b.n	8001f86 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001ff8:	2002      	movs	r0, #2
}
 8001ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002000 <HAL_TIM_IC_CaptureCallback>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002000:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim->Instance==TIM2){
 8002002:	6803      	ldr	r3, [r0, #0]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002008:	b087      	sub	sp, #28
 800200a:	4604      	mov	r4, r0
	if(htim->Instance==TIM2){
 800200c:	d10a      	bne.n	8002024 <HAL_TIM_IC_CaptureCallback+0x24>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)==1){
 800200e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002012:	483d      	ldr	r0, [pc, #244]	; (8002108 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002014:	f7ff f874 	bl	8001100 <HAL_GPIO_ReadPin>
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800201a:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800201c:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)==1){
 800201e:	d111      	bne.n	8002044 <HAL_TIM_IC_CaptureCallback+0x44>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
			sprintf(tosend,"A-%d.%02d\r\n",integer,point);
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
			HAL_TIM_Base_Start_IT(&htim1);
		}
	}
	if(htim->Instance==TIM5){
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d109      	bne.n	8002040 <HAL_TIM_IC_CaptureCallback+0x40>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){
 800202c:	2102      	movs	r1, #2
 800202e:	4836      	ldr	r0, [pc, #216]	; (8002108 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002030:	f7ff f866 	bl	8001100 <HAL_GPIO_ReadPin>
 8002034:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_TIM_IC_CaptureCallback+0x114>)
 8002036:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim5,0);
 8002038:	681b      	ldr	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1){
 800203a:	d134      	bne.n	80020a6 <HAL_TIM_IC_CaptureCallback+0xa6>
			__HAL_TIM_SET_COUNTER(&htim5,0);
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
			HAL_TIM_Base_Start_IT(&htim3);
		}
	}

}
 8002040:	b007      	add	sp, #28
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8002044:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double distance=cnt/(double)58;
 8002046:	f7fe fa7d 	bl	8000544 <__aeabi_i2d>
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_TIM_IC_CaptureCallback+0x118>)
 800204c:	2200      	movs	r2, #0
 800204e:	f7fe fc09 	bl	8000864 <__aeabi_ddiv>
 8002052:	460f      	mov	r7, r1
 8002054:	4606      	mov	r6, r0
			int integer=(int)distance;
 8002056:	f7fe fced 	bl	8000a34 <__aeabi_d2iz>
			char tosend[20]={0};
 800205a:	2214      	movs	r2, #20
			int integer=(int)distance;
 800205c:	4605      	mov	r5, r0
			char tosend[20]={0};
 800205e:	2100      	movs	r1, #0
 8002060:	a801      	add	r0, sp, #4
 8002062:	f000 fb9f 	bl	80027a4 <memset>
			int point=(int)((distance-integer)*100);
 8002066:	4628      	mov	r0, r5
 8002068:	f7fe fa6c 	bl	8000544 <__aeabi_i2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4630      	mov	r0, r6
 8002072:	4639      	mov	r1, r7
 8002074:	f7fe f918 	bl	80002a8 <__aeabi_dsub>
 8002078:	2200      	movs	r2, #0
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800207c:	f7fe fac8 	bl	8000610 <__aeabi_dmul>
 8002080:	f7fe fcd8 	bl	8000a34 <__aeabi_d2iz>
			sprintf(tosend,"A-%d.%02d\r\n",integer,point);
 8002084:	462a      	mov	r2, r5
 8002086:	4603      	mov	r3, r0
 8002088:	4925      	ldr	r1, [pc, #148]	; (8002120 <HAL_TIM_IC_CaptureCallback+0x120>)
 800208a:	a801      	add	r0, sp, #4
 800208c:	f000 fb92 	bl	80027b4 <siprintf>
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
 8002090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002094:	2214      	movs	r2, #20
 8002096:	a901      	add	r1, sp, #4
 8002098:	4822      	ldr	r0, [pc, #136]	; (8002124 <HAL_TIM_IC_CaptureCallback+0x124>)
 800209a:	f7ff ff53 	bl	8001f44 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim1);
 800209e:	4822      	ldr	r0, [pc, #136]	; (8002128 <HAL_TIM_IC_CaptureCallback+0x128>)
 80020a0:	f7ff faac 	bl	80015fc <HAL_TIM_Base_Start_IT>
 80020a4:	e7be      	b.n	8002024 <HAL_TIM_IC_CaptureCallback+0x24>
			int cnt=__HAL_TIM_GET_COUNTER(&htim5);
 80020a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
			double distance=cnt/(double)58;
 80020a8:	f7fe fa4c 	bl	8000544 <__aeabi_i2d>
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_TIM_IC_CaptureCallback+0x118>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f7fe fbd8 	bl	8000864 <__aeabi_ddiv>
 80020b4:	460f      	mov	r7, r1
 80020b6:	4606      	mov	r6, r0
			int integer=(int)distance;
 80020b8:	f7fe fcbc 	bl	8000a34 <__aeabi_d2iz>
			char tosend[20]={0};
 80020bc:	2214      	movs	r2, #20
			int integer=(int)distance;
 80020be:	4604      	mov	r4, r0
			char tosend[20]={0};
 80020c0:	2100      	movs	r1, #0
 80020c2:	a801      	add	r0, sp, #4
 80020c4:	f000 fb6e 	bl	80027a4 <memset>
			int point=(int)((distance-integer)*100);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7fe fa3b 	bl	8000544 <__aeabi_i2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4630      	mov	r0, r6
 80020d4:	4639      	mov	r1, r7
 80020d6:	f7fe f8e7 	bl	80002a8 <__aeabi_dsub>
 80020da:	2200      	movs	r2, #0
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80020de:	f7fe fa97 	bl	8000610 <__aeabi_dmul>
 80020e2:	f7fe fca7 	bl	8000a34 <__aeabi_d2iz>
			sprintf(tosend,"B-%d.%02d\r\n",integer,point);
 80020e6:	4622      	mov	r2, r4
 80020e8:	4603      	mov	r3, r0
 80020ea:	4910      	ldr	r1, [pc, #64]	; (800212c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80020ec:	a801      	add	r0, sp, #4
 80020ee:	f000 fb61 	bl	80027b4 <siprintf>
			HAL_UART_Transmit(&huart3,tosend,sizeof(tosend),0xffff);
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f6:	2214      	movs	r2, #20
 80020f8:	a901      	add	r1, sp, #4
 80020fa:	480a      	ldr	r0, [pc, #40]	; (8002124 <HAL_TIM_IC_CaptureCallback+0x124>)
 80020fc:	f7ff ff22 	bl	8001f44 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim3);
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002102:	f7ff fa7b 	bl	80015fc <HAL_TIM_Base_Start_IT>
}
 8002106:	e79b      	b.n	8002040 <HAL_TIM_IC_CaptureCallback+0x40>
 8002108:	40020000 	.word	0x40020000
 800210c:	20000198 	.word	0x20000198
 8002110:	40000c00 	.word	0x40000c00
 8002114:	200000e4 	.word	0x200000e4
 8002118:	404d0000 	.word	0x404d0000
 800211c:	40590000 	.word	0x40590000
 8002120:	08003024 	.word	0x08003024
 8002124:	200000a4 	.word	0x200000a4
 8002128:	2000015c 	.word	0x2000015c
 800212c:	08003030 	.word	0x08003030
 8002130:	20000120 	.word	0x20000120

08002134 <HAL_TIM_PeriodElapsedCallback>:

int tim1Count=70000;
int tim3Count=70000;
int t3=1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002134:	b538      	push	{r3, r4, r5, lr}
	if(htim->Instance==TIM3){
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800213a:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800213c:	4605      	mov	r5, r0
	if(htim->Instance==TIM3){
 800213e:	d11c      	bne.n	800217a <HAL_TIM_PeriodElapsedCallback+0x46>
		if(tim3Count<70000){
 8002140:	4c28      	ldr	r4, [pc, #160]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	4293      	cmp	r3, r2
 8002148:	dc02      	bgt.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x1c>
			tim3Count++;
 800214a:	3301      	adds	r3, #1
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
				HAL_TIM_Base_Start_IT(&htim3);
			}else{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
				tim3Count=0;
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	e014      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002150:	4826      	ldr	r0, [pc, #152]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002152:	f7ff fa5e 	bl	8001612 <HAL_TIM_Base_Stop_IT>
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	4825      	ldr	r0, [pc, #148]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800215c:	f7fe ffd0 	bl	8001100 <HAL_GPIO_ReadPin>
 8002160:	b9b8      	cbnz	r0, 8002192 <HAL_TIM_PeriodElapsedCallback+0x5e>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8002162:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002166:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002170:	f7fe ffcc 	bl	800110c <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim3);
 8002174:	481d      	ldr	r0, [pc, #116]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002176:	f7ff fa41 	bl	80015fc <HAL_TIM_Base_Start_IT>
			}
		}
	}
	if(htim->Instance==TIM1){
 800217a:	682a      	ldr	r2, [r5, #0]
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800217e:	429a      	cmp	r2, r3
 8002180:	d12c      	bne.n	80021dc <HAL_TIM_PeriodElapsedCallback+0xa8>
		if(tim1Count<70000){
 8002182:	4c1d      	ldr	r4, [pc, #116]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002184:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	4293      	cmp	r3, r2
 800218a:	dc0a      	bgt.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			tim1Count++;
 800218c:	3301      	adds	r3, #1
 800218e:	6023      	str	r3, [r4, #0]
 8002190:	bd38      	pop	{r3, r4, r5, pc}
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8002192:	2200      	movs	r2, #0
 8002194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002198:	4815      	ldr	r0, [pc, #84]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800219a:	f7fe ffb7 	bl	800110c <HAL_GPIO_WritePin>
				tim3Count=0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e7d4      	b.n	800214c <HAL_TIM_PeriodElapsedCallback+0x18>
		}else{
			HAL_TIM_Base_Stop_IT(&htim1);
 80021a2:	4816      	ldr	r0, [pc, #88]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80021a4:	f7ff fa35 	bl	8001612 <HAL_TIM_Base_Stop_IT>
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)==0){
 80021a8:	2120      	movs	r1, #32
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80021ac:	f7fe ffa8 	bl	8001100 <HAL_GPIO_ReadPin>
 80021b0:	b960      	cbnz	r0, 80021cc <HAL_TIM_PeriodElapsedCallback+0x98>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
 80021b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021b6:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 80021ba:	2201      	movs	r2, #1
 80021bc:	2120      	movs	r1, #32
 80021be:	f7fe ffa5 	bl	800110c <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim1);
 80021c2:	480e      	ldr	r0, [pc, #56]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
			}
		}
	}

}
 80021c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim1);
 80021c8:	f7ff ba18 	b.w	80015fc <HAL_TIM_Base_Start_IT>
				tim1Count=0;
 80021cc:	2200      	movs	r2, #0
 80021ce:	6022      	str	r2, [r4, #0]
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 80021d0:	2120      	movs	r1, #32
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
}
 80021d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 80021d8:	f7fe bf98 	b.w	800110c <HAL_GPIO_WritePin>
 80021dc:	bd38      	pop	{r3, r4, r5, pc}
 80021de:	bf00      	nop
 80021e0:	40000400 	.word	0x40000400
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	0001116f 	.word	0x0001116f
 80021ec:	20000120 	.word	0x20000120
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40010000 	.word	0x40010000
 80021f8:	20000008 	.word	0x20000008
 80021fc:	2000015c 	.word	0x2000015c

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b510      	push	{r4, lr}
 8002202:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	2200      	movs	r2, #0
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <SystemClock_Config+0x90>)
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800220c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002210:	6419      	str	r1, [r3, #64]	; 0x40
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002214:	491f      	ldr	r1, [pc, #124]	; (8002294 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800221e:	9201      	str	r2, [sp, #4]
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	680b      	ldr	r3, [r1, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800222e:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002238:	2302      	movs	r3, #2
 800223a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	2301      	movs	r3, #1
 800223e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002242:	2310      	movs	r3, #16
 8002244:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002246:	f7ff f855 	bl	80012f4 <HAL_RCC_OscConfig>
 800224a:	4601      	mov	r1, r0
 800224c:	b100      	cbz	r0, 8002250 <SystemClock_Config+0x50>
 800224e:	e7fe      	b.n	800224e <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002250:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002252:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002256:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002258:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800225a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225c:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800225e:	f7fe ff89 	bl	8001174 <HAL_RCC_ClockConfig>
 8002262:	4604      	mov	r4, r0
 8002264:	b100      	cbz	r0, 8002268 <SystemClock_Config+0x68>
 8002266:	e7fe      	b.n	8002266 <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002268:	f7ff f81e 	bl	80012a8 <HAL_RCC_GetHCLKFreq>
 800226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002270:	fbb0 f0f3 	udiv	r0, r0, r3
 8002274:	f7fe fe30 	bl	8000ed8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002278:	2004      	movs	r0, #4
 800227a:	f7fe fe43 	bl	8000f04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800227e:	4622      	mov	r2, r4
 8002280:	4621      	mov	r1, r4
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f7fe fde7 	bl	8000e58 <HAL_NVIC_SetPriority>
}
 800228a:	b014      	add	sp, #80	; 0x50
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000

08002298 <main>:
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	2400      	movs	r4, #0
  HAL_Init();
 800229e:	f7fe fd9d 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 80022a2:	f7ff ffad 	bl	8002200 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b74      	ldr	r3, [pc, #464]	; (8002478 <main+0x1e0>)
 80022a8:	9401      	str	r4, [sp, #4]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 80022ac:	4873      	ldr	r0, [pc, #460]	; (800247c <main+0x1e4>)
  htim1.Instance = TIM1;
 80022ae:	4d74      	ldr	r5, [pc, #464]	; (8002480 <main+0x1e8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b0:	f042 0202 	orr.w	r2, r2, #2
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	f002 0202 	and.w	r2, r2, #2
 80022bc:	9201      	str	r2, [sp, #4]
 80022be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	9402      	str	r4, [sp, #8]
 80022c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 80022d0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 80022d4:	f244 0120 	movw	r1, #16416	; 0x4020
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 80022da:	f7fe ff17 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	4864      	ldr	r0, [pc, #400]	; (800247c <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pins : PB5 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f7fe fe17 	bl	8000f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_14;
 80022fa:	f244 0320 	movw	r3, #16416	; 0x4020
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	485f      	ldr	r0, [pc, #380]	; (800247c <main+0x1e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_14;
 8002300:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f7fe fe0c 	bl	8000f28 <HAL_GPIO_Init>
  htim1.Init.Prescaler = 15;
 8002310:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <main+0x1ec>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 15;
 8002314:	270f      	movs	r7, #15
  htim1.Init.Period = 10;
 8002316:	260a      	movs	r6, #10
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002318:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 15;
 800231a:	e885 0088 	stmia.w	r5, {r3, r7}
  htim1.Init.Period = 10;
 800231e:	60ee      	str	r6, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002322:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002324:	f7ff fb4c 	bl	80019c0 <HAL_TIM_Base_Init>
 8002328:	b100      	cbz	r0, 800232c <main+0x94>
 800232a:	e7fe      	b.n	800232a <main+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002330:	a905      	add	r1, sp, #20
 8002332:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002338:	f7ff f980 	bl	800163c <HAL_TIM_ConfigClockSource>
 800233c:	b100      	cbz	r0, 8002340 <main+0xa8>
 800233e:	e7fe      	b.n	800233e <main+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002342:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002344:	a903      	add	r1, sp, #12
 8002346:	4628      	mov	r0, r5
 8002348:	f7ff fc68 	bl	8001c1c <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	b100      	cbz	r0, 8002350 <main+0xb8>
 800234e:	e7fe      	b.n	800234e <main+0xb6>
  htim2.Instance = TIM2;
 8002350:	4c4d      	ldr	r4, [pc, #308]	; (8002488 <main+0x1f0>)
 8002352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 15;
 8002356:	e884 0088 	stmia.w	r4, {r3, r7}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 0xffffffff;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002360:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002362:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffffffff;
 8002364:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002366:	f7ff fb45 	bl	80019f4 <HAL_TIM_IC_Init>
 800236a:	b100      	cbz	r0, 800236e <main+0xd6>
 800236c:	e7fe      	b.n	800236c <main+0xd4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002372:	a903      	add	r1, sp, #12
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff fc51 	bl	8001c1c <HAL_TIMEx_MasterConfigSynchronization>
 800237a:	4602      	mov	r2, r0
 800237c:	b100      	cbz	r0, 8002380 <main+0xe8>
 800237e:	e7fe      	b.n	800237e <main+0xe6>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002380:	9007      	str	r0, [sp, #28]
  sConfigIC.ICFilter = 0;
 8002382:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002384:	a905      	add	r1, sp, #20
 8002386:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002388:	9605      	str	r6, [sp, #20]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800238a:	f8cd 9018 	str.w	r9, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800238e:	f7ff fb85 	bl	8001a9c <HAL_TIM_IC_ConfigChannel>
 8002392:	b100      	cbz	r0, 8002396 <main+0xfe>
 8002394:	e7fe      	b.n	8002394 <main+0xfc>
  huart3.Instance = USART3;
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <main+0x1f4>)
  huart3.Init.BaudRate = 115200;
 8002398:	4a3d      	ldr	r2, [pc, #244]	; (8002490 <main+0x1f8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	6098      	str	r0, [r3, #8]
  huart3.Init.BaudRate = 115200;
 800239c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80023a0:	e883 4004 	stmia.w	r3, {r2, lr}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023a4:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023a6:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a8:	220c      	movs	r2, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ae:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023b0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b2:	f7ff fd99 	bl	8001ee8 <HAL_UART_Init>
 80023b6:	b100      	cbz	r0, 80023ba <main+0x122>
 80023b8:	e7fe      	b.n	80023b8 <main+0x120>
  htim3.Instance = TIM3;
 80023ba:	4c36      	ldr	r4, [pc, #216]	; (8002494 <main+0x1fc>)
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <main+0x200>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023c2:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 15;
 80023c4:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.Period = 10;
 80023c8:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ca:	f7ff faf9 	bl	80019c0 <HAL_TIM_Base_Init>
 80023ce:	b100      	cbz	r0, 80023d2 <main+0x13a>
 80023d0:	e7fe      	b.n	80023d0 <main+0x138>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d2:	a905      	add	r1, sp, #20
 80023d4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d6:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023da:	f7ff f92f 	bl	800163c <HAL_TIM_ConfigClockSource>
 80023de:	b100      	cbz	r0, 80023e2 <main+0x14a>
 80023e0:	e7fe      	b.n	80023e0 <main+0x148>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e2:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e4:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023e6:	a903      	add	r1, sp, #12
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fc17 	bl	8001c1c <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	b100      	cbz	r0, 80023f2 <main+0x15a>
 80023f0:	e7fe      	b.n	80023f0 <main+0x158>
  htim5.Instance = TIM5;
 80023f2:	4c2a      	ldr	r4, [pc, #168]	; (800249c <main+0x204>)
  htim5.Init.Prescaler = 15;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <main+0x208>)
 80023f6:	270f      	movs	r7, #15
 80023f8:	e884 0088 	stmia.w	r4, {r3, r7}
  htim5.Init.Period = 0xffffffff;
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	2300      	movs	r3, #0
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002402:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	60a3      	str	r3, [r4, #8]
  htim5.Init.Period = 0xffffffff;
 8002406:	60e2      	str	r2, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002408:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800240a:	f7ff faf3 	bl	80019f4 <HAL_TIM_IC_Init>
 800240e:	b100      	cbz	r0, 8002412 <main+0x17a>
 8002410:	e7fe      	b.n	8002410 <main+0x178>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002412:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002414:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002416:	a903      	add	r1, sp, #12
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff fbff 	bl	8001c1c <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	b100      	cbz	r0, 8002422 <main+0x18a>
 8002420:	e7fe      	b.n	8002420 <main+0x188>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002422:	230a      	movs	r3, #10
 8002424:	9305      	str	r3, [sp, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002426:	9007      	str	r0, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002428:	2301      	movs	r3, #1
  sConfigIC.ICFilter = 0;
 800242a:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800242c:	a905      	add	r1, sp, #20
 800242e:	2204      	movs	r2, #4
 8002430:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002432:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002434:	f7ff fb32 	bl	8001a9c <HAL_TIM_IC_ConfigChannel>
 8002438:	4601      	mov	r1, r0
 800243a:	b100      	cbz	r0, 800243e <main+0x1a6>
 800243c:	e7fe      	b.n	800243c <main+0x1a4>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <main+0x1f0>)
 8002440:	f7ff fbc0 	bl	8001bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8002444:	480e      	ldr	r0, [pc, #56]	; (8002480 <main+0x1e8>)
 8002446:	f7ff f8d9 	bl	80015fc <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart3,"Aok\r\n",5,0xffff);
 800244a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244e:	2205      	movs	r2, #5
 8002450:	4914      	ldr	r1, [pc, #80]	; (80024a4 <main+0x20c>)
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <main+0x1f4>)
 8002454:	f7ff fd76 	bl	8001f44 <HAL_UART_Transmit>
  HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 8002458:	2104      	movs	r1, #4
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fbb2 	bl	8001bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <main+0x1fc>)
 8002462:	f7ff f8cb 	bl	80015fc <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart3,"Bok\r\n",5,0xffff);
 8002466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246a:	2205      	movs	r2, #5
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <main+0x210>)
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <main+0x1f4>)
 8002470:	f7ff fd68 	bl	8001f44 <HAL_UART_Transmit>
 8002474:	e7fe      	b.n	8002474 <main+0x1dc>
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020400 	.word	0x40020400
 8002480:	2000015c 	.word	0x2000015c
 8002484:	40010000 	.word	0x40010000
 8002488:	20000198 	.word	0x20000198
 800248c:	200000a4 	.word	0x200000a4
 8002490:	40004800 	.word	0x40004800
 8002494:	20000120 	.word	0x20000120
 8002498:	40000400 	.word	0x40000400
 800249c:	200000e4 	.word	0x200000e4
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	0800303c 	.word	0x0800303c
 80024a8:	08003042 	.word	0x08003042

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f7fe fcc0 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	4611      	mov	r1, r2
 80024b8:	f06f 000b 	mvn.w	r0, #11
 80024bc:	f7fe fccc 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	4611      	mov	r1, r2
 80024c4:	f06f 000a 	mvn.w	r0, #10
 80024c8:	f7fe fcc6 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	4611      	mov	r1, r2
 80024d0:	f06f 0009 	mvn.w	r0, #9
 80024d4:	f7fe fcc0 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	4611      	mov	r1, r2
 80024dc:	f06f 0004 	mvn.w	r0, #4
 80024e0:	f7fe fcba 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	4611      	mov	r1, r2
 80024e8:	f06f 0003 	mvn.w	r0, #3
 80024ec:	f7fe fcb4 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	4611      	mov	r1, r2
 80024f4:	f06f 0001 	mvn.w	r0, #1
 80024f8:	f7fe fcae 	bl	8000e58 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	4611      	mov	r1, r2
 8002500:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002508:	f7fe bca6 	b.w	8000e58 <HAL_NVIC_SetPriority>

0800250c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800250c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_TIM_Base_MspInit+0x60>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d115      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002516:	2200      	movs	r2, #0
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_TIM_Base_MspInit+0x64>)
 800251a:	9200      	str	r2, [sp, #0]
 800251c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800251e:	f041 0101 	orr.w	r1, r1, #1
 8002522:	6459      	str	r1, [r3, #68]	; 0x44
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	9300      	str	r3, [sp, #0]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800252c:	2019      	movs	r0, #25
 800252e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002530:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002532:	f7fe fc91 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002536:	2019      	movs	r0, #25
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002538:	f7fe fcc2 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800253c:	b003      	add	sp, #12
 800253e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_TIM_Base_MspInit+0x68>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d1f9      	bne.n	800253c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002548:	2200      	movs	r2, #0
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_TIM_Base_MspInit+0x64>)
 800254c:	9201      	str	r2, [sp, #4]
 800254e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002550:	f041 0102 	orr.w	r1, r1, #2
 8002554:	6419      	str	r1, [r3, #64]	; 0x40
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800255e:	201d      	movs	r0, #29
 8002560:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002562:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002564:	f7fe fc78 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002568:	201d      	movs	r0, #29
 800256a:	e7e5      	b.n	8002538 <HAL_TIM_Base_MspInit+0x2c>
 800256c:	40010000 	.word	0x40010000
 8002570:	40023800 	.word	0x40023800
 8002574:	40000400 	.word	0x40000400

08002578 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002578:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM2)
 800257a:	6803      	ldr	r3, [r0, #0]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002580:	b088      	sub	sp, #32
  if(htim_ic->Instance==TIM2)
 8002582:	d123      	bne.n	80025cc <HAL_TIM_IC_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002584:	2400      	movs	r4, #0
 8002586:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800258a:	9401      	str	r4, [sp, #4]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	481f      	ldr	r0, [pc, #124]	; (800260c <HAL_TIM_IC_MspInit+0x94>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	9405      	str	r4, [sp, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025b0:	2301      	movs	r3, #1
 80025b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f7fe fcb8 	bl	8000f28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b8:	201c      	movs	r0, #28
 80025ba:	4622      	mov	r2, r4
 80025bc:	4621      	mov	r1, r4
 80025be:	f7fe fc4b 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c2:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025c4:	f7fe fc7c 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025c8:	b008      	add	sp, #32
 80025ca:	bd10      	pop	{r4, pc}
  else if(htim_ic->Instance==TIM5)
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d1fa      	bne.n	80025c8 <HAL_TIM_IC_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025d2:	2400      	movs	r4, #0
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_TIM_IC_MspInit+0x9c>)
 80025d6:	9402      	str	r4, [sp, #8]
 80025d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	480c      	ldr	r0, [pc, #48]	; (800260c <HAL_TIM_IC_MspInit+0x94>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	9405      	str	r4, [sp, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025f0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f7fe fc95 	bl	8000f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80025fe:	2032      	movs	r0, #50	; 0x32
 8002600:	4622      	mov	r2, r4
 8002602:	4621      	mov	r1, r4
 8002604:	f7fe fc28 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002608:	2032      	movs	r0, #50	; 0x32
 800260a:	e7db      	b.n	80025c4 <HAL_TIM_IC_MspInit+0x4c>
 800260c:	40020000 	.word	0x40020000
 8002610:	40000c00 	.word	0x40000c00
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_UART_MspInit+0x48>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d11a      	bne.n	8002658 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	480f      	ldr	r0, [pc, #60]	; (8002668 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800262a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800263c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002640:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002646:	2301      	movs	r3, #1
 8002648:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002650:	2307      	movs	r3, #7
 8002652:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f7fe fc68 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002658:	b007      	add	sp, #28
 800265a:	f85d fb04 	ldr.w	pc, [sp], #4
 800265e:	bf00      	nop
 8002660:	40004800 	.word	0x40004800
 8002664:	40023800 	.word	0x40023800
 8002668:	40020400 	.word	0x40020400

0800266c <NMI_Handler>:
 800266c:	4770      	bx	lr

0800266e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800266e:	e7fe      	b.n	800266e <HardFault_Handler>

08002670 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002670:	e7fe      	b.n	8002670 <MemManage_Handler>

08002672 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler>

08002674 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002674:	e7fe      	b.n	8002674 <UsageFault_Handler>

08002676 <SVC_Handler>:
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:
 8002678:	4770      	bx	lr

0800267a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800267a:	4770      	bx	lr

0800267c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800267c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267e:	f7fe fbc7 	bl	8000e10 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002686:	f7fe bc4a 	b.w	8000f1e <HAL_SYSTICK_IRQHandler>
	...

0800268c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800268c:	4801      	ldr	r0, [pc, #4]	; (8002694 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800268e:	f7ff b891 	b.w	80017b4 <HAL_TIM_IRQHandler>
 8002692:	bf00      	nop
 8002694:	2000015c 	.word	0x2000015c

08002698 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002698:	4801      	ldr	r0, [pc, #4]	; (80026a0 <TIM2_IRQHandler+0x8>)
 800269a:	f7ff b88b 	b.w	80017b4 <HAL_TIM_IRQHandler>
 800269e:	bf00      	nop
 80026a0:	20000198 	.word	0x20000198

080026a4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026a4:	4801      	ldr	r0, [pc, #4]	; (80026ac <TIM3_IRQHandler+0x8>)
 80026a6:	f7ff b885 	b.w	80017b4 <HAL_TIM_IRQHandler>
 80026aa:	bf00      	nop
 80026ac:	20000120 	.word	0x20000120

080026b0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026b0:	4801      	ldr	r0, [pc, #4]	; (80026b8 <TIM5_IRQHandler+0x8>)
 80026b2:	f7ff b87f 	b.w	80017b4 <HAL_TIM_IRQHandler>
 80026b6:	bf00      	nop
 80026b8:	200000e4 	.word	0x200000e4

080026bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026bc:	490f      	ldr	r1, [pc, #60]	; (80026fc <SystemInit+0x40>)
 80026be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <SystemInit+0x44>)
 80026cc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026ce:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80026d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <SystemInit+0x48>)
 80026e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026f0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026f6:	608b      	str	r3, [r1, #8]
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00
 8002700:	40023800 	.word	0x40023800
 8002704:	24003010 	.word	0x24003010

08002708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800270c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800270e:	e003      	b.n	8002718 <LoopCopyDataInit>

08002710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002716:	3104      	adds	r1, #4

08002718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800271c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800271e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002720:	d3f6      	bcc.n	8002710 <CopyDataInit>
  ldr  r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002724:	e002      	b.n	800272c <LoopFillZerobss>

08002726 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002728:	f842 3b04 	str.w	r3, [r2], #4

0800272c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800272e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002730:	d3f9      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002732:	f7ff ffc3 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f000 f811 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273a:	f7ff fdad 	bl	8002298 <main>
  bx  lr    
 800273e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002740:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002744:	080030a4 	.word	0x080030a4
  ldr  r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800274c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002750:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002754:	200001d8 	.word	0x200001d8

08002758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC_IRQHandler>
	...

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4e0d      	ldr	r6, [pc, #52]	; (8002794 <__libc_init_array+0x38>)
 8002760:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002762:	1ba4      	subs	r4, r4, r6
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	2500      	movs	r5, #0
 8002768:	42a5      	cmp	r5, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	4e0b      	ldr	r6, [pc, #44]	; (800279c <__libc_init_array+0x40>)
 800276e:	4c0c      	ldr	r4, [pc, #48]	; (80027a0 <__libc_init_array+0x44>)
 8002770:	f000 fc4c 	bl	800300c <_init>
 8002774:	1ba4      	subs	r4, r4, r6
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2500      	movs	r5, #0
 800277a:	42a5      	cmp	r5, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002784:	4798      	blx	r3
 8002786:	3501      	adds	r5, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800278e:	4798      	blx	r3
 8002790:	3501      	adds	r5, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	0800309c 	.word	0x0800309c
 8002798:	0800309c 	.word	0x0800309c
 800279c:	0800309c 	.word	0x0800309c
 80027a0:	080030a0 	.word	0x080030a0

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <siprintf>:
 80027b4:	b40e      	push	{r1, r2, r3}
 80027b6:	b500      	push	{lr}
 80027b8:	b09c      	sub	sp, #112	; 0x70
 80027ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027be:	ab1d      	add	r3, sp, #116	; 0x74
 80027c0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80027c4:	9002      	str	r0, [sp, #8]
 80027c6:	9006      	str	r0, [sp, #24]
 80027c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027cc:	480a      	ldr	r0, [pc, #40]	; (80027f8 <siprintf+0x44>)
 80027ce:	9104      	str	r1, [sp, #16]
 80027d0:	9107      	str	r1, [sp, #28]
 80027d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80027da:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	a902      	add	r1, sp, #8
 80027e4:	f000 f866 	bl	80028b4 <_svfiprintf_r>
 80027e8:	9b02      	ldr	r3, [sp, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	b01c      	add	sp, #112	; 0x70
 80027f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f4:	b003      	add	sp, #12
 80027f6:	4770      	bx	lr
 80027f8:	20000014 	.word	0x20000014

080027fc <__ssputs_r>:
 80027fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002800:	688e      	ldr	r6, [r1, #8]
 8002802:	429e      	cmp	r6, r3
 8002804:	4682      	mov	sl, r0
 8002806:	460c      	mov	r4, r1
 8002808:	4691      	mov	r9, r2
 800280a:	4698      	mov	r8, r3
 800280c:	d835      	bhi.n	800287a <__ssputs_r+0x7e>
 800280e:	898a      	ldrh	r2, [r1, #12]
 8002810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002814:	d031      	beq.n	800287a <__ssputs_r+0x7e>
 8002816:	6825      	ldr	r5, [r4, #0]
 8002818:	6909      	ldr	r1, [r1, #16]
 800281a:	1a6f      	subs	r7, r5, r1
 800281c:	6965      	ldr	r5, [r4, #20]
 800281e:	2302      	movs	r3, #2
 8002820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002824:	fb95 f5f3 	sdiv	r5, r5, r3
 8002828:	f108 0301 	add.w	r3, r8, #1
 800282c:	443b      	add	r3, r7
 800282e:	429d      	cmp	r5, r3
 8002830:	bf38      	it	cc
 8002832:	461d      	movcc	r5, r3
 8002834:	0553      	lsls	r3, r2, #21
 8002836:	d531      	bpl.n	800289c <__ssputs_r+0xa0>
 8002838:	4629      	mov	r1, r5
 800283a:	f000 fb39 	bl	8002eb0 <_malloc_r>
 800283e:	4606      	mov	r6, r0
 8002840:	b950      	cbnz	r0, 8002858 <__ssputs_r+0x5c>
 8002842:	230c      	movs	r3, #12
 8002844:	f8ca 3000 	str.w	r3, [sl]
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284e:	81a3      	strh	r3, [r4, #12]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002858:	463a      	mov	r2, r7
 800285a:	6921      	ldr	r1, [r4, #16]
 800285c:	f000 fab4 	bl	8002dc8 <memcpy>
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	81a3      	strh	r3, [r4, #12]
 800286c:	6126      	str	r6, [r4, #16]
 800286e:	6165      	str	r5, [r4, #20]
 8002870:	443e      	add	r6, r7
 8002872:	1bed      	subs	r5, r5, r7
 8002874:	6026      	str	r6, [r4, #0]
 8002876:	60a5      	str	r5, [r4, #8]
 8002878:	4646      	mov	r6, r8
 800287a:	4546      	cmp	r6, r8
 800287c:	bf28      	it	cs
 800287e:	4646      	movcs	r6, r8
 8002880:	4632      	mov	r2, r6
 8002882:	4649      	mov	r1, r9
 8002884:	6820      	ldr	r0, [r4, #0]
 8002886:	f000 faaa 	bl	8002dde <memmove>
 800288a:	68a3      	ldr	r3, [r4, #8]
 800288c:	1b9b      	subs	r3, r3, r6
 800288e:	60a3      	str	r3, [r4, #8]
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	441e      	add	r6, r3
 8002894:	6026      	str	r6, [r4, #0]
 8002896:	2000      	movs	r0, #0
 8002898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289c:	462a      	mov	r2, r5
 800289e:	f000 fb65 	bl	8002f6c <_realloc_r>
 80028a2:	4606      	mov	r6, r0
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1e1      	bne.n	800286c <__ssputs_r+0x70>
 80028a8:	6921      	ldr	r1, [r4, #16]
 80028aa:	4650      	mov	r0, sl
 80028ac:	f000 fab2 	bl	8002e14 <_free_r>
 80028b0:	e7c7      	b.n	8002842 <__ssputs_r+0x46>
	...

080028b4 <_svfiprintf_r>:
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	b09d      	sub	sp, #116	; 0x74
 80028ba:	4680      	mov	r8, r0
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	898b      	ldrh	r3, [r1, #12]
 80028c0:	061c      	lsls	r4, r3, #24
 80028c2:	460d      	mov	r5, r1
 80028c4:	4616      	mov	r6, r2
 80028c6:	d50f      	bpl.n	80028e8 <_svfiprintf_r+0x34>
 80028c8:	690b      	ldr	r3, [r1, #16]
 80028ca:	b96b      	cbnz	r3, 80028e8 <_svfiprintf_r+0x34>
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	f000 faef 	bl	8002eb0 <_malloc_r>
 80028d2:	6028      	str	r0, [r5, #0]
 80028d4:	6128      	str	r0, [r5, #16]
 80028d6:	b928      	cbnz	r0, 80028e4 <_svfiprintf_r+0x30>
 80028d8:	230c      	movs	r3, #12
 80028da:	f8c8 3000 	str.w	r3, [r8]
 80028de:	f04f 30ff 	mov.w	r0, #4294967295
 80028e2:	e0c5      	b.n	8002a70 <_svfiprintf_r+0x1bc>
 80028e4:	2340      	movs	r3, #64	; 0x40
 80028e6:	616b      	str	r3, [r5, #20]
 80028e8:	2300      	movs	r3, #0
 80028ea:	9309      	str	r3, [sp, #36]	; 0x24
 80028ec:	2320      	movs	r3, #32
 80028ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f2:	2330      	movs	r3, #48	; 0x30
 80028f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028f8:	f04f 0b01 	mov.w	fp, #1
 80028fc:	4637      	mov	r7, r6
 80028fe:	463c      	mov	r4, r7
 8002900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d13c      	bne.n	8002982 <_svfiprintf_r+0xce>
 8002908:	ebb7 0a06 	subs.w	sl, r7, r6
 800290c:	d00b      	beq.n	8002926 <_svfiprintf_r+0x72>
 800290e:	4653      	mov	r3, sl
 8002910:	4632      	mov	r2, r6
 8002912:	4629      	mov	r1, r5
 8002914:	4640      	mov	r0, r8
 8002916:	f7ff ff71 	bl	80027fc <__ssputs_r>
 800291a:	3001      	adds	r0, #1
 800291c:	f000 80a3 	beq.w	8002a66 <_svfiprintf_r+0x1b2>
 8002920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002922:	4453      	add	r3, sl
 8002924:	9309      	str	r3, [sp, #36]	; 0x24
 8002926:	783b      	ldrb	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 809c 	beq.w	8002a66 <_svfiprintf_r+0x1b2>
 800292e:	2300      	movs	r3, #0
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	9304      	str	r3, [sp, #16]
 8002936:	9307      	str	r3, [sp, #28]
 8002938:	9205      	str	r2, [sp, #20]
 800293a:	9306      	str	r3, [sp, #24]
 800293c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002940:	931a      	str	r3, [sp, #104]	; 0x68
 8002942:	2205      	movs	r2, #5
 8002944:	7821      	ldrb	r1, [r4, #0]
 8002946:	4850      	ldr	r0, [pc, #320]	; (8002a88 <_svfiprintf_r+0x1d4>)
 8002948:	f7fd fc5a 	bl	8000200 <memchr>
 800294c:	1c67      	adds	r7, r4, #1
 800294e:	9b04      	ldr	r3, [sp, #16]
 8002950:	b9d8      	cbnz	r0, 800298a <_svfiprintf_r+0xd6>
 8002952:	06d9      	lsls	r1, r3, #27
 8002954:	bf44      	itt	mi
 8002956:	2220      	movmi	r2, #32
 8002958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800295c:	071a      	lsls	r2, r3, #28
 800295e:	bf44      	itt	mi
 8002960:	222b      	movmi	r2, #43	; 0x2b
 8002962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002966:	7822      	ldrb	r2, [r4, #0]
 8002968:	2a2a      	cmp	r2, #42	; 0x2a
 800296a:	d016      	beq.n	800299a <_svfiprintf_r+0xe6>
 800296c:	9a07      	ldr	r2, [sp, #28]
 800296e:	2100      	movs	r1, #0
 8002970:	200a      	movs	r0, #10
 8002972:	4627      	mov	r7, r4
 8002974:	3401      	adds	r4, #1
 8002976:	783b      	ldrb	r3, [r7, #0]
 8002978:	3b30      	subs	r3, #48	; 0x30
 800297a:	2b09      	cmp	r3, #9
 800297c:	d951      	bls.n	8002a22 <_svfiprintf_r+0x16e>
 800297e:	b1c9      	cbz	r1, 80029b4 <_svfiprintf_r+0x100>
 8002980:	e011      	b.n	80029a6 <_svfiprintf_r+0xf2>
 8002982:	2b25      	cmp	r3, #37	; 0x25
 8002984:	d0c0      	beq.n	8002908 <_svfiprintf_r+0x54>
 8002986:	4627      	mov	r7, r4
 8002988:	e7b9      	b.n	80028fe <_svfiprintf_r+0x4a>
 800298a:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <_svfiprintf_r+0x1d4>)
 800298c:	1a80      	subs	r0, r0, r2
 800298e:	fa0b f000 	lsl.w	r0, fp, r0
 8002992:	4318      	orrs	r0, r3
 8002994:	9004      	str	r0, [sp, #16]
 8002996:	463c      	mov	r4, r7
 8002998:	e7d3      	b.n	8002942 <_svfiprintf_r+0x8e>
 800299a:	9a03      	ldr	r2, [sp, #12]
 800299c:	1d11      	adds	r1, r2, #4
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	9103      	str	r1, [sp, #12]
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	db01      	blt.n	80029aa <_svfiprintf_r+0xf6>
 80029a6:	9207      	str	r2, [sp, #28]
 80029a8:	e004      	b.n	80029b4 <_svfiprintf_r+0x100>
 80029aa:	4252      	negs	r2, r2
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	9207      	str	r2, [sp, #28]
 80029b2:	9304      	str	r3, [sp, #16]
 80029b4:	783b      	ldrb	r3, [r7, #0]
 80029b6:	2b2e      	cmp	r3, #46	; 0x2e
 80029b8:	d10e      	bne.n	80029d8 <_svfiprintf_r+0x124>
 80029ba:	787b      	ldrb	r3, [r7, #1]
 80029bc:	2b2a      	cmp	r3, #42	; 0x2a
 80029be:	f107 0101 	add.w	r1, r7, #1
 80029c2:	d132      	bne.n	8002a2a <_svfiprintf_r+0x176>
 80029c4:	9b03      	ldr	r3, [sp, #12]
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	9203      	str	r2, [sp, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bfb8      	it	lt
 80029d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80029d4:	3702      	adds	r7, #2
 80029d6:	9305      	str	r3, [sp, #20]
 80029d8:	4c2c      	ldr	r4, [pc, #176]	; (8002a8c <_svfiprintf_r+0x1d8>)
 80029da:	7839      	ldrb	r1, [r7, #0]
 80029dc:	2203      	movs	r2, #3
 80029de:	4620      	mov	r0, r4
 80029e0:	f7fd fc0e 	bl	8000200 <memchr>
 80029e4:	b138      	cbz	r0, 80029f6 <_svfiprintf_r+0x142>
 80029e6:	2340      	movs	r3, #64	; 0x40
 80029e8:	1b00      	subs	r0, r0, r4
 80029ea:	fa03 f000 	lsl.w	r0, r3, r0
 80029ee:	9b04      	ldr	r3, [sp, #16]
 80029f0:	4303      	orrs	r3, r0
 80029f2:	9304      	str	r3, [sp, #16]
 80029f4:	3701      	adds	r7, #1
 80029f6:	7839      	ldrb	r1, [r7, #0]
 80029f8:	4825      	ldr	r0, [pc, #148]	; (8002a90 <_svfiprintf_r+0x1dc>)
 80029fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029fe:	2206      	movs	r2, #6
 8002a00:	1c7e      	adds	r6, r7, #1
 8002a02:	f7fd fbfd 	bl	8000200 <memchr>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d035      	beq.n	8002a76 <_svfiprintf_r+0x1c2>
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <_svfiprintf_r+0x1e0>)
 8002a0c:	b9fb      	cbnz	r3, 8002a4e <_svfiprintf_r+0x19a>
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	3307      	adds	r3, #7
 8002a12:	f023 0307 	bic.w	r3, r3, #7
 8002a16:	3308      	adds	r3, #8
 8002a18:	9303      	str	r3, [sp, #12]
 8002a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a1c:	444b      	add	r3, r9
 8002a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a20:	e76c      	b.n	80028fc <_svfiprintf_r+0x48>
 8002a22:	fb00 3202 	mla	r2, r0, r2, r3
 8002a26:	2101      	movs	r1, #1
 8002a28:	e7a3      	b.n	8002972 <_svfiprintf_r+0xbe>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9305      	str	r3, [sp, #20]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	240a      	movs	r4, #10
 8002a32:	460f      	mov	r7, r1
 8002a34:	3101      	adds	r1, #1
 8002a36:	783a      	ldrb	r2, [r7, #0]
 8002a38:	3a30      	subs	r2, #48	; 0x30
 8002a3a:	2a09      	cmp	r2, #9
 8002a3c:	d903      	bls.n	8002a46 <_svfiprintf_r+0x192>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ca      	beq.n	80029d8 <_svfiprintf_r+0x124>
 8002a42:	9005      	str	r0, [sp, #20]
 8002a44:	e7c8      	b.n	80029d8 <_svfiprintf_r+0x124>
 8002a46:	fb04 2000 	mla	r0, r4, r0, r2
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e7f1      	b.n	8002a32 <_svfiprintf_r+0x17e>
 8002a4e:	ab03      	add	r3, sp, #12
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	462a      	mov	r2, r5
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_svfiprintf_r+0x1e4>)
 8002a56:	a904      	add	r1, sp, #16
 8002a58:	4640      	mov	r0, r8
 8002a5a:	f3af 8000 	nop.w
 8002a5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a62:	4681      	mov	r9, r0
 8002a64:	d1d9      	bne.n	8002a1a <_svfiprintf_r+0x166>
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	065b      	lsls	r3, r3, #25
 8002a6a:	f53f af38 	bmi.w	80028de <_svfiprintf_r+0x2a>
 8002a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a70:	b01d      	add	sp, #116	; 0x74
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	ab03      	add	r3, sp, #12
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	462a      	mov	r2, r5
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <_svfiprintf_r+0x1e4>)
 8002a7e:	a904      	add	r1, sp, #16
 8002a80:	4640      	mov	r0, r8
 8002a82:	f000 f881 	bl	8002b88 <_printf_i>
 8002a86:	e7ea      	b.n	8002a5e <_svfiprintf_r+0x1aa>
 8002a88:	08003060 	.word	0x08003060
 8002a8c:	08003066 	.word	0x08003066
 8002a90:	0800306a 	.word	0x0800306a
 8002a94:	00000000 	.word	0x00000000
 8002a98:	080027fd 	.word	0x080027fd

08002a9c <_printf_common>:
 8002a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa0:	4691      	mov	r9, r2
 8002aa2:	461f      	mov	r7, r3
 8002aa4:	688a      	ldr	r2, [r1, #8]
 8002aa6:	690b      	ldr	r3, [r1, #16]
 8002aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bfb8      	it	lt
 8002ab0:	4613      	movlt	r3, r2
 8002ab2:	f8c9 3000 	str.w	r3, [r9]
 8002ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aba:	4606      	mov	r6, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	b112      	cbz	r2, 8002ac6 <_printf_common+0x2a>
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8c9 3000 	str.w	r3, [r9]
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	0699      	lsls	r1, r3, #26
 8002aca:	bf42      	ittt	mi
 8002acc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ad0:	3302      	addmi	r3, #2
 8002ad2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ad6:	6825      	ldr	r5, [r4, #0]
 8002ad8:	f015 0506 	ands.w	r5, r5, #6
 8002adc:	d107      	bne.n	8002aee <_printf_common+0x52>
 8002ade:	f104 0a19 	add.w	sl, r4, #25
 8002ae2:	68e3      	ldr	r3, [r4, #12]
 8002ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	429d      	cmp	r5, r3
 8002aec:	db29      	blt.n	8002b42 <_printf_common+0xa6>
 8002aee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	3300      	adds	r3, #0
 8002af6:	bf18      	it	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	0692      	lsls	r2, r2, #26
 8002afc:	d42e      	bmi.n	8002b5c <_printf_common+0xc0>
 8002afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b02:	4639      	mov	r1, r7
 8002b04:	4630      	mov	r0, r6
 8002b06:	47c0      	blx	r8
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d021      	beq.n	8002b50 <_printf_common+0xb4>
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	68e5      	ldr	r5, [r4, #12]
 8002b10:	f8d9 2000 	ldr.w	r2, [r9]
 8002b14:	f003 0306 	and.w	r3, r3, #6
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	bf08      	it	eq
 8002b1c:	1aad      	subeq	r5, r5, r2
 8002b1e:	68a3      	ldr	r3, [r4, #8]
 8002b20:	6922      	ldr	r2, [r4, #16]
 8002b22:	bf0c      	ite	eq
 8002b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b28:	2500      	movne	r5, #0
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	bfc4      	itt	gt
 8002b2e:	1a9b      	subgt	r3, r3, r2
 8002b30:	18ed      	addgt	r5, r5, r3
 8002b32:	f04f 0900 	mov.w	r9, #0
 8002b36:	341a      	adds	r4, #26
 8002b38:	454d      	cmp	r5, r9
 8002b3a:	d11b      	bne.n	8002b74 <_printf_common+0xd8>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b42:	2301      	movs	r3, #1
 8002b44:	4652      	mov	r2, sl
 8002b46:	4639      	mov	r1, r7
 8002b48:	4630      	mov	r0, r6
 8002b4a:	47c0      	blx	r8
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d103      	bne.n	8002b58 <_printf_common+0xbc>
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b58:	3501      	adds	r5, #1
 8002b5a:	e7c2      	b.n	8002ae2 <_printf_common+0x46>
 8002b5c:	18e1      	adds	r1, r4, r3
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	2030      	movs	r0, #48	; 0x30
 8002b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b66:	4422      	add	r2, r4
 8002b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b70:	3302      	adds	r3, #2
 8002b72:	e7c4      	b.n	8002afe <_printf_common+0x62>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4622      	mov	r2, r4
 8002b78:	4639      	mov	r1, r7
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	47c0      	blx	r8
 8002b7e:	3001      	adds	r0, #1
 8002b80:	d0e6      	beq.n	8002b50 <_printf_common+0xb4>
 8002b82:	f109 0901 	add.w	r9, r9, #1
 8002b86:	e7d7      	b.n	8002b38 <_printf_common+0x9c>

08002b88 <_printf_i>:
 8002b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b8c:	4617      	mov	r7, r2
 8002b8e:	7e0a      	ldrb	r2, [r1, #24]
 8002b90:	b085      	sub	sp, #20
 8002b92:	2a6e      	cmp	r2, #110	; 0x6e
 8002b94:	4698      	mov	r8, r3
 8002b96:	4606      	mov	r6, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b9c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002ba0:	f000 80bc 	beq.w	8002d1c <_printf_i+0x194>
 8002ba4:	d81a      	bhi.n	8002bdc <_printf_i+0x54>
 8002ba6:	2a63      	cmp	r2, #99	; 0x63
 8002ba8:	d02e      	beq.n	8002c08 <_printf_i+0x80>
 8002baa:	d80a      	bhi.n	8002bc2 <_printf_i+0x3a>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	f000 80c8 	beq.w	8002d42 <_printf_i+0x1ba>
 8002bb2:	2a58      	cmp	r2, #88	; 0x58
 8002bb4:	f000 808a 	beq.w	8002ccc <_printf_i+0x144>
 8002bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002bc0:	e02a      	b.n	8002c18 <_printf_i+0x90>
 8002bc2:	2a64      	cmp	r2, #100	; 0x64
 8002bc4:	d001      	beq.n	8002bca <_printf_i+0x42>
 8002bc6:	2a69      	cmp	r2, #105	; 0x69
 8002bc8:	d1f6      	bne.n	8002bb8 <_printf_i+0x30>
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002bd2:	d023      	beq.n	8002c1c <_printf_i+0x94>
 8002bd4:	1d11      	adds	r1, r2, #4
 8002bd6:	6019      	str	r1, [r3, #0]
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	e027      	b.n	8002c2c <_printf_i+0xa4>
 8002bdc:	2a73      	cmp	r2, #115	; 0x73
 8002bde:	f000 80b4 	beq.w	8002d4a <_printf_i+0x1c2>
 8002be2:	d808      	bhi.n	8002bf6 <_printf_i+0x6e>
 8002be4:	2a6f      	cmp	r2, #111	; 0x6f
 8002be6:	d02a      	beq.n	8002c3e <_printf_i+0xb6>
 8002be8:	2a70      	cmp	r2, #112	; 0x70
 8002bea:	d1e5      	bne.n	8002bb8 <_printf_i+0x30>
 8002bec:	680a      	ldr	r2, [r1, #0]
 8002bee:	f042 0220 	orr.w	r2, r2, #32
 8002bf2:	600a      	str	r2, [r1, #0]
 8002bf4:	e003      	b.n	8002bfe <_printf_i+0x76>
 8002bf6:	2a75      	cmp	r2, #117	; 0x75
 8002bf8:	d021      	beq.n	8002c3e <_printf_i+0xb6>
 8002bfa:	2a78      	cmp	r2, #120	; 0x78
 8002bfc:	d1dc      	bne.n	8002bb8 <_printf_i+0x30>
 8002bfe:	2278      	movs	r2, #120	; 0x78
 8002c00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002c04:	496e      	ldr	r1, [pc, #440]	; (8002dc0 <_printf_i+0x238>)
 8002c06:	e064      	b.n	8002cd2 <_printf_i+0x14a>
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002c0e:	1d11      	adds	r1, r2, #4
 8002c10:	6019      	str	r1, [r3, #0]
 8002c12:	6813      	ldr	r3, [r2, #0]
 8002c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0a3      	b.n	8002d64 <_printf_i+0x1dc>
 8002c1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c20:	f102 0104 	add.w	r1, r2, #4
 8002c24:	6019      	str	r1, [r3, #0]
 8002c26:	d0d7      	beq.n	8002bd8 <_printf_i+0x50>
 8002c28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da03      	bge.n	8002c38 <_printf_i+0xb0>
 8002c30:	222d      	movs	r2, #45	; 0x2d
 8002c32:	425b      	negs	r3, r3
 8002c34:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c38:	4962      	ldr	r1, [pc, #392]	; (8002dc4 <_printf_i+0x23c>)
 8002c3a:	220a      	movs	r2, #10
 8002c3c:	e017      	b.n	8002c6e <_printf_i+0xe6>
 8002c3e:	6820      	ldr	r0, [r4, #0]
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c46:	d003      	beq.n	8002c50 <_printf_i+0xc8>
 8002c48:	1d08      	adds	r0, r1, #4
 8002c4a:	6018      	str	r0, [r3, #0]
 8002c4c:	680b      	ldr	r3, [r1, #0]
 8002c4e:	e006      	b.n	8002c5e <_printf_i+0xd6>
 8002c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c54:	f101 0004 	add.w	r0, r1, #4
 8002c58:	6018      	str	r0, [r3, #0]
 8002c5a:	d0f7      	beq.n	8002c4c <_printf_i+0xc4>
 8002c5c:	880b      	ldrh	r3, [r1, #0]
 8002c5e:	4959      	ldr	r1, [pc, #356]	; (8002dc4 <_printf_i+0x23c>)
 8002c60:	2a6f      	cmp	r2, #111	; 0x6f
 8002c62:	bf14      	ite	ne
 8002c64:	220a      	movne	r2, #10
 8002c66:	2208      	moveq	r2, #8
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c6e:	6865      	ldr	r5, [r4, #4]
 8002c70:	60a5      	str	r5, [r4, #8]
 8002c72:	2d00      	cmp	r5, #0
 8002c74:	f2c0 809c 	blt.w	8002db0 <_printf_i+0x228>
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	f020 0004 	bic.w	r0, r0, #4
 8002c7e:	6020      	str	r0, [r4, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d13f      	bne.n	8002d04 <_printf_i+0x17c>
 8002c84:	2d00      	cmp	r5, #0
 8002c86:	f040 8095 	bne.w	8002db4 <_printf_i+0x22c>
 8002c8a:	4675      	mov	r5, lr
 8002c8c:	2a08      	cmp	r2, #8
 8002c8e:	d10b      	bne.n	8002ca8 <_printf_i+0x120>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	07da      	lsls	r2, r3, #31
 8002c94:	d508      	bpl.n	8002ca8 <_printf_i+0x120>
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	6862      	ldr	r2, [r4, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bfde      	ittt	le
 8002c9e:	2330      	movle	r3, #48	; 0x30
 8002ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ca8:	ebae 0305 	sub.w	r3, lr, r5
 8002cac:	6123      	str	r3, [r4, #16]
 8002cae:	f8cd 8000 	str.w	r8, [sp]
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	aa03      	add	r2, sp, #12
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4630      	mov	r0, r6
 8002cba:	f7ff feef 	bl	8002a9c <_printf_common>
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d155      	bne.n	8002d6e <_printf_i+0x1e6>
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	b005      	add	sp, #20
 8002cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ccc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002cd0:	493c      	ldr	r1, [pc, #240]	; (8002dc4 <_printf_i+0x23c>)
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cda:	f100 0504 	add.w	r5, r0, #4
 8002cde:	601d      	str	r5, [r3, #0]
 8002ce0:	d001      	beq.n	8002ce6 <_printf_i+0x15e>
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	e002      	b.n	8002cec <_printf_i+0x164>
 8002ce6:	0655      	lsls	r5, r2, #25
 8002ce8:	d5fb      	bpl.n	8002ce2 <_printf_i+0x15a>
 8002cea:	8803      	ldrh	r3, [r0, #0]
 8002cec:	07d0      	lsls	r0, r2, #31
 8002cee:	bf44      	itt	mi
 8002cf0:	f042 0220 	orrmi.w	r2, r2, #32
 8002cf4:	6022      	strmi	r2, [r4, #0]
 8002cf6:	b91b      	cbnz	r3, 8002d00 <_printf_i+0x178>
 8002cf8:	6822      	ldr	r2, [r4, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	2210      	movs	r2, #16
 8002d02:	e7b1      	b.n	8002c68 <_printf_i+0xe0>
 8002d04:	4675      	mov	r5, lr
 8002d06:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d0a:	fb02 3310 	mls	r3, r2, r0, r3
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d14:	4603      	mov	r3, r0
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d1f5      	bne.n	8002d06 <_printf_i+0x17e>
 8002d1a:	e7b7      	b.n	8002c8c <_printf_i+0x104>
 8002d1c:	6808      	ldr	r0, [r1, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6949      	ldr	r1, [r1, #20]
 8002d22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d26:	d004      	beq.n	8002d32 <_printf_i+0x1aa>
 8002d28:	1d10      	adds	r0, r2, #4
 8002d2a:	6018      	str	r0, [r3, #0]
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	6019      	str	r1, [r3, #0]
 8002d30:	e007      	b.n	8002d42 <_printf_i+0x1ba>
 8002d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d36:	f102 0004 	add.w	r0, r2, #4
 8002d3a:	6018      	str	r0, [r3, #0]
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	d0f6      	beq.n	8002d2e <_printf_i+0x1a6>
 8002d40:	8019      	strh	r1, [r3, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	6123      	str	r3, [r4, #16]
 8002d46:	4675      	mov	r5, lr
 8002d48:	e7b1      	b.n	8002cae <_printf_i+0x126>
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	1d11      	adds	r1, r2, #4
 8002d4e:	6019      	str	r1, [r3, #0]
 8002d50:	6815      	ldr	r5, [r2, #0]
 8002d52:	6862      	ldr	r2, [r4, #4]
 8002d54:	2100      	movs	r1, #0
 8002d56:	4628      	mov	r0, r5
 8002d58:	f7fd fa52 	bl	8000200 <memchr>
 8002d5c:	b108      	cbz	r0, 8002d62 <_printf_i+0x1da>
 8002d5e:	1b40      	subs	r0, r0, r5
 8002d60:	6060      	str	r0, [r4, #4]
 8002d62:	6863      	ldr	r3, [r4, #4]
 8002d64:	6123      	str	r3, [r4, #16]
 8002d66:	2300      	movs	r3, #0
 8002d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d6c:	e79f      	b.n	8002cae <_printf_i+0x126>
 8002d6e:	6923      	ldr	r3, [r4, #16]
 8002d70:	462a      	mov	r2, r5
 8002d72:	4639      	mov	r1, r7
 8002d74:	4630      	mov	r0, r6
 8002d76:	47c0      	blx	r8
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d0a2      	beq.n	8002cc2 <_printf_i+0x13a>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	079b      	lsls	r3, r3, #30
 8002d80:	d507      	bpl.n	8002d92 <_printf_i+0x20a>
 8002d82:	2500      	movs	r5, #0
 8002d84:	f104 0919 	add.w	r9, r4, #25
 8002d88:	68e3      	ldr	r3, [r4, #12]
 8002d8a:	9a03      	ldr	r2, [sp, #12]
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	429d      	cmp	r5, r3
 8002d90:	db05      	blt.n	8002d9e <_printf_i+0x216>
 8002d92:	68e0      	ldr	r0, [r4, #12]
 8002d94:	9b03      	ldr	r3, [sp, #12]
 8002d96:	4298      	cmp	r0, r3
 8002d98:	bfb8      	it	lt
 8002d9a:	4618      	movlt	r0, r3
 8002d9c:	e793      	b.n	8002cc6 <_printf_i+0x13e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	464a      	mov	r2, r9
 8002da2:	4639      	mov	r1, r7
 8002da4:	4630      	mov	r0, r6
 8002da6:	47c0      	blx	r8
 8002da8:	3001      	adds	r0, #1
 8002daa:	d08a      	beq.n	8002cc2 <_printf_i+0x13a>
 8002dac:	3501      	adds	r5, #1
 8002dae:	e7eb      	b.n	8002d88 <_printf_i+0x200>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1a7      	bne.n	8002d04 <_printf_i+0x17c>
 8002db4:	780b      	ldrb	r3, [r1, #0]
 8002db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dbe:	e765      	b.n	8002c8c <_printf_i+0x104>
 8002dc0:	08003082 	.word	0x08003082
 8002dc4:	08003071 	.word	0x08003071

08002dc8 <memcpy>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	1e43      	subs	r3, r0, #1
 8002dcc:	440a      	add	r2, r1
 8002dce:	4291      	cmp	r1, r2
 8002dd0:	d100      	bne.n	8002dd4 <memcpy+0xc>
 8002dd2:	bd10      	pop	{r4, pc}
 8002dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ddc:	e7f7      	b.n	8002dce <memcpy+0x6>

08002dde <memmove>:
 8002dde:	4288      	cmp	r0, r1
 8002de0:	b510      	push	{r4, lr}
 8002de2:	eb01 0302 	add.w	r3, r1, r2
 8002de6:	d803      	bhi.n	8002df0 <memmove+0x12>
 8002de8:	1e42      	subs	r2, r0, #1
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d10c      	bne.n	8002e08 <memmove+0x2a>
 8002dee:	bd10      	pop	{r4, pc}
 8002df0:	4298      	cmp	r0, r3
 8002df2:	d2f9      	bcs.n	8002de8 <memmove+0xa>
 8002df4:	1881      	adds	r1, r0, r2
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	42d3      	cmn	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memmove+0x20>
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e06:	e7f7      	b.n	8002df8 <memmove+0x1a>
 8002e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e10:	e7eb      	b.n	8002dea <memmove+0xc>
	...

08002e14 <_free_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4605      	mov	r5, r0
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d045      	beq.n	8002ea8 <_free_r+0x94>
 8002e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e20:	1f0c      	subs	r4, r1, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bfb8      	it	lt
 8002e26:	18e4      	addlt	r4, r4, r3
 8002e28:	f000 f8d6 	bl	8002fd8 <__malloc_lock>
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <_free_r+0x98>)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	4610      	mov	r0, r2
 8002e32:	b933      	cbnz	r3, 8002e42 <_free_r+0x2e>
 8002e34:	6063      	str	r3, [r4, #4]
 8002e36:	6014      	str	r4, [r2, #0]
 8002e38:	4628      	mov	r0, r5
 8002e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e3e:	f000 b8cc 	b.w	8002fda <__malloc_unlock>
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d90c      	bls.n	8002e60 <_free_r+0x4c>
 8002e46:	6821      	ldr	r1, [r4, #0]
 8002e48:	1862      	adds	r2, r4, r1
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	bf04      	itt	eq
 8002e4e:	681a      	ldreq	r2, [r3, #0]
 8002e50:	685b      	ldreq	r3, [r3, #4]
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	bf04      	itt	eq
 8002e56:	1852      	addeq	r2, r2, r1
 8002e58:	6022      	streq	r2, [r4, #0]
 8002e5a:	6004      	str	r4, [r0, #0]
 8002e5c:	e7ec      	b.n	8002e38 <_free_r+0x24>
 8002e5e:	4613      	mov	r3, r2
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	b10a      	cbz	r2, 8002e68 <_free_r+0x54>
 8002e64:	42a2      	cmp	r2, r4
 8002e66:	d9fa      	bls.n	8002e5e <_free_r+0x4a>
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	1858      	adds	r0, r3, r1
 8002e6c:	42a0      	cmp	r0, r4
 8002e6e:	d10b      	bne.n	8002e88 <_free_r+0x74>
 8002e70:	6820      	ldr	r0, [r4, #0]
 8002e72:	4401      	add	r1, r0
 8002e74:	1858      	adds	r0, r3, r1
 8002e76:	4282      	cmp	r2, r0
 8002e78:	6019      	str	r1, [r3, #0]
 8002e7a:	d1dd      	bne.n	8002e38 <_free_r+0x24>
 8002e7c:	6810      	ldr	r0, [r2, #0]
 8002e7e:	6852      	ldr	r2, [r2, #4]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	4401      	add	r1, r0
 8002e84:	6019      	str	r1, [r3, #0]
 8002e86:	e7d7      	b.n	8002e38 <_free_r+0x24>
 8002e88:	d902      	bls.n	8002e90 <_free_r+0x7c>
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	602b      	str	r3, [r5, #0]
 8002e8e:	e7d3      	b.n	8002e38 <_free_r+0x24>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428a      	cmp	r2, r1
 8002e96:	bf04      	itt	eq
 8002e98:	6811      	ldreq	r1, [r2, #0]
 8002e9a:	6852      	ldreq	r2, [r2, #4]
 8002e9c:	6062      	str	r2, [r4, #4]
 8002e9e:	bf04      	itt	eq
 8002ea0:	1809      	addeq	r1, r1, r0
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	605c      	str	r4, [r3, #4]
 8002ea6:	e7c7      	b.n	8002e38 <_free_r+0x24>
 8002ea8:	bd38      	pop	{r3, r4, r5, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000094 	.word	0x20000094

08002eb0 <_malloc_r>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	1ccd      	adds	r5, r1, #3
 8002eb4:	f025 0503 	bic.w	r5, r5, #3
 8002eb8:	3508      	adds	r5, #8
 8002eba:	2d0c      	cmp	r5, #12
 8002ebc:	bf38      	it	cc
 8002ebe:	250c      	movcc	r5, #12
 8002ec0:	2d00      	cmp	r5, #0
 8002ec2:	4606      	mov	r6, r0
 8002ec4:	db01      	blt.n	8002eca <_malloc_r+0x1a>
 8002ec6:	42a9      	cmp	r1, r5
 8002ec8:	d903      	bls.n	8002ed2 <_malloc_r+0x22>
 8002eca:	230c      	movs	r3, #12
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	f000 f881 	bl	8002fd8 <__malloc_lock>
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <_malloc_r+0xb4>)
 8002ed8:	6814      	ldr	r4, [r2, #0]
 8002eda:	4621      	mov	r1, r4
 8002edc:	b991      	cbnz	r1, 8002f04 <_malloc_r+0x54>
 8002ede:	4c22      	ldr	r4, [pc, #136]	; (8002f68 <_malloc_r+0xb8>)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	b91b      	cbnz	r3, 8002eec <_malloc_r+0x3c>
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 f867 	bl	8002fb8 <_sbrk_r>
 8002eea:	6020      	str	r0, [r4, #0]
 8002eec:	4629      	mov	r1, r5
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 f862 	bl	8002fb8 <_sbrk_r>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d126      	bne.n	8002f46 <_malloc_r+0x96>
 8002ef8:	230c      	movs	r3, #12
 8002efa:	6033      	str	r3, [r6, #0]
 8002efc:	4630      	mov	r0, r6
 8002efe:	f000 f86c 	bl	8002fda <__malloc_unlock>
 8002f02:	e7e4      	b.n	8002ece <_malloc_r+0x1e>
 8002f04:	680b      	ldr	r3, [r1, #0]
 8002f06:	1b5b      	subs	r3, r3, r5
 8002f08:	d41a      	bmi.n	8002f40 <_malloc_r+0x90>
 8002f0a:	2b0b      	cmp	r3, #11
 8002f0c:	d90f      	bls.n	8002f2e <_malloc_r+0x7e>
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	50cd      	str	r5, [r1, r3]
 8002f12:	18cc      	adds	r4, r1, r3
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 f860 	bl	8002fda <__malloc_unlock>
 8002f1a:	f104 000b 	add.w	r0, r4, #11
 8002f1e:	1d23      	adds	r3, r4, #4
 8002f20:	f020 0007 	bic.w	r0, r0, #7
 8002f24:	1ac3      	subs	r3, r0, r3
 8002f26:	d01b      	beq.n	8002f60 <_malloc_r+0xb0>
 8002f28:	425a      	negs	r2, r3
 8002f2a:	50e2      	str	r2, [r4, r3]
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	428c      	cmp	r4, r1
 8002f30:	bf0d      	iteet	eq
 8002f32:	6863      	ldreq	r3, [r4, #4]
 8002f34:	684b      	ldrne	r3, [r1, #4]
 8002f36:	6063      	strne	r3, [r4, #4]
 8002f38:	6013      	streq	r3, [r2, #0]
 8002f3a:	bf18      	it	ne
 8002f3c:	460c      	movne	r4, r1
 8002f3e:	e7e9      	b.n	8002f14 <_malloc_r+0x64>
 8002f40:	460c      	mov	r4, r1
 8002f42:	6849      	ldr	r1, [r1, #4]
 8002f44:	e7ca      	b.n	8002edc <_malloc_r+0x2c>
 8002f46:	1cc4      	adds	r4, r0, #3
 8002f48:	f024 0403 	bic.w	r4, r4, #3
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d005      	beq.n	8002f5c <_malloc_r+0xac>
 8002f50:	1a21      	subs	r1, r4, r0
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 f830 	bl	8002fb8 <_sbrk_r>
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d0cd      	beq.n	8002ef8 <_malloc_r+0x48>
 8002f5c:	6025      	str	r5, [r4, #0]
 8002f5e:	e7d9      	b.n	8002f14 <_malloc_r+0x64>
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
 8002f62:	bf00      	nop
 8002f64:	20000094 	.word	0x20000094
 8002f68:	20000098 	.word	0x20000098

08002f6c <_realloc_r>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	4607      	mov	r7, r0
 8002f70:	4614      	mov	r4, r2
 8002f72:	460e      	mov	r6, r1
 8002f74:	b921      	cbnz	r1, 8002f80 <_realloc_r+0x14>
 8002f76:	4611      	mov	r1, r2
 8002f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f7c:	f7ff bf98 	b.w	8002eb0 <_malloc_r>
 8002f80:	b922      	cbnz	r2, 8002f8c <_realloc_r+0x20>
 8002f82:	f7ff ff47 	bl	8002e14 <_free_r>
 8002f86:	4625      	mov	r5, r4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8c:	f000 f826 	bl	8002fdc <_malloc_usable_size_r>
 8002f90:	4284      	cmp	r4, r0
 8002f92:	d90f      	bls.n	8002fb4 <_realloc_r+0x48>
 8002f94:	4621      	mov	r1, r4
 8002f96:	4638      	mov	r0, r7
 8002f98:	f7ff ff8a 	bl	8002eb0 <_malloc_r>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d0f2      	beq.n	8002f88 <_realloc_r+0x1c>
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	f7ff ff0f 	bl	8002dc8 <memcpy>
 8002faa:	4631      	mov	r1, r6
 8002fac:	4638      	mov	r0, r7
 8002fae:	f7ff ff31 	bl	8002e14 <_free_r>
 8002fb2:	e7e9      	b.n	8002f88 <_realloc_r+0x1c>
 8002fb4:	4635      	mov	r5, r6
 8002fb6:	e7e7      	b.n	8002f88 <_realloc_r+0x1c>

08002fb8 <_sbrk_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4c06      	ldr	r4, [pc, #24]	; (8002fd4 <_sbrk_r+0x1c>)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	f000 f814 	bl	8002ff0 <_sbrk>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_sbrk_r+0x1a>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_sbrk_r+0x1a>
 8002fd0:	602b      	str	r3, [r5, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	200001d4 	.word	0x200001d4

08002fd8 <__malloc_lock>:
 8002fd8:	4770      	bx	lr

08002fda <__malloc_unlock>:
 8002fda:	4770      	bx	lr

08002fdc <_malloc_usable_size_r>:
 8002fdc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	f1a0 0004 	sub.w	r0, r0, #4
 8002fe6:	bfbc      	itt	lt
 8002fe8:	580b      	ldrlt	r3, [r1, r0]
 8002fea:	18c0      	addlt	r0, r0, r3
 8002fec:	4770      	bx	lr
	...

08002ff0 <_sbrk>:
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <_sbrk+0x14>)
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	b909      	cbnz	r1, 8002ffc <_sbrk+0xc>
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <_sbrk+0x18>)
 8002ffa:	6019      	str	r1, [r3, #0]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	4402      	add	r2, r0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	4770      	bx	lr
 8003004:	2000009c 	.word	0x2000009c
 8003008:	200001d8 	.word	0x200001d8

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
